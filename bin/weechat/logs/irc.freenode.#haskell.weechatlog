2019-01-24 19:50:28	-->	gwosix (~gwosix@112.209.186.56) has joined #haskell
2019-01-24 19:50:28	--	Topic for #haskell is "https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: https://gist.github.com/ | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org"
2019-01-24 19:50:28	--	Topic set by glguy on Sat, 05 Jan 2019 15:21:52
2019-01-24 19:50:28	--	Channel #haskell: 1337 nicks (2 ops, 0 voices, 1335 normals)
2019-01-24 19:50:28	--	URL for #haskell: http://www.haskell.org/
2019-01-24 19:50:30	--	Channel created on Sun, 26 Nov 2006 06:42:48
2019-01-24 19:50:42	-->	pavonia (~user@unaffiliated/siracusa) has joined #haskell
2019-01-24 19:52:04	<--	nan` (~nan`@cpe-75-86-97-30.wi.res.rr.com) has quit (Ping timeout: 240 seconds)
2019-01-24 19:52:53	-->	davr0s (~textual@host109-155-92-146.range109-155.btcentralplus.com) has joined #haskell
2019-01-24 19:53:17	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-24 19:53:32	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-24 19:55:21	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 250 seconds)
2019-01-24 19:57:48	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-24 19:58:03	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-24 19:58:16	<--	body (~body@cpc88876-leic19-2-0-cust32.8-1.cable.virginm.net) has quit (Read error: No route to host)
2019-01-24 20:00:22	-->	nowhere_man (~pierre@lneuilly-657-1-22-93.w90-63.abo.wanadoo.fr) has joined #haskell
2019-01-24 20:00:26	lyxia	you need a special case for a = Char
2019-01-24 20:01:58	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-24 20:02:05	-->	marco_t (~marco_t@181.231.118.54) has joined #haskell
2019-01-24 20:02:08	-->	ym555 (~ym@156.201.104.27) has joined #haskell
2019-01-24 20:03:16	<--	argent0 (~argent0@186.133.236.143) has quit (Ping timeout: 272 seconds)
2019-01-24 20:03:17	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-24 20:03:33	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-24 20:03:53	-->	heebo (~user@217.138.45.238) has joined #haskell
2019-01-24 20:04:01	<--	sakalli` (~user@194.136.96.194) has quit (Ping timeout: 250 seconds)
2019-01-24 20:05:31	-->	sakalli` (~user@194.136.96.194) has joined #haskell
2019-01-24 20:05:39	<--	nowhere_man (~pierre@lneuilly-657-1-22-93.w90-63.abo.wanadoo.fr) has quit (Ping timeout: 244 seconds)
2019-01-24 20:06:37	<--	marco_t (~marco_t@181.231.118.54) has quit (Ping timeout: 250 seconds)
2019-01-24 20:06:54	mniip	dminuoso, showList
2019-01-24 20:07:01	mniip	yeah
2019-01-24 20:07:06	mniip	that's the thing used to show strings
2019-01-24 20:07:34	dminuoso	Ah, I guess this would be useful if I wanted to lift `String` into `f String` for some choice of f.
2019-01-24 20:07:44	dminuoso	Well, the Show instance I mean.
2019-01-24 20:07:52	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-24 20:08:07	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-24 20:08:16	dminuoso	It seems a bit weird that this one special case has an impact on the general interface of Show1. :S
2019-01-24 20:08:53	<--	cinimod` (~user@cpc112685-nmal22-2-0-cust375.19-2.cable.virginm.net) has quit (Ping timeout: 240 seconds)
2019-01-24 20:09:25	gwosix	alright...
2019-01-24 20:09:32	<--	ltchen (~ltchen@host-92-30-204-54.as13285.net) has quit (Remote host closed the connection)
2019-01-24 20:09:33	gwosix	so i've installed cabal
2019-01-24 20:10:01	gwosix	because using gentoo's stack tells me it doesn't like "ncurses6"
2019-01-24 20:11:00	gwosix	wot
2019-01-24 20:11:56	gwosix	can someone help? i and a few others have this problem...
2019-01-24 20:12:09	-->	merijn (~merijn@145.100.116.22) has joined #haskell
2019-01-24 20:12:11	gwosix	"No setup information found for ghc-8.6.3 on your platform."
2019-01-24 20:12:29	<--	ym555 (~ym@156.201.104.27) has quit (Quit: WeeChat 2.3)
2019-01-24 20:12:55	-->	HarveyPwca (~HarveyPwc@99-89-221-139.lightspeed.cicril.sbcglobal.net) has joined #haskell
2019-01-24 20:12:58	__monty__	gwosix: Do you have GHC installed? Maybe cabal can't find stack-installed GHCs by default.
2019-01-24 20:13:04	-->	thevishy (~nishant@111.93.187.34) has joined #haskell
2019-01-24 20:13:06	-->	fendor (~fendor@e252-084.eduroam.tuwien.ac.at) has joined #haskell
2019-01-24 20:13:07	<--	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has quit (Ping timeout: 250 seconds)
2019-01-24 20:13:10	<--	thevishy (~nishant@111.93.187.34) has quit (Max SendQ exceeded)
2019-01-24 20:13:16	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-24 20:13:21	__monty__	You probably just need GHC 8.6.3 on your PATH.
2019-01-24 20:13:32	gwosix	no that's stack's error message
2019-01-24 20:13:33	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-24 20:13:41	-->	thevishy (~nishant@111.93.187.34) has joined #haskell
2019-01-24 20:13:47	gwosix	(and cabal's ebuild just installed stack lol)
2019-01-24 20:14:05	gwosix	stack doesn't seem to install ghc...
2019-01-24 20:14:23	gwosix	__monty__: is it not supposed to?
2019-01-24 20:15:39	__monty__	Cabal doesn't install stack afaik, unless you tell it to.
2019-01-24 20:16:02	__monty__	What I know of stack tells me that, yes, it *is* supposed to install ghc for you.
2019-01-24 20:16:43	gwosix	i wanted to make cabal install stack since the version of stack handed to me by my package manager doesn't "do the thing"
2019-01-24 20:16:53	<--	merijn (~merijn@145.100.116.22) has quit (Ping timeout: 240 seconds)
2019-01-24 20:17:19	gwosix	but i don't think anyone else seems to have this problem apart of my friends that don't know how to fix the problem either
2019-01-24 20:17:48	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-24 20:18:04	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-24 20:18:17	-->	silver (~silver@37.214.84.43) has joined #haskell
2019-01-24 20:20:38	__monty__	gwosix: I'll try stumbling around helping you until someone who actually knows what they're talking about falls in ; )
2019-01-24 20:20:55	-->	marco_t (~marco_t@181.231.118.54) has joined #haskell
2019-01-24 20:22:17	-->	cinimod` (~user@cpc112685-nmal22-2-0-cust375.19-2.cable.virginm.net) has joined #haskell
2019-01-24 20:23:05	<--	fendor (~fendor@e252-084.eduroam.tuwien.ac.at) has quit (Ping timeout: 250 seconds)
2019-01-24 20:23:29	__monty__	gwosix: Hmm, seems like the issue is availability of bindists. Possible solutions are switch to an older stackage LTS or maybe install ncurses5.
2019-01-24 20:24:10	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 245 seconds)
2019-01-24 20:24:30	__monty__	Or install the haskell platform for 8.6.3, that should get you a working ghc and cabal at least and possibly a working stack.
2019-01-24 20:24:41	-->	nan` (~nan`@cpe-75-86-97-30.wi.res.rr.com) has joined #haskell
2019-01-24 20:25:07	-->	burningwitness (~witness@77.47.207.80) has joined #haskell
2019-01-24 20:26:08	-->	aplainzetakind (~dk@2E8BD6FE.catv.pool.telekom.hu) has joined #haskell
2019-01-24 20:26:33	<--	gxt (~gxt@2a02:908:e851:4020:b07a:a391:b883:e129) has quit (Ping timeout: 250 seconds)
2019-01-24 20:26:34	 *	hackage patat 0.8.1.3 - Terminal-based presentations using Pandoc  https://hackage.haskell.org/package/patat-0.8.1.3 (JasperVanDerJeugt)
2019-01-24 20:28:17	-->	lastmanstanding (~arjoonn@111.92.49.135) has joined #haskell
2019-01-24 20:28:39	-->	dddddd (~dddddd@unaffiliated/dddddd) has joined #haskell
2019-01-24 20:33:21	<--	milanj (~milan@87.116.183.26) has quit (Quit: This computer has gone to sleep)
2019-01-24 20:34:44	<--	ystael (~ystael@209.6.50.55) has quit (Ping timeout: 240 seconds)
2019-01-24 20:35:06	<--	mighty_mosquito (~chadhaa@103.19.212.1) has quit (Ping timeout: 246 seconds)
2019-01-24 20:35:46	-->	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has joined #haskell
2019-01-24 20:35:57	<--	thevishy (~nishant@111.93.187.34) has quit (Remote host closed the connection)
2019-01-24 20:36:22	-->	thevishy (~nishant@111.93.187.34) has joined #haskell
2019-01-24 20:36:54	<--	thevishy (~nishant@111.93.187.34) has quit (Remote host closed the connection)
2019-01-24 20:37:23	-->	xkapastel (uid17782@gateway/web/irccloud.com/x-wzpvgkrjjrgmlwlh) has joined #haskell
2019-01-24 20:38:03	<--	Stanley00 (~Stanley00@unaffiliated/stanley00) has quit (Remote host closed the connection)
2019-01-24 20:40:16	<--	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has quit (Ping timeout: 244 seconds)
2019-01-24 20:40:30	-->	ltchen (~ltchen@host-92-30-204-54.as13285.net) has joined #haskell
2019-01-24 20:41:02	-->	hellozee (~hellozee@116.73.35.201) has joined #haskell
2019-01-24 20:41:10	<--	ltchen (~ltchen@host-92-30-204-54.as13285.net) has quit (Remote host closed the connection)
2019-01-24 20:41:23	-->	ltchen (~ltchen@host-92-30-204-54.as13285.net) has joined #haskell
2019-01-24 20:41:28	<--	ltchen (~ltchen@host-92-30-204-54.as13285.net) has quit (Remote host closed the connection)
2019-01-24 20:41:43	-->	ltchen (~ltchen@host-92-30-204-54.as13285.net) has joined #haskell
2019-01-24 20:42:04	-->	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has joined #haskell
2019-01-24 20:42:15	<--	ltchen (~ltchen@host-92-30-204-54.as13285.net) has quit (Remote host closed the connection)
2019-01-24 20:42:29	-->	al-damiri (uid142631@gateway/web/irccloud.com/x-toffsoovmrwldosa) has joined #haskell
2019-01-24 20:45:05	<--	_deepfire (~user@80.92.100.69) has quit (Remote host closed the connection)
2019-01-24 20:46:29	-->	merijn (~merijn@145.100.116.22) has joined #haskell
2019-01-24 20:46:59	<--	tabaqui (~tabaqui@31.44.93.25) has quit (Quit: WeeChat 2.3)
2019-01-24 20:47:20	-->	tabaqui (~tabaqui@31.44.93.25) has joined #haskell
2019-01-24 20:47:35	<--	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has quit (Ping timeout: 272 seconds)
2019-01-24 20:48:12	-->	Stanley00 (~Stanley00@unaffiliated/stanley00) has joined #haskell
2019-01-24 20:48:16	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-24 20:48:23	<--	zero_byte (zer0@nat/redhat/x-mdirtkcxrmgkdycm) has quit (Ping timeout: 240 seconds)
2019-01-24 20:48:30	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-24 20:50:58	-->	supercoven_ (~quassel@37-219-178-249.nat.bb.dnainternet.fi) has joined #haskell
2019-01-24 20:51:20	<--	tabaqui (~tabaqui@31.44.93.25) has quit (Client Quit)
2019-01-24 20:52:23	gwosix	__monty__ could you help me with that?
2019-01-24 20:52:36	gwosix	installing 8.6.3 and so on?
2019-01-24 20:52:53	<--	rprije (~rprije@ppp118-209-196-17.bras2.mel11.internode.on.net) has quit (Ping timeout: 240 seconds)
2019-01-24 20:53:28	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-24 20:54:14	maerwald	gwosix: use ghcup if you are on linux
2019-01-24 20:54:37	<--	supercoven (~quassel@dsl-hkibng42-5673cf-252.dhcp.inet.fi) has quit (Ping timeout: 264 seconds)
2019-01-24 20:54:39	maerwald	https://github.com/haskell/ghcup#installation
2019-01-24 20:54:43	__monty__	Does that install the platform? I thought it was limited to the compiler.
2019-01-24 20:54:54	maerwald	__monty__: what do you mean with platform?
2019-01-24 20:55:04	__monty__	The haskell platform.
2019-01-24 20:55:10	maerwald	yes, what do you mean
2019-01-24 20:55:22	__monty__	We want to get a working stack setup, not just a ghc installed.
2019-01-24 20:55:32	maerwald	haskell-platform already recommends ghcup
2019-01-24 20:55:37	__monty__	https://www.haskell.org/platform/
2019-01-24 20:55:43	maerwald	platform is just ghc, cabal and stack (possibly)
2019-01-24 20:55:48	maerwald	ghcup installs ghc and cabal
2019-01-24 20:55:49	<--	supercoven_ (~quassel@37-219-178-249.nat.bb.dnainternet.fi) has quit (Ping timeout: 264 seconds)
2019-01-24 20:55:58	-->	WhatisRT (~user@ip5b414628.dynamic.kabel-deutschland.de) has joined #haskell
2019-01-24 20:56:04	maerwald	__monty__: check https://www.haskell.org/platform/#linux-generic
2019-01-24 20:56:14	__monty__	gwosix: Debian should have it packaged as haskell-platform.
2019-01-24 20:56:55	-->	zero_byte (zer0@nat/redhat/x-fiiemvpbbokmcpju) has joined #haskell
2019-01-24 20:57:09	maerwald	stack has its own installer anyway
2019-01-24 20:57:26	__monty__	maerwald: I'm afraid ghcup might run into the same issue as stack though. Seems like ncurses6 isn't well supported yet.
2019-01-24 20:57:30	gwosix	is there stuff like rust's $RUSTUP_HOME?
2019-01-24 20:57:36	-->	supercoven (~quassel@dsl-hkibng42-5673cf-252.dhcp.inet.fi) has joined #haskell
2019-01-24 20:57:44	<--	nan` (~nan`@cpe-75-86-97-30.wi.res.rr.com) has quit (Ping timeout: 240 seconds)
2019-01-24 20:57:49	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-24 20:57:59	maerwald	__monty__: we install debian tarballs for debian
2019-01-24 20:58:03	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-24 20:58:27	__monty__	maerwald: Problem isn't getting stack installed. Problem is stack can't find a bindist for their platform. Seemingly because of ncurses6.
2019-01-24 20:58:54	<--	heebo (~user@217.138.45.238) has quit (Remote host closed the connection)
2019-01-24 20:59:07	__monty__	So I figured, install haskell-platform then use stack's "system ghc" support.
2019-01-24 20:59:09	-->	jeltsch (~wolfgang@9b0c-573f-2dc9-c937-3e80-82b2-07d0-2001.dyn.estpak.ee) has joined #haskell
2019-01-24 20:59:10	maerwald	gwosix: you're on gentoo?
2019-01-24 20:59:23	gwosix	you can't even get ncurses 5.8 with the normal gentoo depos
2019-01-24 20:59:30	gwosix	yeah gentoo
2019-01-24 20:59:32	gwosix	uwu
2019-01-24 20:59:42	maerwald	gwosix: I'm on exherbo, I believe ghcup should work on gentoo as well
2019-01-24 20:59:50	maerwald	it will install fedora bindist
2019-01-24 20:59:54	gwosix	alright
2019-01-24 21:00:18	gwosix	maerwald: how do specify install location?
2019-01-24 21:00:23	gwosix	is there a global var?
2019-01-24 21:00:36	maerwald	gwosix: it installs into ~/.ghcup
2019-01-24 21:00:41	__monty__	Oh, woops, not sure why I was thinking debian.
2019-01-24 21:00:51	gwosix	maerwald i don't like it to
2019-01-24 21:00:59	maerwald	gwosix: yes there is a var
2019-01-24 21:01:00	-->	supercoven_ (~quassel@dsl-hkibng42-5673cf-252.dhcp.inet.fi) has joined #haskell
2019-01-24 21:01:17	maerwald	GHCUP_INSTALL_BASE_PREFIX which defaults to $HOME
2019-01-24 21:01:26	maerwald	so it will install into GHCUP_INSTALL_BASE_PREFIX/.ghcup
2019-01-24 21:01:41	maerwald	you should set that var in your bashrc
2019-01-24 21:01:48	-->	tabaqui (~tabaqui@31.44.93.25) has joined #haskell
2019-01-24 21:01:51	gwosix	yeah
2019-01-24 21:01:54	gwosix	oh shit
2019-01-24 21:02:04	gwosix	i'm going to have to do that tomorrow
2019-01-24 21:02:09	gwosix	i'm off, thanks
2019-01-24 21:02:12	<--	davr0s (~textual@host109-155-92-146.range109-155.btcentralplus.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2019-01-24 21:02:25	<--	supercoven (~quassel@dsl-hkibng42-5673cf-252.dhcp.inet.fi) has quit (Ping timeout: 264 seconds)
2019-01-24 21:02:43	<--	sQVe (~sQVe@unaffiliated/sqve) has quit (Quit: Bye!)
2019-01-24 21:02:58	-->	sQVe (~sQVe@unaffiliated/sqve) has joined #haskell
2019-01-24 21:03:00	-->	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has joined #haskell
2019-01-24 21:04:18	-->	initiumdoeslinux (~initiumdo@31-208-64-89.cust.bredband2.com) has joined #haskell
2019-01-24 21:04:33	<--	sakalli` (~user@194.136.96.194) has quit (Ping timeout: 244 seconds)
2019-01-24 21:05:35	-->	milanj (~milan@cable-89-216-113-198.static.sbb.rs) has joined #haskell
2019-01-24 21:07:11	<--	nuxdie (uid343142@gateway/web/irccloud.com/x-uqsdlstjcrzboxte) has quit (Quit: Connection closed for inactivity)
2019-01-24 21:07:17	<--	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has quit (Ping timeout: 250 seconds)
2019-01-24 21:09:10	<--	olligobber (olligobber@gateway/vpn/privateinternetaccess/olligobber) has quit (Ping timeout: 246 seconds)
2019-01-24 21:09:58	gentauro	maerwald: exherbo? Wasn't that the distro who came out of gentoo and which stated on the website. If you want to use this distro "don't" :o
2019-01-24 21:10:02	gentauro	is it any good?
2019-01-24 21:10:25	<--	initiumdoeslinux (~initiumdo@31-208-64-89.cust.bredband2.com) has quit (Ping timeout: 245 seconds)
2019-01-24 21:11:39	-->	gxt (~gxt@b2b-78-94-156-186.unitymedia.biz) has joined #haskell
2019-01-24 21:12:56	maerwald	gentauro: there is common history with gentoo (the PM started as a gentoo PM), but it's not a gentoo derivate and uses none of its packages
2019-01-24 21:13:05	maerwald	and yes, don't use it
2019-01-24 21:14:07	mniip	avoid success at all costs
2019-01-24 21:16:02	-->	kitl_ (~kitlangto@198-27-223-170.fiber.dynamic.sonic.net) has joined #haskell
2019-01-24 21:16:09	dminuoso	mniip: Is there a point to Show1/Read1/Eq1/etc.. beyond avoiding UndecidableInstances?
2019-01-24 21:16:55	mniip	how does that avoid UndecidableInstances
2019-01-24 21:17:11	dminuoso	Perhaps Im too focused on my original problem back then.
2019-01-24 21:17:27	<--	zero_byte (zer0@nat/redhat/x-fiiemvpbbokmcpju) has quit (Ping timeout: 246 seconds)
2019-01-24 21:17:28	mniip	I mean originally Show1 le you express something you could not express in haskell at all
2019-01-24 21:18:13	-->	atbd (~atbd@lmontsouris-659-1-30-246.w81-250.abo.wanadoo.fr) has joined #haskell
2019-01-24 21:18:45	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 245 seconds)
2019-01-24 21:19:00	-->	ltchen (~ltchen@host-92-30-204-54.as13285.net) has joined #haskell
2019-01-24 21:19:33	-->	cfsloth (~cfsloth3@89-181-200-17.net.novis.pt) has joined #haskell
2019-01-24 21:22:52	-->	jdwidari (~textual@2001:420:2281:1270:4dfb:3e1:f960:398f) has joined #haskell
2019-01-24 21:23:19	<--	ltchen (~ltchen@host-92-30-204-54.as13285.net) has quit (Ping timeout: 250 seconds)
2019-01-24 21:23:37	<--	jdwidari (~textual@2001:420:2281:1270:4dfb:3e1:f960:398f) has quit (Client Quit)
2019-01-24 21:24:15	<--	sonofentropy (~k@84-10-10-170.static.chello.pl) has quit (Quit: sonofentropy)
2019-01-24 21:24:32	-->	Janat08_ (c2586911@gateway/web/freenode/ip.194.88.105.17) has joined #haskell
2019-01-24 21:24:39	-->	sonofentropy (~k@84-10-10-170.static.chello.pl) has joined #haskell
2019-01-24 21:24:57	Janat08_	numbers = 0:map (1+) numbers. How does this get to 3
2019-01-24 21:25:02	<--	sonofentropy (~k@84-10-10-170.static.chello.pl) has quit (Client Quit)
2019-01-24 21:25:16	Janat08_	*2
2019-01-24 21:25:26	-->	sonofentropy (~k@84-10-10-170.static.chello.pl) has joined #haskell
2019-01-24 21:25:44	<--	yyy (~yyy@unaffiliated/tinnotl) has quit (Ping timeout: 240 seconds)
2019-01-24 21:25:50	<--	sonofentropy (~k@84-10-10-170.static.chello.pl) has quit (Client Quit)
2019-01-24 21:26:50	-->	Snircle (~textual@ip174-68-86-201.sd.sd.cox.net) has joined #haskell
2019-01-24 21:27:55	dmwit	numbers = 0:map (1+) numbers = 0:map (1+) (0:map (1+) numbers) = 0:1:map (1+) (map (1+) numbers) = 0:1:map (1+) (map (1+) (0:map (1+) numbers)) = 0:1:2:map (1+) (map (1+) (map (1+) numbers))
2019-01-24 21:28:16	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-24 21:28:30	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-24 21:28:40	dmwit	The steps, in order: expand definition of numbers; expand definition of numbers; expand definition of map; expand definition of numbers; expand definition of map
2019-01-24 21:29:06	-->	aldum_ (~vishera@aldum.pw) has joined #haskell
2019-01-24 21:29:25	<--	aldum_ (~vishera@aldum.pw) has quit (Client Quit)
2019-01-24 21:29:34	-->	aldum (~vishera@aldum.pw) has joined #haskell
2019-01-24 21:30:17	-->	nan` (~nan`@cpe-75-86-97-30.wi.res.rr.com) has joined #haskell
2019-01-24 21:33:45	<--	Gurkenglas (~Gurkengla@unaffiliated/gurkenglas) has quit (Ping timeout: 245 seconds)
2019-01-24 21:34:21	-->	Lycurgus (~niemand@cpe-45-46-138-162.buffalo.res.rr.com) has joined #haskell
2019-01-24 21:34:24	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-24 21:37:52	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-24 21:38:10	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-24 21:40:15	-->	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has joined #haskell
2019-01-24 21:41:41	-->	dsh (~daishi@207.244.108.244.adsl.inet-telecom.org) has joined #haskell
2019-01-24 21:42:35	-->	samurdha_ (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has joined #haskell
2019-01-24 21:42:59	<--	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has quit (Read error: Connection reset by peer)
2019-01-24 21:43:38	<--	Janat08_ (c2586911@gateway/web/freenode/ip.194.88.105.17) has quit (Ping timeout: 256 seconds)
2019-01-24 21:43:52	-->	obihann (~obihann@156.57.171.145) has joined #haskell
2019-01-24 21:43:59	<--	samurdha_ (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has quit (Remote host closed the connection)
2019-01-24 21:44:06	-->	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has joined #haskell
2019-01-24 21:44:35	 *	hackage blas-comfort-array 0.0.0.1 - Auto-generated interface to Fortran BLAS via comfort-array  https://hackage.haskell.org/package/blas-comfort-array-0.0.0.1 (HenningThielemann)
2019-01-24 21:45:34	 *	hackage blas-carray 0.1.0.1 - Auto-generated interface to Fortran BLAS via CArrays  https://hackage.haskell.org/package/blas-carray-0.1.0.1 (HenningThielemann)
2019-01-24 21:47:22	<--	jhrcek (jhrcek@nat/redhat/x-qnrwfnziehijtppq) has quit (Remote host closed the connection)
2019-01-24 21:49:02	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 272 seconds)
2019-01-24 21:49:24	<--	kitl_ (~kitlangto@198-27-223-170.fiber.dynamic.sonic.net) has quit (Ping timeout: 240 seconds)
2019-01-24 21:50:11	-->	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined #haskell
2019-01-24 21:50:11	<--	anohigisavay (~kj@58.246.208.2) has quit (Ping timeout: 250 seconds)
2019-01-24 21:50:18	-->	basic (~basic@b2b-37-24-1-41.unitymedia.biz) has joined #haskell
2019-01-24 21:50:49	-->	anohigisavay (~kj@58.246.208.2) has joined #haskell
2019-01-24 21:52:53	<--	p0lyph3m (~p0lyph3m@2a02:810d:640:776c:76d7:55f6:f85b:c889) has quit (Read error: Connection reset by peer)
2019-01-24 21:53:17	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-24 21:53:28	-->	juhp (juhp@redhat/juhp) has joined #haskell
2019-01-24 21:53:33	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-24 21:54:51	-->	ltchen (~ltchen@host-92-30-204-54.as13285.net) has joined #haskell
2019-01-24 21:55:10	-->	emacstheviking (51bb952a@gateway/web/freenode/ip.81.187.149.42) has joined #haskell
2019-01-24 21:55:44	emacstheviking	How does one avoid getting "Couldn't match type ‘Integer’ with ‘CInt’" all over the place when using SDL2? I have been trying to use "instance where" to and from Integers but getting nowhere. I cant' even believe this is a problem! I've looked at various source files but I am mystified. It feels like it should be easy to solve. I am using Float internally for drawing and want to use CInt at render time! HELP!!
2019-01-24 21:56:27	<--	karq20_ (~karq20@125.19.48.58) has quit (Remote host closed the connection)
2019-01-24 21:57:03	lyxia	where do you get the Integers from
2019-01-24 21:57:14	<--	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has quit (Remote host closed the connection)
2019-01-24 21:57:37	-->	lambdaman (~lambdaman@msp-vpn.calabrio.com) has joined #haskell
2019-01-24 21:57:47	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-24 21:57:48	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-24 21:57:48	-->	machined1od (~machinedg@198-48-220-190.cpe.pppoe.ca) has joined #haskell
2019-01-24 21:58:02	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-24 21:58:10	-->	keepLear_ (~keepLearn@49.207.55.57) has joined #haskell
2019-01-24 21:58:32	<--	cfsloth (~cfsloth3@89-181-200-17.net.novis.pt) has quit (Quit: Leaving)
2019-01-24 21:58:34	 *	hackage hmm-lapack 0.3.0.2 - Hidden Markov Models using LAPACK primitives  https://hackage.haskell.org/package/hmm-lapack-0.3.0.2 (HenningThielemann)
2019-01-24 21:58:52	emacstheviking	lyxia: my code!! I have two local Int vars for width and height, I have them saved in my app-state as Int but the SDL createWindow wants V2 CInt...this is going to be a problem all over the place!
2019-01-24 21:59:06	<--	ltchen (~ltchen@host-92-30-204-54.as13285.net) has quit (Ping timeout: 246 seconds)
2019-01-24 21:59:34	<--	lambdaman (~lambdaman@msp-vpn.calabrio.com) has quit (Read error: Connection reset by peer)
2019-01-24 21:59:39	Ariakenom	% (fromIntegral (1 :: Integer) :: Foreign.C.Types.CInt)
2019-01-24 21:59:39	yahb	Ariakenom: 1
2019-01-24 22:00:09	<--	keepLearning512 (~keepLearn@106.51.72.155) has quit (Ping timeout: 250 seconds)
2019-01-24 22:00:23	-->	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has joined #haskell
2019-01-24 22:00:41	-->	initiumdoeslinux (~initiumdo@31-208-64-89.cust.bredband2.com) has joined #haskell
2019-01-24 22:00:51	-->	trcc_ (~trcc@users-eduroam8.net.au.dk) has joined #haskell
2019-01-24 22:00:56	<--	jneira (d451dc2d@gateway/web/freenode/ip.212.81.220.45) has quit (Quit: Page closed)
2019-01-24 22:00:58	emacstheviking	So I have to do that *every* time I want to convert from Int to CInt...I already have a utility function for converting V2 Float to V2 CInt but the code is getting messy.
2019-01-24 22:01:26	emacstheviking	{-# INLINABLE v2CInt #-} v2CInt :: V2 Float -> V2 CInt v2CInt = fmap round
2019-01-24 22:01:47	Ariakenom	% :t fromIntegral :: Int -> Foreign.C.Types.CInt
2019-01-24 22:01:48	yahb	Ariakenom: Int -> Foreign.C.Types.CInt
2019-01-24 22:02:05	-->	oish_ (~charlie@109.144.222.225) has joined #haskell
2019-01-24 22:03:06	emacstheviking	windowInitialSize = V2 (fromIntegral wWidth) (fromIntegral wHeight)
2019-01-24 22:03:17	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-24 22:03:23	<--	nan` (~nan`@cpe-75-86-97-30.wi.res.rr.com) has quit (Ping timeout: 240 seconds)
2019-01-24 22:03:25	Ariakenom	% :t round :: Double -> Foreign.C.Types.CInt
2019-01-24 22:03:25	yahb	Ariakenom: Double -> Foreign.C.Types.CInt
2019-01-24 22:03:33	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-24 22:03:45	<--	trcc (~trcc@users-5343.st.net.au.dk) has quit (Ping timeout: 245 seconds)
2019-01-24 22:03:48	-->	lambdaman (~lambdaman@con08-vpn.calabrio.com) has joined #haskell
2019-01-24 22:03:48	<--	lambdaman (~lambdaman@con08-vpn.calabrio.com) has quit (Remote host closed the connection)
2019-01-24 22:03:57	-->	lambdaman (~lambdaman@74.203.208.2) has joined #haskell
2019-01-24 22:04:06	Ariakenom	emacstheviking: looks like you only need to change the type signature of your app-state. but you should probably gist some code.
2019-01-24 22:04:16	Ariakenom	you sound a bit confused :)
2019-01-24 22:04:58	emacstheviking	I wanted to keep my AppState as "Int" as that's what they are...CInt to me is just an implementation detail of SDL2...if I used something else later then I'd only have the code to change where it makes graphics API calls.
2019-01-24 22:05:05	emacstheviking	I *AM* confused! LOL
2019-01-24 22:05:45	<--	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has quit (Remote host closed the connection)
2019-01-24 22:05:52	<--	trcc_ (~trcc@users-eduroam8.net.au.dk) has quit (Ping timeout: 268 seconds)
2019-01-24 22:06:03	merijn	emacstheviking: You can't use CInt and Int interchangeably, if you plan to interact with SDL and need CInt all the time, I would recommend using CInt everywhere in your code too
2019-01-24 22:06:15	<--	binq (~binq@99.156.186.141) has quit (Ping timeout: 245 seconds)
2019-01-24 22:06:24	-->	nyc (~nyc@unaffiliated/wli) has joined #haskell
2019-01-24 22:06:30	emacstheviking	I was beginning to come to that conclusion. But then it feels like I am being to used a foreign type in pure code just because.
2019-01-24 22:07:33	merijn	emacstheviking: 1) I'm not sure why the "pure code" part matters? What other code would you use it in. And 2) how else would you resolve the distinction between C's int and GHC's Int?
2019-01-24 22:07:35	emacstheviking	I was hoping to model my game state independently of the hardware API if you get me....but seems like it might not be worth the effort
2019-01-24 22:07:48	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-24 22:08:04	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-24 22:08:28	emacstheviking	OK...well it *is* intended to be a game written in SDL2 so I guess using CInt is the way to stop faffinf about and make progress.
2019-01-24 22:08:31	emacstheviking	Thanks.
2019-01-24 22:09:26	-->	nbloomf (~nbloomf@2600:1700:83e0:1f40:6d74:a91e:18fc:6759) has joined #haskell
2019-01-24 22:09:27	<--	emacstheviking (51bb952a@gateway/web/freenode/ip.81.187.149.42) has left #haskell
2019-01-24 22:09:55	-->	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has joined #haskell
2019-01-24 22:13:16	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 268 seconds)
2019-01-24 22:13:18	<--	carlomagno (~carlomagn@inet-hqmc03-o.oracle.com) has quit (Remote host closed the connection)
2019-01-24 22:14:17	-->	antsmartian (~antsmarti@171.76.35.18) has joined #haskell
2019-01-24 22:17:41	<--	JonReed (59ebdcb7@gateway/web/cgi-irc/kiwiirc.com/ip.89.235.220.183) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2019-01-24 22:21:08	<--	marco_t (~marco_t@181.231.118.54) has quit (Remote host closed the connection)
2019-01-24 22:22:41	-->	marco_t (~marco_t@181.231.118.54) has joined #haskell
2019-01-24 22:22:56	-->	sonofentropy (~k@84-10-10-170.static.chello.pl) has joined #haskell
2019-01-24 22:23:04	-->	ystael (~ystael@50-199-243-61-static.hfc.comcastbusiness.net) has joined #haskell
2019-01-24 22:23:40	-->	sakalli` (~user@194.157.15.65) has joined #haskell
2019-01-24 22:25:00	<--	alowaniak (3e838696@gateway/web/freenode/ip.62.131.134.150) has quit (Ping timeout: 256 seconds)
2019-01-24 22:26:11	-->	Sk01 (~sky3@d131.wls.metu.edu.tr) has joined #haskell
2019-01-24 22:26:34	-->	zero_byte (zer0@nat/redhat/x-goxzklhousqbugye) has joined #haskell
2019-01-24 22:26:47	<--	Lowl3v3l (~Lowl3v3l@ulbp2362.ulb.uni-jena.de) has quit (Remote host closed the connection)
2019-01-24 22:27:36	<--	quaestor (~quaestor@faui8269.informatik.uni-erlangen.de) has quit (Ping timeout: 252 seconds)
2019-01-24 22:27:53	-->	karq20_ (~karq20@125.19.48.58) has joined #haskell
2019-01-24 22:27:57	-->	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has joined #haskell
2019-01-24 22:27:59	-->	carlomagno (~carlomagn@inet-hqmc01-o.oracle.com) has joined #haskell
2019-01-24 22:28:01	-->	quaestor (~quaestor@faui8269.informatik.uni-erlangen.de) has joined #haskell
2019-01-24 22:28:28	-->	o1lo01ol1o (~o1lo01ol1@cpe-74-72-45-166.nyc.res.rr.com) has joined #haskell
2019-01-24 22:29:20	<--	karq20_ (~karq20@125.19.48.58) has quit (Remote host closed the connection)
2019-01-24 22:29:28	-->	sakalli`` (~user@mobile-access-bcee7c-205.dhcp.inet.fi) has joined #haskell
2019-01-24 22:29:37	-->	karq20 (~karq20@125.19.48.58) has joined #haskell
2019-01-24 22:30:50	<--	sakalli` (~user@194.157.15.65) has quit (Ping timeout: 245 seconds)
2019-01-24 22:31:05	 *	hackage potoki-core 2.3.4.1 - Low-level components of "potoki"  https://hackage.haskell.org/package/potoki-core-2.3.4.1 (OShev)
2019-01-24 22:31:21	<--	oish_ (~charlie@109.144.222.225) has quit (Ping timeout: 244 seconds)
2019-01-24 22:32:30	<--	o1lo01ol1o (~o1lo01ol1@cpe-74-72-45-166.nyc.res.rr.com) has quit (Ping timeout: 245 seconds)
2019-01-24 22:32:43	<--	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has quit (Ping timeout: 272 seconds)
2019-01-24 22:33:29	-->	amar (~amar@217.138.122.53) has joined #haskell
2019-01-24 22:33:52	--	amar is now known as Guest36375
2019-01-24 22:35:38	-->	argent0 (~argent0@186.133.236.143) has joined #haskell
2019-01-24 22:36:03	-->	nan` (~nan`@cpe-75-86-97-30.wi.res.rr.com) has joined #haskell
2019-01-24 22:37:18	-->	oish_ (~charlie@109.144.215.52) has joined #haskell
2019-01-24 22:37:31	<--	TipsyMe (~TipsyMe@50-50-239-253.waus.wi.frontiernet.net) has quit (Quit: TipsyMe)
2019-01-24 22:38:26	<--	Guest36375 (~amar@217.138.122.53) has quit (Ping timeout: 272 seconds)
2019-01-24 22:38:39	<--	dddddd (~dddddd@unaffiliated/dddddd) has quit (Ping timeout: 246 seconds)
2019-01-24 22:38:56	<--	HarveyPwca (~HarveyPwc@99-89-221-139.lightspeed.cicril.sbcglobal.net) has quit (Quit: Leaving)
2019-01-24 22:42:02	-->	dddddd (~dddddd@unaffiliated/dddddd) has joined #haskell
2019-01-24 22:42:04	 *	hackage potoki 2.1.4.1 - Simple streaming in IO  https://hackage.haskell.org/package/potoki-2.1.4.1 (OShev)
2019-01-24 22:43:08	-->	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has joined #haskell
2019-01-24 22:45:43	-->	JimmyRcom (~JimmyRcom@71-11-240-211.dhcp.dntn.tx.charter.com) has joined #haskell
2019-01-24 22:46:57	<--	dsh (~daishi@207.244.108.244.adsl.inet-telecom.org) has quit (Quit: Leaving)
2019-01-24 22:47:06	<--	janat08 (5f2eec7b@gateway/web/freenode/ip.95.46.236.123) has quit (Ping timeout: 256 seconds)
2019-01-24 22:47:23	<--	sakalli`` (~user@mobile-access-bcee7c-205.dhcp.inet.fi) has quit (Read error: No route to host)
2019-01-24 22:47:34	-->	dsh (~daishi@64.237.40.140) has joined #haskell
2019-01-24 22:47:58	<--	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has quit (Excess Flood)
2019-01-24 22:48:28	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-24 22:48:33	<--	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has quit (Ping timeout: 272 seconds)
2019-01-24 22:49:12	<--	karq20 (~karq20@125.19.48.58) has quit (Remote host closed the connection)
2019-01-24 22:49:16	-->	SpinTensor (~SpinTenso@200116b8049f3100040c391a28a116d2.dip.versatel-1u1.de) has joined #haskell
2019-01-24 22:49:21	-->	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has joined #haskell
2019-01-24 22:52:25	<--	Lycurgus (~niemand@cpe-45-46-138-162.buffalo.res.rr.com) has quit (Quit: Exeunt)
2019-01-24 22:52:44	<--	cinimod` (~user@cpc112685-nmal22-2-0-cust375.19-2.cable.virginm.net) has quit (Ping timeout: 268 seconds)
2019-01-24 22:52:55	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 245 seconds)
2019-01-24 22:53:35	<--	jhaj (~jhaj@193.108.177.207.dyn.southslope.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-24 22:53:58	<--	argent0 (~argent0@186.133.236.143) has quit (Ping timeout: 268 seconds)
2019-01-24 22:54:01	-->	yyy (~yyy@unaffiliated/tinnotl) has joined #haskell
2019-01-24 22:54:03	<--	jao (~jao@pdpc/supporter/professional/jao) has quit (Remote host closed the connection)
2019-01-24 22:54:47	<--	sQVe (~sQVe@unaffiliated/sqve) has quit (Quit: Bye!)
2019-01-24 22:55:17	-->	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has joined #haskell
2019-01-24 22:56:19	<--	__monty__ (~toonn@unaffiliated/toonn) has quit (Quit: Lost terminal)
2019-01-24 22:56:39	-->	jamm (~jamm@unaffiliated/jamm) has joined #haskell
2019-01-24 22:57:28	<--	burningwitness (~witness@77.47.207.80) has quit (Quit: WeeChat 2.3)
2019-01-24 22:57:59	-->	FreeBirdLjj (~freebirdl@114.91.21.224) has joined #haskell
2019-01-24 22:59:01	-->	dpyro (~dpyro@66-169-160-49.dhcp.ftwo.tx.charter.com) has joined #haskell
2019-01-24 22:59:29	-->	dale_ (~dale@unaffiliated/dale) has joined #haskell
2019-01-24 22:59:48	--	dale_ is now known as dale
2019-01-24 23:00:56	<--	marco_t (~marco_t@181.231.118.54) has quit (Remote host closed the connection)
2019-01-24 23:03:53	<--	initiumdoeslinux (~initiumdo@31-208-64-89.cust.bredband2.com) has quit (Ping timeout: 240 seconds)
2019-01-24 23:04:45	-->	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has joined #haskell
2019-01-24 23:04:49	<--	zhamar (c2267483@gateway/web/freenode/ip.194.38.116.131) has quit (Quit: Page closed)
2019-01-24 23:05:25	<--	WhatisRT (~user@ip5b414628.dynamic.kabel-deutschland.de) has quit (Ping timeout: 245 seconds)
2019-01-24 23:08:16	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-24 23:08:30	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-24 23:09:55	<--	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has quit (Ping timeout: 250 seconds)
2019-01-24 23:10:05	<--	nan` (~nan`@cpe-75-86-97-30.wi.res.rr.com) has quit (Ping timeout: 272 seconds)
2019-01-24 23:10:15	-->	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has joined #haskell
2019-01-24 23:10:25	<--	nullremains (~nullremai@182.232.30.3) has quit (Ping timeout: 245 seconds)
2019-01-24 23:11:32	-->	wroathe (~wroathe@23-30-253-203-static.hfc.comcastbusiness.net) has joined #haskell
2019-01-24 23:11:51	-->	kapil____ (uid36151@gateway/web/irccloud.com/x-msfeiqbfhlkiqbvm) has joined #haskell
2019-01-24 23:11:55	-->	funrep__ (~funrep@46.246.1.216) has joined #haskell
2019-01-24 23:12:53	<--	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has quit (Ping timeout: 240 seconds)
2019-01-24 23:13:05	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-24 23:13:22	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-24 23:13:25	<--	jamm (~jamm@unaffiliated/jamm) has quit (Remote host closed the connection)
2019-01-24 23:13:38	<--	errst (~errst@5.24.215.113) has quit (Read error: Connection reset by peer)
2019-01-24 23:14:23	<--	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has quit (Ping timeout: 240 seconds)
2019-01-24 23:14:53	-->	condy (~condy@unaffiliated/condy) has joined #haskell
2019-01-24 23:16:40	-->	jamm (~jamm@unaffiliated/jamm) has joined #haskell
2019-01-24 23:16:55	-->	jhaj (~jhaj@193.108.177.207.dyn.southslope.net) has joined #haskell
2019-01-24 23:19:15	-->	o1lo01ol1o (~o1lo01ol1@207.251.80.226) has joined #haskell
2019-01-24 23:19:24	<--	iqubic (~user@98.232.18.124) has quit (Ping timeout: 240 seconds)
2019-01-24 23:19:42	-->	dbmikus (~dbmikus@rrcs-50-74-152-162.nyc.biz.rr.com) has joined #haskell
2019-01-24 23:20:53	<--	jamm (~jamm@unaffiliated/jamm) has quit (Ping timeout: 240 seconds)
2019-01-24 23:21:07	<--	gxt (~gxt@b2b-78-94-156-186.unitymedia.biz) has quit (Ping timeout: 246 seconds)
2019-01-24 23:21:15	-->	binq (~binq@99.156.186.141) has joined #haskell
2019-01-24 23:22:24	-->	crobbins (~crobbins@2601:2c7:780:416e:54cb:a129:542a:e1b) has joined #haskell
2019-01-24 23:22:35	-->	gxt (~gxt@b2b-78-94-156-186.unitymedia.biz) has joined #haskell
2019-01-24 23:23:32	-->	binq_ (~binq@99.156.186.141) has joined #haskell
2019-01-24 23:25:55	<--	binq (~binq@99.156.186.141) has quit (Ping timeout: 272 seconds)
2019-01-24 23:27:36	-->	amar (~amar@217.138.122.53) has joined #haskell
2019-01-24 23:27:53	<--	oish_ (~charlie@109.144.215.52) has quit (Ping timeout: 268 seconds)
2019-01-24 23:28:01	--	amar is now known as Guest92550
2019-01-24 23:28:42	-->	concaveirc (~user@208.91.55.168) has joined #haskell
2019-01-24 23:30:16	<--	ogradyda (~ogradyda@monad.informatik.uni-tuebingen.de) has quit
2019-01-24 23:30:33	-->	michaelsdunn1 (~michaelsd@unaffiliated/michaelsdunn1) has joined #haskell
2019-01-24 23:31:06	-->	michaels_ (~michaelsd@38.126.31.226) has joined #haskell
2019-01-24 23:31:48	<--	milanj (~milan@cable-89-216-113-198.static.sbb.rs) has quit (Quit: This computer has gone to sleep)
2019-01-24 23:32:12	<--	Guest92550 (~amar@217.138.122.53) has quit (Ping timeout: 268 seconds)
2019-01-24 23:32:38	-->	marco_t (~marco_t@181.231.118.54) has joined #haskell
2019-01-24 23:33:02	<--	obihann (~obihann@156.57.171.145) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-24 23:33:11	-->	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has joined #haskell
2019-01-24 23:33:12	wroathe	:t when
2019-01-24 23:33:14	lambdabot	Applicative f => Bool -> f () -> f ()
2019-01-24 23:33:33	wroathe	Is there a version of when that's f a -> f a
2019-01-24 23:33:39	<--	keepLear_ (~keepLearn@49.207.55.57) has quit (Remote host closed the connection)
2019-01-24 23:34:03	Ariakenom	wroathe: that wouldn't work for when False
2019-01-24 23:34:10	lyxia	:t guard
2019-01-24 23:34:12	lambdabot	Alternative f => Bool -> f ()
2019-01-24 23:34:34	-->	infandum (~user@24.102.139.254.res-cmts.sm.ptd.net) has joined #haskell
2019-01-24 23:34:44	<--	michaelsdunn1 (~michaelsd@unaffiliated/michaelsdunn1) has quit (Ping timeout: 240 seconds)
2019-01-24 23:34:52	lyxia	so close
2019-01-24 23:35:16	Ariakenom	@src when
2019-01-24 23:35:16	lambdabot	when p s = if p then s else return ()
2019-01-24 23:35:41	wroathe	Got it, so if statement it is then
2019-01-24 23:35:52	wroathe	if expression*
2019-01-24 23:35:56	-->	mizu_no_oto (~textual@2604:6000:1012:6096:30a2:244f:9524:c682) has joined #haskell
2019-01-24 23:36:04	<--	oisdk (~textual@86-45-6-241-dynamic.agg2.dyx.chf-qkr.eircom.net) has quit (Read error: Connection reset by peer)
2019-01-24 23:36:33	infandum	Is there an hmatrix function to map with indices? Like map (\i j v -> f i j v) mat
2019-01-24 23:36:43	-->	oisdk (~textual@2001:bb6:331c:dc58:ecc0:5cff:7839:1d02) has joined #haskell
2019-01-24 23:37:09	<--	jhaj (~jhaj@193.108.177.207.dyn.southslope.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-24 23:37:39	<--	marco_t (~marco_t@181.231.118.54) has quit (Ping timeout: 250 seconds)
2019-01-24 23:37:51	-->	gobby (bed508ca@gateway/web/freenode/ip.190.213.8.202) has joined #haskell
2019-01-24 23:38:41	-->	jhaj (~jhaj@193.108.177.207.dyn.southslope.net) has joined #haskell
2019-01-24 23:38:51	gobby	I wrapped the `tripping` function from the Hedgehog library with a function that just takes the value to be tested. When the roundtrip test fails I no longer get the nice diffing on my terminal.
2019-01-24 23:39:23	<--	Sk01 (~sky3@d131.wls.metu.edu.tr) has quit (Ping timeout: 240 seconds)
2019-01-24 23:40:16	-->	keepLearning512 (~keepLearn@106.51.72.155) has joined #haskell
2019-01-24 23:41:55	-->	darithorn (~darithorn@75.174.238.174) has joined #haskell
2019-01-24 23:42:01	<--	antsmartian (~antsmarti@171.76.35.18) has quit (Remote host closed the connection)
2019-01-24 23:42:04	 *	hackage patat 0.8.2.0 - Terminal-based presentations using Pandoc  https://hackage.haskell.org/package/patat-0.8.2.0 (JasperVanDerJeugt)
2019-01-24 23:42:10	-->	nan` (~nan`@cpe-75-86-97-30.wi.res.rr.com) has joined #haskell
2019-01-24 23:43:46	<--	alx741 (~alx741@186.178.110.40) has quit (Quit: alx741)
2019-01-24 23:46:10	<--	concaveirc (~user@208.91.55.168) has quit (Quit: ERC (IRC client for Emacs 26.1))
2019-01-24 23:46:21	<--	SpinTensor (~SpinTenso@200116b8049f3100040c391a28a116d2.dip.versatel-1u1.de) has quit (Quit: WeeChat 2.3)
2019-01-24 23:46:26	freusque	is there any terminal multiplexer plugin around?
2019-01-24 23:46:33	-->	kitl_ (~kitlangto@198-27-223-170.fiber.dynamic.sonic.net) has joined #haskell
2019-01-24 23:46:51	freusque	project*
2019-01-24 23:46:55	<--	sonofentropy (~k@84-10-10-170.static.chello.pl) has quit (Quit: sonofentropy)
2019-01-24 23:47:11	merijn	freusque: not afaik, I started working on one, but it never went anywhere
2019-01-24 23:47:44	gobby	does wrapping a function in another function hide its constraints?
2019-01-24 23:47:55	<--	jchia_ (~jchia@58.32.32.5) has quit (Ping timeout: 245 seconds)
2019-01-24 23:47:58	-->	darithorn_test (~darithorn@75.174.238.174) has joined #haskell
2019-01-24 23:47:59	merijn	gobby: Yes, no, maybe? Depends on what you mean :p
2019-01-24 23:48:10	<--	oisdk (~textual@2001:bb6:331c:dc58:ecc0:5cff:7839:1d02) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-24 23:48:14	gobby	well basically I wrapped a test function in another function
2019-01-24 23:48:25	gobby	and now the test function does not show the diffs of failures
2019-01-24 23:48:53	gobby	the only thing that has changed is the wrapping function has less constraints
2019-01-24 23:49:13	merijn	gobby: pastebin your code?
2019-01-24 23:49:16	gobby	sure
2019-01-24 23:49:17	<--	darithorn_test (~darithorn@75.174.238.174) has quit (Remote host closed the connection)
2019-01-24 23:49:49	<--	encod3 (~encod3@89.20.162.146.static.ef-service.nl) has quit (Read error: Connection reset by peer)
2019-01-24 23:50:05	-->	obihann (~obihann@156.57.171.145) has joined #haskell
2019-01-24 23:50:07	gobby	merijn: https://pastebin.com/wc0dgcxP
2019-01-24 23:50:18	freusque	merijn did you use bricks?
2019-01-24 23:50:28	gobby	merijn: http://hackage.haskell.org/package/hedgehog-0.6.1/docs/Hedgehog-Internal-Tripping.html
2019-01-24 23:50:36	-->	encod3 (~encod3@89.20.162.146.static.ef-service.nl) has joined #haskell
2019-01-24 23:50:48	-->	ianp (~test@72.249.45.211) has joined #haskell
2019-01-24 23:51:16	merijn	Ah, no clue what MonadTest and co do
2019-01-24 23:51:37	merijn	Although the forall and constraint on the type signatures for encode and decode are SUPER suspicious
2019-01-24 23:51:47	gobby	even with them removed
2019-01-24 23:51:52	gobby	it's still the same issue
2019-01-24 23:53:16	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-24 23:53:23	-->	WhatisRT (~user@ip5b414628.dynamic.kabel-deutschland.de) has joined #haskell
2019-01-24 23:53:32	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-24 23:55:02	<--	dbmikus (~dbmikus@rrcs-50-74-152-162.nyc.biz.rr.com) has quit (Quit: WeeChat 2.3)
2019-01-24 23:55:15	<--	raichoo (~raichoo@office02.saltation.de) has quit (Remote host closed the connection)
2019-01-24 23:55:25	-->	ym555 (~ym@156.201.104.27) has joined #haskell
2019-01-24 23:55:45	-->	unlink__ (~unlink2@dslc-082-082-094-065.pools.arcor-ip.net) has joined #haskell
2019-01-24 23:57:48	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-24 23:58:03	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-24 23:58:46	<--	osa1 (~omer@haskell/developer/osa1) has quit (Remote host closed the connection)
2019-01-24 23:59:15	--	hellozee is now known as distro_ninja
2019-01-24 23:59:41	-->	milanj (~milan@cable-89-216-113-198.static.sbb.rs) has joined #haskell
2019-01-25 00:00:39	-->	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has joined #haskell
2019-01-25 00:00:55	-->	parkeraa (~parker@165.91.13.92) has joined #haskell
2019-01-25 00:01:44	--	distro_ninja is now known as hellozee
2019-01-25 00:03:04	<--	funrep__ (~funrep@46.246.1.216) has quit (Ping timeout: 240 seconds)
2019-01-25 00:04:42	<--	gobby (bed508ca@gateway/web/freenode/ip.190.213.8.202) has quit (Quit: Page closed)
2019-01-25 00:06:27	<--	Ariakenom (~Ariakenom@h-208-40.A163.corp.bahnhof.se) has quit (Ping timeout: 272 seconds)
2019-01-25 00:10:34	 *	hackage hapistrano 0.3.9.1 - A deployment library for Haskell applications  https://hackage.haskell.org/package/hapistrano-0.3.9.1 (juanpaucar)
2019-01-25 00:12:15	-->	Sk01 (~sky3@92.44.30.64) has joined #haskell
2019-01-25 00:12:27	<--	basic (~basic@b2b-37-24-1-41.unitymedia.biz) has quit (Quit: leaving)
2019-01-25 00:12:53	-->	dbmikus (~dbmikus@172.93.11.58) has joined #haskell
2019-01-25 00:13:20	<--	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has quit (Ping timeout: 245 seconds)
2019-01-25 00:13:52	-->	HarveyPwca (~HarveyPwc@ip-64-134-172-208.public.wayport.net) has joined #haskell
2019-01-25 00:14:07	parkeraa	Howdy, #haskell. Am I correct in my understanding that => establishes the typeclass of a function, and -> is for establishing the operands of a function and the output?
2019-01-25 00:14:54	linduxed	parkeraa: s/operands/arguments/, i think. but other than that, yes
2019-01-25 00:15:32	linduxed	hmmm, i should look up the word operand in this case...
2019-01-25 00:15:33	tdammers	more generally, => expresses constraints. But those do usually involve typeclasses.
2019-01-25 00:15:33	lyxia	constraint => argument -> result
2019-01-25 00:15:59	parkeraa	What constraints may exist other than typeclasses?
2019-01-25 00:16:01	-->	Soft (~soft@89-27-60-78.bb.dnainternet.fi) has joined #haskell
2019-01-25 00:16:02	<--	Soft (~soft@89-27-60-78.bb.dnainternet.fi) has quit (Changing host)
2019-01-25 00:16:02	-->	Soft (~soft@unaffiliated/soft) has joined #haskell
2019-01-25 00:16:17	lyxia	type equalities   x ~ y
2019-01-25 00:17:17	lyxia	HasCallstack
2019-01-25 00:17:24	phadej	implicit arguments
2019-01-25 00:17:32	Taneb	lyxia: isn't that a nullary typeclass?
2019-01-25 00:17:37	lyxia	it's not
2019-01-25 00:17:38	parkeraa	So "constraints" may exist outside of type constraints
2019-01-25 00:18:00	-->	Welkin (~Welkin@047-227-169-219.res.spectrum.com) has joined #haskell
2019-01-25 00:18:08	Taneb	lyxia: so it's not. Huh
2019-01-25 00:18:17	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 00:18:33	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 00:18:50	lyxia	it's a magic constraint, GHC adds something to the callstack every time this constraint is encountered, whereas type classes are just dictionaries that get passed around unchanged.
2019-01-25 00:18:59	<--	lambdaman (~lambdaman@74.203.208.2) has quit (Remote host closed the connection)
2019-01-25 00:19:04	Putonlalla	You can think of `=>` as a variant of `->` that the compiler applies, parkeraa.
2019-01-25 00:19:23	<--	encod3 (~encod3@89.20.162.146.static.ef-service.nl) has quit (Remote host closed the connection)
2019-01-25 00:19:37	Putonlalla	We have the monomorphism restriction to control when this happens.
2019-01-25 00:19:50	lyxia	One could also argue Coercible is not a typeclass, because it comes with its own constraint solver.
2019-01-25 00:19:51	<--	kitl_ (~kitlangto@198-27-223-170.fiber.dynamic.sonic.net) has quit (Ping timeout: 244 seconds)
2019-01-25 00:20:44	-->	argent0 (~argent0@186.133.236.143) has joined #haskell
2019-01-25 00:21:07	parkeraa	Putonlalla: that makes sense
2019-01-25 00:22:41	<--	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has quit (Remote host closed the connection)
2019-01-25 00:24:04	<--	Stanley00 (~Stanley00@unaffiliated/stanley00) has quit (Remote host closed the connection)
2019-01-25 00:24:34	 *	hackage log-elasticsearch 0.10.0.1 - Structured logging solution (Elasticsearch back end)  https://hackage.haskell.org/package/log-elasticsearch-0.10.0.1 (MikhailGlushenkov)
2019-01-25 00:26:33	-->	Essadon (~Essadon@81-225-32-185-no249.tbcn.telia.com) has joined #haskell
2019-01-25 00:26:35	<--	chele (~chele@2a02:8106:1:f900:faca:b8ff:fe2f:8499) has quit (Remote host closed the connection)
2019-01-25 00:26:37	parkeraa	Am I also correct to believe that Ord specifies a class of types (being a typeclass), and is a way of specifying that a value may be any of the types in the typeclass?
2019-01-25 00:26:44	-->	antsmartian (~antsmarti@171.76.35.18) has joined #haskell
2019-01-25 00:26:46	-->	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has joined #haskell
2019-01-25 00:26:58	<--	Essadon (~Essadon@81-225-32-185-no249.tbcn.telia.com) has quit (Max SendQ exceeded)
2019-01-25 00:27:16	parkeraa	i.e. "Ord x" specifies that x may be any of the types in the class "Ord"
2019-01-25 00:27:25	-->	Essadon (~Essadon@81-225-32-185-no249.tbcn.telia.com) has joined #haskell
2019-01-25 00:27:41	-->	oisdk (~textual@86-45-6-241-dynamic.agg2.dyx.chf-qkr.eircom.net) has joined #haskell
2019-01-25 00:28:01	-->	lambdaman (~lambdaman@msp-vpn.calabrio.com) has joined #haskell
2019-01-25 00:28:56	<--	argent0 (~argent0@186.133.236.143) has quit (Ping timeout: 268 seconds)
2019-01-25 00:29:22	dminuoso	lyxia: Why is the constraint solver different?
2019-01-25 00:29:30	-->	p0lyph3m (~p0lyph3m@2a02:810d:640:776c:76d7:55f6:f85b:c889) has joined #haskell
2019-01-25 00:30:05	-->	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has joined #haskell
2019-01-25 00:30:48	<--	antsmartian (~antsmarti@171.76.35.18) has quit (Remote host closed the connection)
2019-01-25 00:31:00	<--	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has quit (Ping timeout: 246 seconds)
2019-01-25 00:31:46	dminuoso	Oh. I guess there are not actually any instances of Coercible..
2019-01-25 00:32:10	dminuoso	So that would mean... constraint solving needs to know about roles instead of instances. 
2019-01-25 00:32:48	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 00:33:02	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 00:33:13	ski	parkeraa : `Ord x' specifies that `x' is any of the types that support ordering, yes. to specify that a value is of type `x', then refer to `x' in the rest of the type signature
2019-01-25 00:34:12	-->	amar (~amar@217.138.122.53) has joined #haskell
2019-01-25 00:34:14	-->	Stanley00 (~Stanley00@unaffiliated/stanley00) has joined #haskell
2019-01-25 00:34:36	--	amar is now known as Guest36513
2019-01-25 00:35:17	<--	yoneda (~mike@193.206.102.122) has quit (Quit: leaving)
2019-01-25 00:35:28	ski	parkeraa : perhaps you could elaborate more on how you want to use this (these) value(s) that "may be any of the types in the typeclass" ?
2019-01-25 00:37:07	-->	fmixing (~fmixing@5.18.98.152) has joined #haskell
2019-01-25 00:38:06	-->	PragCypher (~cypher@li1411-156.members.linode.com) has joined #haskell
2019-01-25 00:38:07	lyxia	dminuoso: it's also aware of transitivity and symmetry, which don't work well with typeclasses in general.
2019-01-25 00:38:24	<--	Guest36513 (~amar@217.138.122.53) has quit (Ping timeout: 240 seconds)
2019-01-25 00:38:32	parkeraa	I'm just trying to understand what is meant by Ord, I'm not working on a particular project
2019-01-25 00:38:35	-->	marco_t (~marco_t@181.231.118.54) has joined #haskell
2019-01-25 00:38:49	parkeraa	Thank you all for your help, I greatly appreciate it
2019-01-25 00:39:03	-->	MiniCow (~MiniCow@46.233.78.20) has joined #haskell
2019-01-25 00:40:38	ski	parkeraa : well, an example of what you're thinking about would help us better understand what it is you're thinking of, so that we could give more appropriate/specific help
2019-01-25 00:41:14	<--	nyc (~nyc@unaffiliated/wli) has quit (Quit: Leaving.)
2019-01-25 00:42:06	ski	parkeraa : if you e.g. say `blah :: Ord a => a -> [a] -> [a]', then that's the type signature of a function `blah' that takes a value, and a list of elements of the same type, and returns another list of the same type, as long as the element type `a' is in the type class `Ord'
2019-01-25 00:42:35	ski	parkeraa : so, in this case, a single call to `blah' only involves a *single* type `a' which is in the type class `Ord'
2019-01-25 00:42:42	<--	FreeBirdLjj (~freebirdl@114.91.21.224) has quit (Remote host closed the connection)
2019-01-25 00:42:55	<--	parkeraa (~parker@165.91.13.92) has quit (Ping timeout: 245 seconds)
2019-01-25 00:43:16	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 00:43:19	-->	FreeBirdLjj (~freebirdl@114.91.21.224) has joined #haskell
2019-01-25 00:43:22	<--	yyy (~yyy@unaffiliated/tinnotl) has quit (Ping timeout: 246 seconds)
2019-01-25 00:43:31	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 00:43:31	<--	marco_t (~marco_t@181.231.118.54) has quit (Ping timeout: 250 seconds)
2019-01-25 00:43:33	ski	parkeraa : however, your question sounded like you were perhaps wondering about a single function handling multiple values of different types, all in the type class `Ord'. maybe even handling a list of multiple such values of different types ?
2019-01-25 00:43:44	-->	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has joined #haskell
2019-01-25 00:44:11	-->	davr0s (~textual@host109-155-92-146.range109-155.btcentralplus.com) has joined #haskell
2019-01-25 00:46:20	-->	yyy (~yyy@unaffiliated/tinnotl) has joined #haskell
2019-01-25 00:47:34	<--	FreeBirdLjj (~freebirdl@114.91.21.224) has quit (Ping timeout: 246 seconds)
2019-01-25 00:47:40	-->	raichoo (~raichoo@213.240.178.58) has joined #haskell
2019-01-25 00:52:48	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 00:53:01	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 00:53:23	-->	jao (~jao@pdpc/supporter/professional/jao) has joined #haskell
2019-01-25 00:53:44	<--	nbloomf (~nbloomf@2600:1700:83e0:1f40:6d74:a91e:18fc:6759) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-25 00:54:55	-->	ddellacosta (~ddellacos@193.148.18.237) has joined #haskell
2019-01-25 00:55:00	<--	zero_byte (zer0@nat/redhat/x-goxzklhousqbugye) has quit (Ping timeout: 245 seconds)
2019-01-25 00:55:14	-->	nowhere_man (~pierre@2a01:e35:2eb3:4350:e450:14c0:75f:802d) has joined #haskell
2019-01-25 00:55:46	-->	antsmartian (~antsmarti@171.76.35.18) has joined #haskell
2019-01-25 00:55:54	-->	xolotolox (~andrew0@dyn-128-59-52-30.dyn.columbia.edu) has joined #haskell
2019-01-25 00:56:09	-->	alx741 (~alx741@186.178.110.40) has joined #haskell
2019-01-25 00:56:46	-->	doyougnu (~doyougnu@c-73-11-11-86.hsd1.or.comcast.net) has joined #haskell
2019-01-25 00:57:25	-->	cfsloth (~cfsloth3@89-181-200-17.net.novis.pt) has joined #haskell
2019-01-25 00:57:33	-->	parkeraa (~parker@165.91.13.92) has joined #haskell
2019-01-25 00:58:03	<--	parkeraa (~parker@165.91.13.92) has quit (Client Quit)
2019-01-25 01:00:23	--	Mode #haskell [+o glguy] by ChanServ
2019-01-25 01:00:23	--	Mode #haskell [-bbbb *!~dameloo@* $a:phaskell *!*@185.2.188.17 *!*jimmyray@unaffiliated/stafford] by glguy
2019-01-25 01:00:24	--	Mode #haskell [-bbbb *!*@aftertheome.ga *!*@202.81.242.188 *!*@*.lab.im *!*@gateway/tor-sasl/qqumber] by glguy
2019-01-25 01:00:24	--	Mode #haskell [-bbbb *!*@206.189.157.115 hamme!*@* $a:chare $a:anticensored] by glguy
2019-01-25 01:00:24	--	Mode #haskell [-bbbb *!~TURK@* *!*rly@unaffiliated/rly *!*@233-179-0-131.e-client.com.br *!~elaineben@*] by glguy
2019-01-25 01:00:24	--	Mode #haskell [-bbbb *!*@unaffiliated/scheme $a:harrisonpartch *!*@70.35.192.0/20 unamazing!*@*$##fix_your_connection] by glguy
2019-01-25 01:00:25	--	Mode #haskell [-bbbb *!~hmm@*.btcentralplus.com *!~MRd@114.125.* $a:Kihokki chord!*@*] by glguy
2019-01-25 01:00:26	--	Mode #haskell [-bbbb $a:republican_devil *!*@104.237.255.131 *!*Krisostoo@*.dyn.estpak.ee *!*@187-108-067-184.ip3.com.br] by glguy
2019-01-25 01:00:27	--	Mode #haskell [-bbbb *!*@2001:ee0:4101:a16:* *!*irc2000@*gateway/tor-sasl/irc2000 $r:*FAT*16* $a:EthicalHacker] by glguy
2019-01-25 01:00:28	--	Mode #haskell [-bbbb *!*@unaffiliated/ethicalhacker *!*@cassarossa.samfundet.no *!*25e4ed97@*.37.228.237.151 *!*weenis@2607:5300:60:41a::*] by glguy
2019-01-25 01:00:29	--	Mode #haskell [-o glguy] by glguy
2019-01-25 01:00:47	Welkin	what
2019-01-25 01:01:27	-->	sonofentropy (~k@89-64-15-252.dynamic.chello.pl) has joined #haskell
2019-01-25 01:01:56	<--	sonofentropy (~k@89-64-15-252.dynamic.chello.pl) has quit (Client Quit)
2019-01-25 01:01:58	phadej	I guess those were spammer bans?
2019-01-25 01:02:27	glguy	Outdated ones, at least
2019-01-25 01:02:51	<--	cfsloth (~cfsloth3@89-181-200-17.net.novis.pt) has quit (Ping timeout: 268 seconds)
2019-01-25 01:02:54	-->	__e0s (~miguel-aw@187.56.63.140) has joined #haskell
2019-01-25 01:03:01	<--	__e0s (~miguel-aw@187.56.63.140) has left #haskell
2019-01-25 01:03:16	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 01:03:33	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 01:03:49	-->	cfsloth (~cfsloth3@89-181-200-17.net.novis.pt) has joined #haskell
2019-01-25 01:04:15	-->	sternmull (~kringel@p5481C9B5.dip0.t-ipconnect.de) has joined #haskell
2019-01-25 01:05:12	 *	ski idly wonders how long before gavino reappears
2019-01-25 01:05:43	-->	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has joined #haskell
2019-01-25 01:07:38	<--	yrid (~quassel@2a02:25b0:aaaa:aaaa:dfe8:6c12:4cf7:0) has quit (Quit: No Ping reply in 180 seconds.)
2019-01-25 01:07:40	dminuoso	Is it safe to use log through a Chan this way? https://gist.github.com/dminuoso/7761edf574e272cd4758e8cfed2ac27f  
2019-01-25 01:07:48	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-25 01:08:02	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 01:08:15	--	Mode #haskell [+o glguy] by ChanServ
2019-01-25 01:08:16	--	Mode #haskell [-qqqo phaskell-1!*@* phaskell-2!*@* *!*@gateway/web/cgi-irc/kiwiirc.com/ip.46.92.185.101 glguy] by glguy
2019-01-25 01:08:20	<--	aplainzetakind (~dk@2E8BD6FE.catv.pool.telekom.hu) has quit (Ping timeout: 245 seconds)
2019-01-25 01:08:49	merijn	dminuoso: Define safe
2019-01-25 01:09:10	<--	cheater (~cheater@unaffiliated/cheater) has quit (Ping timeout: 272 seconds)
2019-01-25 01:09:10	--	Mode #haskell [+o glguy] by ChanServ
2019-01-25 01:09:11	--	Mode #haskell [-qo Krisostoomus!*@* glguy] by glguy
2019-01-25 01:09:22	merijn	dminuoso: There's a race where the program can exit before all messages have been logged, yes.
2019-01-25 01:10:25	-->	yrid (~quassel@2a02:25b0:aaaa:aaaa:dfe8:6c12:4cf7:0) has joined #haskell
2019-01-25 01:10:35	merijn	dminuoso: I'm assuming you're using link to terminate the logging thread?
2019-01-25 01:10:44	<--	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has quit (Ping timeout: 240 seconds)
2019-01-25 01:10:55	merijn	hmm, gotta run to catch my bus!
2019-01-25 01:11:06	-->	pfurla_ (~pfurla@ec2-18-208-170-161.compute-1.amazonaws.com) has joined #haskell
2019-01-25 01:11:15	-->	kish\ (~oracle@unaffiliated/oracle) has joined #haskell
2019-01-25 01:12:18	<--	pfurla (~pfurla@177.142.249.84) has quit (Ping timeout: 246 seconds)
2019-01-25 01:15:19	-->	comerijn (~merijn@145.100.116.162) has joined #haskell
2019-01-25 01:15:24	<--	merijn (~merijn@145.100.116.22) has quit (Ping timeout: 240 seconds)
2019-01-25 01:16:02	<--	lambdaman (~lambdaman@msp-vpn.calabrio.com) has quit (Remote host closed the connection)
2019-01-25 01:16:56	<--	Welkin (~Welkin@047-227-169-219.res.spectrum.com) has quit (Read error: Connection reset by peer)
2019-01-25 01:17:45	-->	osa1 (~omer@haskell/developer/osa1) has joined #haskell
2019-01-25 01:18:23	-->	ianandrich (~ianandric@c-73-223-61-224.hsd1.ca.comcast.net) has joined #haskell
2019-01-25 01:18:37	<--	nan` (~nan`@cpe-75-86-97-30.wi.res.rr.com) has quit (Ping timeout: 250 seconds)
2019-01-25 01:20:47	<--	comerijn (~merijn@145.100.116.162) has quit (Ping timeout: 250 seconds)
2019-01-25 01:22:06	-->	Ariakenom (~Ariakenom@h-155-4-222-251.NA.cust.bahnhof.se) has joined #haskell
2019-01-25 01:22:54	<--	keepLearning512 (~keepLearn@106.51.72.155) has quit (Remote host closed the connection)
2019-01-25 01:24:02	<--	juhp (juhp@redhat/juhp) has quit (Quit: juhp)
2019-01-25 01:25:55	<--	kritzefitz (~kritzefit@2003:5b:203b:100:6e0b:84ff:feb4:9eaf) has quit (Remote host closed the connection)
2019-01-25 01:26:01	-->	ddellaco_ (~ddellacos@87.101.95.115) has joined #haskell
2019-01-25 01:28:08	<--	jhaj (~jhaj@193.108.177.207.dyn.southslope.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-25 01:29:10	<--	ddellacosta (~ddellacos@193.148.18.237) has quit (Ping timeout: 245 seconds)
2019-01-25 01:29:21	-->	boeingx (~bysong@87-88-52-149.abo.bbox.fr) has joined #haskell
2019-01-25 01:31:03	-->	kitl_ (~kitlangto@198-27-223-170.fiber.dynamic.sonic.net) has joined #haskell
2019-01-25 01:32:53	<--	doyougnu (~doyougnu@c-73-11-11-86.hsd1.or.comcast.net) has quit (Ping timeout: 240 seconds)
2019-01-25 01:33:17	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 01:33:32	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 01:34:17	-->	lambdaman (~lambdaman@con08-vpn.calabrio.com) has joined #haskell
2019-01-25 01:34:45	-->	aware (~aware@rrcs-98-6-17-170.sw.biz.rr.com) has joined #haskell
2019-01-25 01:37:25	-->	nbloomf (~nbloomf@2600:1700:83e0:1f40:6d74:a91e:18fc:6759) has joined #haskell
2019-01-25 01:37:50	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-25 01:38:04	<--	oish (~charlie@host81-130-206-144.in-addr.btopenworld.com) has quit (Remote host closed the connection)
2019-01-25 01:38:06	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 01:42:32	-->	fendor (uid281290@gateway/web/irccloud.com/x-avcfcxxiosnrpaln) has joined #haskell
2019-01-25 01:42:38	-->	pera (~pera@unaffiliated/pera) has joined #haskell
2019-01-25 01:43:04	-->	iqubic (a4747e96@gateway/web/freenode/ip.164.116.126.150) has joined #haskell
2019-01-25 01:43:17	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 01:43:23	iqubic	When will dependent haskell be a thing?
2019-01-25 01:43:33	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 01:44:00	<--	cfsloth (~cfsloth3@89-181-200-17.net.novis.pt) has quit (Ping timeout: 272 seconds)
2019-01-25 01:44:11	<--	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has quit (Ping timeout: 268 seconds)
2019-01-25 01:45:03	saml	cabal is dependency management
2019-01-25 01:46:53	-->	cfsloth (~cfsloth3@89-181-200-17.net.novis.pt) has joined #haskell
2019-01-25 01:47:20	iqubic	saml: That's not quite what I meant.
2019-01-25 01:47:29	iqubic	I want haskell with dependent types.
2019-01-25 01:47:32	saml	ah i see
2019-01-25 01:47:57	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-25 01:48:04	koala_man	I've developed a Haskell dependency. I need my fix :: (a -> a) -> a
2019-01-25 01:48:13	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 01:48:24	-->	snowgoggles (~snowgoggl@dhcp-c-b6-d2-83-34-5a.cpe.i-zoom.net) has joined #haskell
2019-01-25 01:48:31	<--	darithorn (~darithorn@75.174.238.174) has quit (Ping timeout: 250 seconds)
2019-01-25 01:48:36	<--	jao (~jao@pdpc/supporter/professional/jao) has quit (Remote host closed the connection)
2019-01-25 01:49:24	saml	@type fix
2019-01-25 01:49:25	lambdabot	(a -> a) -> a
2019-01-25 01:49:29	<--	kapil____ (uid36151@gateway/web/irccloud.com/x-msfeiqbfhlkiqbvm) has quit (Quit: Connection closed for inactivity)
2019-01-25 01:49:31	saml	@src fix
2019-01-25 01:49:31	lambdabot	fix f = let x = f x in x
2019-01-25 01:49:53	<--	xolotolox (~andrew0@dyn-128-59-52-30.dyn.columbia.edu) has quit (Quit: Leaving.)
2019-01-25 01:49:53	<--	lambdaman (~lambdaman@con08-vpn.calabrio.com) has quit (Remote host closed the connection)
2019-01-25 01:49:54	<--	reactormonk (~tass@p2E5E9A8C.dip0.t-ipconnect.de) has quit (Ping timeout: 240 seconds)
2019-01-25 01:50:09	-->	nan` (~nan`@cpe-75-86-97-30.wi.res.rr.com) has joined #haskell
2019-01-25 01:50:20	saml	> fix id
2019-01-25 01:50:23	lambdabot	 *Exception: <<loop>>
2019-01-25 01:50:40	<--	davr0s (~textual@host109-155-92-146.range109-155.btcentralplus.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2019-01-25 01:51:01	<--	nowhere_man (~pierre@2a01:e35:2eb3:4350:e450:14c0:75f:802d) has quit (Ping timeout: 252 seconds)
2019-01-25 01:51:26	-->	darithorn (~darithorn@75.174.234.76) has joined #haskell
2019-01-25 01:51:59	-->	xolotolox (~andrew0@dyn-160-39-248-164.dyn.columbia.edu) has joined #haskell
2019-01-25 01:52:01	phadej	fix error
2019-01-25 01:52:03	phadej	> fix error
2019-01-25 01:52:06	lambdabot	 "*Exception: *Exception: *Exception: *Exception: *Exception: *Exception: *Ex...
2019-01-25 01:52:09	-->	IanTownsend[m] (iantownsen@gateway/shell/matrix.org/x-qkveamlpjwettuko) has joined #haskell
2019-01-25 01:52:12	phadej	fun every time
2019-01-25 01:52:18	iqubic	How does that work?!?!
2019-01-25 01:52:28	iqubic	:t error
2019-01-25 01:52:29	-->	lambdaman (~lambdaman@con08-vpn.calabrio.com) has joined #haskell
2019-01-25 01:52:30	lambdabot	[Char] -> a
2019-01-25 01:52:46	-->	ph88 (~ph88@a79-169-57-95.cpe.netcabo.pt) has joined #haskell
2019-01-25 01:52:53	iqubic	Oh, I see how that works.
2019-01-25 01:53:35	phadej	iqubic: 
2019-01-25 01:53:37	phadej	> take 30 $ fix ("foo " ++ )
2019-01-25 01:53:38	<--	xolotolox (~andrew0@dyn-160-39-248-164.dyn.columbia.edu) has quit (Client Quit)
2019-01-25 01:53:40	lambdabot	 "foo foo foo foo foo foo foo fo"
2019-01-25 01:54:03	iqubic	phadej: I figured it out, yeah.
2019-01-25 01:54:06	-->	oish (~charlie@35.170-104-213.static.virginmediabusiness.co.uk) has joined #haskell
2019-01-25 01:54:31	-->	xolotolox (~andrew0@dyn-160-39-248-164.dyn.columbia.edu) has joined #haskell
2019-01-25 01:55:53	<--	dpyro (~dpyro@66-169-160-49.dhcp.ftwo.tx.charter.com) has quit (Ping timeout: 240 seconds)
2019-01-25 01:56:08	<--	xolotolox (~andrew0@dyn-160-39-248-164.dyn.columbia.edu) has quit (Client Quit)
2019-01-25 01:56:09	-->	ngyj (~ngyj@2a02:2788:1008:17c::3) has joined #haskell
2019-01-25 01:56:43	-->	codesoup (~codesoup@2607:fea8:e21f:fea0:1948:e82c:1a73:3d92) has joined #haskell
2019-01-25 01:57:07	<--	WhatisRT (~user@ip5b414628.dynamic.kabel-deutschland.de) has quit (Ping timeout: 268 seconds)
2019-01-25 01:57:29	saml	> take -1 $ fix id
2019-01-25 01:57:31	lambdabot	 error:
2019-01-25 01:57:31	lambdabot	     • No instance for (Typeable a0)
2019-01-25 01:57:31	lambdabot	         arising from a use of ‘show_M6649213988889905026928’
2019-01-25 01:58:03	-->	xolotolox (~andrew0@dyn-160-39-248-164.dyn.columbia.edu) has joined #haskell
2019-01-25 01:58:45	<--	antsmartian (~antsmarti@171.76.35.18) has quit (Remote host closed the connection)
2019-01-25 01:59:04	phadej	> take 0 undefined :: Char
2019-01-25 01:59:07	lambdabot	 error:
2019-01-25 01:59:07	lambdabot	     • Couldn't match expected type ‘Char’ with actual type ‘[a0]’
2019-01-25 01:59:07	lambdabot	     • In the expression: take 0 undefined :: Char
2019-01-25 01:59:12	phadej	> take 0 undefined :: [Char]
2019-01-25 01:59:14	lambdabot	 ""
2019-01-25 01:59:37	<--	xolotolox (~andrew0@dyn-160-39-248-164.dyn.columbia.edu) has quit (Client Quit)
2019-01-25 02:00:01	<--	binq_ (~binq@99.156.186.141) has quit (Remote host closed the connection)
2019-01-25 02:00:13	<--	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has quit (Ping timeout: 250 seconds)
2019-01-25 02:00:26	-->	xolotolox (~andrew0@dyn-160-39-248-164.dyn.columbia.edu) has joined #haskell
2019-01-25 02:01:02	dmwit	> take (-1) $ fix id
2019-01-25 02:01:04	lambdabot	 []
2019-01-25 02:02:08	<--	xolotolox (~andrew0@dyn-160-39-248-164.dyn.columbia.edu) has quit (Client Quit)
2019-01-25 02:02:15	--	amalloy_ is now known as amalloy
2019-01-25 02:02:23	<--	snowgoggles (~snowgoggl@dhcp-c-b6-d2-83-34-5a.cpe.i-zoom.net) has quit (Ping timeout: 240 seconds)
2019-01-25 02:02:58	-->	xolotolox (~andrew0@dyn-160-39-248-164.dyn.columbia.edu) has joined #haskell
2019-01-25 02:02:59	<--	ubert (~ub@91.64.224.226) has quit (Remote host closed the connection)
2019-01-25 02:03:26	-->	abhixec (~abhixec@c-24-130-65-112.hsd1.ca.comcast.net) has joined #haskell
2019-01-25 02:03:54	dmwit	> let f = take -1 in f 3 [1..]
2019-01-25 02:03:56	lambdabot	 [0,1,2]
2019-01-25 02:04:33	dmwit	For when you need to go backwards from the beginning of an infinite list.
2019-01-25 02:04:33	-->	Saukk (~Saukk@2001:99a:0:e640:89a7:5c8f:e3fb:2e6e) has joined #haskell
2019-01-25 02:05:32	iqubic	dmwit: HOW THE HECK!?!?!
2019-01-25 02:05:54	iqubic	:t take
2019-01-25 02:05:55	lambdabot	Int -> [a] -> [a]
2019-01-25 02:06:01	<--	dsh (~daishi@64.237.40.140) has quit (Read error: Connection reset by peer)
2019-01-25 02:06:04	-->	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has joined #haskell
2019-01-25 02:06:08	<--	xolotolox (~andrew0@dyn-160-39-248-164.dyn.columbia.edu) has left #haskell
2019-01-25 02:06:21	iqubic	Also, 3 doesn't have the type [a]
2019-01-25 02:06:30	dmwit	Doesn't it?
2019-01-25 02:06:34	 *	dmwit looks on innocently
2019-01-25 02:06:36	-->	binq (~binq@99.156.186.141) has joined #haskell
2019-01-25 02:06:50	<--	Saukk (~Saukk@2001:99a:0:e640:89a7:5c8f:e3fb:2e6e) has quit (Remote host closed the connection)
2019-01-25 02:06:55	dmwit	> 3 :: [_]
2019-01-25 02:06:57	lambdabot	 error:
2019-01-25 02:06:57	lambdabot	     • Found type wildcard ‘_’ standing for ‘w’
2019-01-25 02:06:57	lambdabot	       Where: ‘w’ is a rigid type variable bound by
2019-01-25 02:07:09	dmwit	> [3, []]
2019-01-25 02:07:11	lambdabot	 [[3],[]]
2019-01-25 02:07:24	-->	dpyro (~dpyro@66-169-160-49.dhcp.ftwo.tx.charter.com) has joined #haskell
2019-01-25 02:07:34	dmwit	Oh, dear. It seems I've written a bug.
2019-01-25 02:07:43	iqubic	It does? How so?
2019-01-25 02:08:58	-->	leungbk (~user@2605:e000:1315:546:dfd7:1f82:6204:3216) has joined #haskell
2019-01-25 02:09:05	dmwit	Let's try that again.
2019-01-25 02:09:07	dmwit	> [3, []]
2019-01-25 02:09:09	lambdabot	 [[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,...
2019-01-25 02:09:13	dmwit	MUCH better.
2019-01-25 02:10:05	dmwit	Okay, fair dinkum: claiming this goes backwards is misdirection. The fact that 3 can have a list type is also misdirection.
2019-01-25 02:10:16	iqubic	How does that work???
2019-01-25 02:10:27	iqubic	How does any of this trickery work?
2019-01-25 02:10:34	binq	> [3, []]
2019-01-25 02:10:35	lambdabot	 [[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,...
2019-01-25 02:10:42	-->	davr0s (~textual@host109-155-92-146.range109-155.btcentralplus.com) has joined #haskell
2019-01-25 02:10:43	iqubic	> [3, 4, []]
2019-01-25 02:10:45	lambdabot	 [[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,...
2019-01-25 02:10:50	<--	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has quit (Ping timeout: 245 seconds)
2019-01-25 02:10:51	dmwit	And to complete the list: the spacing I used in `take -1` is also misdirection.
2019-01-25 02:10:59	<--	yrid (~quassel@2a02:25b0:aaaa:aaaa:dfe8:6c12:4cf7:0) has quit (Read error: Connection reset by peer)
2019-01-25 02:10:59	iqubic	Huh??? Where's the 4?
2019-01-25 02:11:09	-->	cantstanya (~chatting@gateway/tor-sasl/cantstanya) has joined #haskell
2019-01-25 02:11:13	dmwit	> drop 1 [3, 4, []] -- right here, of course
2019-01-25 02:11:15	lambdabot	 [[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,...
2019-01-25 02:11:28	iqubic	> let f = take -1 in f 3 [1..]
2019-01-25 02:11:31	lambdabot	 [0,1,2]
2019-01-25 02:11:37	iqubic	How does that work?
2019-01-25 02:11:46	iqubic	> let f = take -2 in f 3 [1..]
2019-01-25 02:11:47	-->	yrid (~quassel@2a02:25b0:aaaa:aaaa:dfe8:6c12:4cf7:0) has joined #haskell
2019-01-25 02:11:48	lambdabot	 [-1,0,1]
2019-01-25 02:12:04	iqubic	Seems to be going backwards to me.
2019-01-25 02:12:05	<--	dpyro (~dpyro@66-169-160-49.dhcp.ftwo.tx.charter.com) has quit (Ping timeout: 245 seconds)
2019-01-25 02:12:05	dmwit	Be careful. If you go backwards in time too far it might blow up.
2019-01-25 02:12:12	<--	lambdaman (~lambdaman@con08-vpn.calabrio.com) has quit (Remote host closed the connection)
2019-01-25 02:12:22	iqubic	> let f = take -3 in f 3 [1..]
2019-01-25 02:12:25	lambdabot	 [-2,-1,0]
2019-01-25 02:12:25	-->	Lycurgus (~niemand@cpe-45-46-138-162.buffalo.res.rr.com) has joined #haskell
2019-01-25 02:12:38	dmwit	> let f = take -3 in f 3 [42..] -- does it really go backwards for every infinite list?
2019-01-25 02:12:39	ym555	:t take -1
2019-01-25 02:12:40	lambdabot	 [39,40,41]
2019-01-25 02:12:40	lambdabot	Num a => Int -> [a] -> [a]
2019-01-25 02:13:00	iqubic	> [0, 2, 3] -1
2019-01-25 02:13:02	lambdabot	 [-1,1,2]
2019-01-25 02:13:03	dmwit	(Fair dinkum: yet more misdirection! But misdirection is way too fun to stop doing, so...)
2019-01-25 02:13:07	 *	ski smirks
2019-01-25 02:13:23	iqubic	Wait... I think I found the trick.
2019-01-25 02:13:36	dmwit	I think you only found half of the trick. =)
2019-01-25 02:13:45	iqubic	You take the first n elements, and then subtract x from them.
2019-01-25 02:13:47	<--	lawlesseel (~lawlessee@gateway/tor-sasl/lawlesseel) has quit (Remote host closed the connection)
2019-01-25 02:13:51	-->	knupfer (~Thunderbi@200116b82c73bd00f69634fffef0b45f.dip.versatel-1u1.de) has joined #haskell
2019-01-25 02:14:01	iqubic	:t (\x -> [1, 2, 3] -x)
2019-01-25 02:14:03	lambdabot	Num a => [a] -> [a]
2019-01-25 02:14:11	iqubic	How heck does that work???
2019-01-25 02:14:41	-->	lawlesseel (~lawlessee@gateway/tor-sasl/lawlesseel) has joined #haskell
2019-01-25 02:14:45	iqubic	:t (\x -> (-) [1, 2, 3] x)
2019-01-25 02:14:46	lambdabot	Num a => [a] -> [a]
2019-01-25 02:14:52	-->	lambdaman (~lambdaman@74.203.208.2) has joined #haskell
2019-01-25 02:14:54	ski	@type let x = undefined in x `asTypeIn` \x -> [1, 2, 3] -x
2019-01-25 02:14:56	lambdabot	Num a => [a]
2019-01-25 02:15:00	Rembane	Have you given list a Num instance? 
2019-01-25 02:15:00	iqubic	So it is actually applying the minus function.
2019-01-25 02:15:11	iqubic	I think he must have.
2019-01-25 02:15:12	ski	yes
2019-01-25 02:15:17	-->	sonofentropy (~k@84-10-10-170.static.chello.pl) has joined #haskell
2019-01-25 02:15:25	iqubic	So now, how does the take thing work?
2019-01-25 02:15:30	dmwit	It's hard to imagine how [3, []] could work if there were no Num instance for lists.
2019-01-25 02:15:42	Rembane	Dark magci?
2019-01-25 02:15:46	dmwit	yes =)
2019-01-25 02:15:51	iqubic	> let f = take -1 in f 3 [1..]
2019-01-25 02:15:53	lambdabot	 [0,1,2]
2019-01-25 02:15:53	<--	oish (~charlie@35.170-104-213.static.virginmediabusiness.co.uk) has quit (Ping timeout: 240 seconds)
2019-01-25 02:15:55	wroathe	So say I define a function with a polymorphic return type that has a few possible instances, like so: foo :: (MyClass b) => a -> b
2019-01-25 02:16:09	iqubic	Now, how does the that take thing work/
2019-01-25 02:16:10	wroathe	Normally the user would have to specify or let type inference kick in
2019-01-25 02:16:13	dmwit	Perhaps I have actually replaced lambdabot with a custom bot with an AI trained on producing the maximally confusing answers. =)
2019-01-25 02:16:18	ski	> map ((^2) + (^3)) [0 ..]
2019-01-25 02:16:18	wroathe	so foo "bar" :: Baz
2019-01-25 02:16:21	lambdabot	 [0,2,12,36,80,150,252,392,576,810,1100,1452,1872,2366,2940,3600,4352,5202,61...
2019-01-25 02:16:30	wroathe	Is there a way to specify a default type for type inference?
2019-01-25 02:16:39	-->	keepLearning512 (~keepLearn@106.51.31.245) has joined #haskell
2019-01-25 02:16:43	dmwit	> map (sin^2 + cos^2) [3,4,5]
2019-01-25 02:16:45	iqubic	> let f = take . -1 in f 3 [1..]
2019-01-25 02:16:45	lambdabot	 [0.9999999999999999,1.0,0.9999999999999999]
2019-01-25 02:16:47	lambdabot	 error:
2019-01-25 02:16:47	lambdabot	     Precedence parsing error
2019-01-25 02:16:47	lambdabot	         cannot mix ‘.’ [infixr 9] and prefix `-' [infixl 6] in the same infi...
2019-01-25 02:17:03	-->	michaelsdunn1 (~michaelsd@38.126.31.226) has joined #haskell
2019-01-25 02:17:04	<--	michaelsdunn1 (~michaelsd@38.126.31.226) has quit (Changing host)
2019-01-25 02:17:04	-->	michaelsdunn1 (~michaelsd@unaffiliated/michaelsdunn1) has joined #haskell
2019-01-25 02:17:05	iqubic	> let f = (.) take -1 in f 3 [1..]
2019-01-25 02:17:07	lambdabot	 <[Integer] -> [Integer]>
2019-01-25 02:17:08	wroathe	sot aht if the user just calls it as foo "bar" without the type specifier
2019-01-25 02:17:16	ski	> let f = take . subtract 1 in f 3 [1..]
2019-01-25 02:17:18	lambdabot	 [1,2]
2019-01-25 02:17:28	iqubic	ski: Is that what it's doing?
2019-01-25 02:17:30	dmwit	wroathe: No, you will always need a specifier. But TypeApplications can make the specification fairly lightweight.
2019-01-25 02:17:38	dmwit	iqubic: no
2019-01-25 02:17:39	ski	iqubic, no
2019-01-25 02:17:47	iqubic	Does it evaluate the take first, and then the subtraction?
2019-01-25 02:17:51	dmwit	iqubic: As you can tell by the fact that it gives a different answer. =)
2019-01-25 02:18:05	<--	binq (~binq@99.156.186.141) has quit (Remote host closed the connection)
2019-01-25 02:18:06	-->	Deide (~Deide@90.240.92.199) has joined #haskell
2019-01-25 02:18:08	iqubic	> subtract 1 2
2019-01-25 02:18:10	lambdabot	 1
2019-01-25 02:18:16	ski	> subtract a b
2019-01-25 02:18:16	dmwit	?src subtract
2019-01-25 02:18:16	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 02:18:17	lambdabot	subtract x y = y - x
2019-01-25 02:18:18	lambdabot	 b - a
2019-01-25 02:18:28	iqubic	So it's doing something weird.
2019-01-25 02:18:30	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 02:18:34	ski	heh
2019-01-25 02:18:37	dmwit	Well you knew that right from the beginning. =D
2019-01-25 02:18:39	iqubic	> let f = take . flip subtract 1 in f 3 [1..]
2019-01-25 02:18:41	lambdabot	 []
2019-01-25 02:18:45	iqubic	What?!?!
2019-01-25 02:18:59	ski	taking a negative amount yields the empty list
2019-01-25 02:19:04	<--	michaels_ (~michaelsd@38.126.31.226) has quit (Ping timeout: 240 seconds)
2019-01-25 02:19:08	iqubic	I see.
2019-01-25 02:19:09	-->	kritzefitz (~kritzefit@dslb-094-221-072-173.094.221.pools.vodafone-ip.de) has joined #haskell
2019-01-25 02:19:14	iqubic	So how does the initial thing work?
2019-01-25 02:19:20	iqubic	> let f = take -1 in f 3 [1..]
2019-01-25 02:19:22	lambdabot	 [0,1,2]
2019-01-25 02:19:34	 *	ski blames brownies
2019-01-25 02:19:50	iqubic	I get how the subtraction works, but nothing else
2019-01-25 02:20:02	dmwit	Claim: you do not even get how the subtraction works.
2019-01-25 02:20:13	ski	iqubic : could you get the same result, but without the `let' ?
2019-01-25 02:20:30	iqubic	Did you really just create an orphan instance to screw with my mind?
2019-01-25 02:20:31	dmwit	Oh yeah! I forgot to call out the "let" as part of the misdirection! Shame on me.
2019-01-25 02:20:39	<--	sonofentropy (~k@84-10-10-170.static.chello.pl) has quit (Quit: sonofentropy)
2019-01-25 02:20:46	-->	cschneid (~cschneid@c-73-78-144-189.hsd1.co.comcast.net) has joined #haskell
2019-01-25 02:20:52	iqubic	Is the let needed?
2019-01-25 02:20:57	<--	kritzefitz (~kritzefit@dslb-094-221-072-173.094.221.pools.vodafone-ip.de) has quit (Remote host closed the connection)
2019-01-25 02:20:58	dmwit	...sort of.
2019-01-25 02:21:04	 *	hackage spectral-clustering 0.2.2.0 - Library for spectral clustering.  https://hackage.haskell.org/package/spectral-clustering-0.2.2.0 (GregorySchwartz)
2019-01-25 02:21:10	dmwit	You can do without, but then the trick is much more obvious. =)
2019-01-25 02:21:16	 *	ski . o O ( "so many misdirections to provide, so easy to forget mentioning one." )
2019-01-25 02:21:23	-->	dsh (~daishi@23.226.128.22.adsl.inet-telecom.org) has joined #haskell
2019-01-25 02:21:35	iqubic	>  take -1 3 [1..]
2019-01-25 02:21:37	lambdabot	 <Int -> [Integer] -> [Integer]>
2019-01-25 02:21:41	iqubic	Huh???
2019-01-25 02:21:44	 *	ski smiles
2019-01-25 02:21:54	dmwit	hehehehe
2019-01-25 02:22:16	dmwit	Wow, that's a really diabolical result.
2019-01-25 02:22:26	iqubic	Is there just one orphan instance (Num a => Num [a]) here or not?
2019-01-25 02:22:39	dmwit	Can you think of a test that would help you answer that?
2019-01-25 02:22:48	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-25 02:22:52	iqubic	:info [a]
2019-01-25 02:23:01	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 02:23:03	-->	amar (~amar@107.152.104.211) has joined #haskell
2019-01-25 02:23:12	iqubic	oh... lambdabot does't repond to that.
2019-01-25 02:23:12	dmwit	Ah. \bot doesn't support that, but I'd be willing to prepare yahb for this trick so that you can use :info. One moment.
2019-01-25 02:23:13	ski	@undo [a]
2019-01-25 02:23:13	lambdabot	[a]
2019-01-25 02:23:20	<--	nan` (~nan`@cpe-75-86-97-30.wi.res.rr.com) has quit (Ping timeout: 245 seconds)
2019-01-25 02:23:26	--	amar is now known as Guest41807
2019-01-25 02:23:43	iqubic	You don't need to prepare yahb for that.
2019-01-25 02:24:09	iqubic	@undo "hello"
2019-01-25 02:24:09	lambdabot	"hello"
2019-01-25 02:24:27	iqubic	@undo Just 2
2019-01-25 02:24:27	lambdabot	Just 2
2019-01-25 02:24:30	dmwit	% let f = take -1 in f 3 [1..]
2019-01-25 02:24:31	yahb	dmwit: [0,1,2]
2019-01-25 02:24:35	dmwit	% :info [a]
2019-01-25 02:24:35	yahb	dmwit: ; <interactive>:1:2: error: parse error on input `a'
2019-01-25 02:24:41	dmwit	% :info []
2019-01-25 02:24:44	yahb	dmwit: data [] a = [] | a : [a] -- Defined in `GHC.Types'; instance [safe] Num a => Num [a] -- Defined at <interactive>:22:10; instance Alternative [] -- Defined in `GHC.Base'; instance Applicative [] -- Defined in `GHC.Base'; instance Eq a => Eq [a] -- Defined in `GHC.Classes'; instance Functor [] -- Defined in `GHC.Base'; instance Monad [] -- Defined in `GHC.Base'; instance MonadPlus [] -- Defined in `GHC.Ba
2019-01-25 02:24:58	-->	jhaj (~jhaj@193.108.177.207.dyn.southslope.net) has joined #haskell
2019-01-25 02:25:00	iqubic	Looks like it cuts off before the interesting bits.
2019-01-25 02:25:03	dmwit	I think there's also %% to get the full output pasted online and a link sent to the channel.
2019-01-25 02:25:05	iqubic	Curses...
2019-01-25 02:25:11	-->	jao (~jao@pdpc/supporter/professional/jao) has joined #haskell
2019-01-25 02:25:12	dmwit	%% :info []
2019-01-25 02:25:12	yahb	dmwit: http://qp.mniip.com/y/53
2019-01-25 02:25:27	-->	slackcals (~slackcals@unaffiliated/slackcals) has joined #haskell
2019-01-25 02:26:20	-->	Welkin (~Welkin@047-227-169-219.res.spectrum.com) has joined #haskell
2019-01-25 02:26:56	-->	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has joined #haskell
2019-01-25 02:27:20	dmwit	%% :info Num
2019-01-25 02:27:20	-->	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has joined #haskell
2019-01-25 02:27:20	yahb	dmwit: http://qp.mniip.com/y/54
2019-01-25 02:27:25	dmwit	hint ^
2019-01-25 02:27:28	ski	@undo do ()
2019-01-25 02:27:28	lambdabot	()
2019-01-25 02:27:30	<--	Guest41807 (~amar@107.152.104.211) has quit (Ping timeout: 245 seconds)
2019-01-25 02:27:39	ski	@undo do x <- act; cont x
2019-01-25 02:27:39	-->	nan` (~nan`@cpe-75-86-97-30.wi.res.rr.com) has joined #haskell
2019-01-25 02:27:39	lambdabot	act >>= \ x -> cont x
2019-01-25 02:27:40	-->	dpyro (~dpyro@66-169-160-49.dhcp.ftwo.tx.charter.com) has joined #haskell
2019-01-25 02:27:44	-->	iqubic_ (a4747e96@gateway/web/freenode/ip.164.116.126.150) has joined #haskell
2019-01-25 02:27:54	nshepperd1	> take -_ 3 [1..]
2019-01-25 02:27:56	lambdabot	 error:
2019-01-25 02:27:57	lambdabot	     • Found hole: _ :: Integer -> [Integer] -> Int -> [a] -> [a]
2019-01-25 02:27:57	lambdabot	       Where: ‘a’ is a rigid type variable bound by
2019-01-25 02:28:00	ski	@undo [f x | x <- list,test x]
2019-01-25 02:28:00	lambdabot	concatMap (\ x -> if test x then [f x] else []) list
2019-01-25 02:28:08	iqubic_	> [1,2,3] - [1,2,3]
2019-01-25 02:28:10	lambdabot	 [0,0,0]
2019-01-25 02:28:16	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 02:28:18	iqubic_	I see. That makes sense.
2019-01-25 02:28:27	iqubic_	> 1 :: Num [a]
2019-01-25 02:28:28	ski	iqubic_ : that's what `undo' does
2019-01-25 02:28:29	lambdabot	 error:
2019-01-25 02:28:30	lambdabot	     • Expected a type, but ‘Num [a]’ has kind ‘Constraint’
2019-01-25 02:28:30	lambdabot	     • In an expression type signature: Num [a]
2019-01-25 02:28:34	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 02:28:42	iqubic_	ski: what does undo do?
2019-01-25 02:28:48	ski	(sometimes people try `@info ...', but that gets spellcorrected to `@undo ...')
2019-01-25 02:29:03	ski	iqubic_ : remove syntactic sugar of `do', and also list comprehensions
2019-01-25 02:29:11	iqubic_	I see. Makes sense.
2019-01-25 02:29:26	ski	@help undo
2019-01-25 02:29:27	lambdabot	undo <expr>
2019-01-25 02:29:27	lambdabot	Translate do notation to Monad operators.
2019-01-25 02:29:27	iqubic_	So what is the trick to this nonsensical stuff?
2019-01-25 02:29:36	dmwit	iqubic_: Did you check out my hint above?
2019-01-25 02:29:46	<--	totte (~totte@chakra/totte) has quit (Quit: Quit!)
2019-01-25 02:29:48	<--	iqubic (a4747e96@gateway/web/freenode/ip.164.116.126.150) has quit (Ping timeout: 256 seconds)
2019-01-25 02:29:55	dmwit	http://qp.mniip.com/y/54 <- it's here
2019-01-25 02:30:03	-->	replay (~replay@pdpc/supporter/student/replay) has joined #haskell
2019-01-25 02:30:18	iqubic_	Oh, yeah... I can't view that yet, as my school wifi blocks that site for some reason.
2019-01-25 02:30:22	--	iqubic_ is now known as iqubic
2019-01-25 02:30:48	dmwit	% :info Num
2019-01-25 02:30:48	yahb	dmwit: class Num a where; (+) :: a -> a -> a; (-) :: a -> a -> a; (*) :: a -> a -> a; negate :: a -> a; abs :: a -> a; signum :: a -> a; fromInteger :: Integer -> a; {-# MINIMAL (+), (*), abs, signum, fromInteger, (negate | (-)) #-}; -- Defined in `GHC.Num'; instance [safe] Num a => Num [a] -- Defined at <interactive>:22:10; instance [safe] Num b => Num (a -> b) -- Defined at <interactive>:23:10
2019-01-25 02:31:03	dmwit	The important bits of the hint are already in this initial snippet. =P
2019-01-25 02:31:26	iqubic	OH??!?! You did some really interesting things there.
2019-01-25 02:31:36	<--	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has quit (Ping timeout: 244 seconds)
2019-01-25 02:31:46	iqubic	:t take -1
2019-01-25 02:31:47	lambdabot	Num a => Int -> [a] -> [a]
2019-01-25 02:32:05	<--	nan` (~nan`@cpe-75-86-97-30.wi.res.rr.com) has quit (Ping timeout: 245 seconds)
2019-01-25 02:32:27	dmwit	gotta run
2019-01-25 02:32:34	nshepperd1	> -1
2019-01-25 02:32:36	lambdabot	 -1
2019-01-25 02:32:40	iqubic	I'm so close to figuring this out.
2019-01-25 02:32:48	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-25 02:32:54	nshepperd1	Oh, disappoint
2019-01-25 02:33:03	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 02:33:05	dmwit	One more hint:
2019-01-25 02:33:08	iqubic	What was the initial thing we were exploring?
2019-01-25 02:33:23	ski	> let f = take -1 in f 3 [1..]
2019-01-25 02:33:25	lambdabot	 [0,1,2]
2019-01-25 02:33:35	dmwit	> ((3) (-1), 3 -1, (-) 3 1)
2019-01-25 02:33:37	lambdabot	 (3,2,2)
2019-01-25 02:33:48	iqubic	> (take -1) 3 [1..]
2019-01-25 02:33:51	lambdabot	 [0,1,2]
2019-01-25 02:33:54	iqubic	I see.
2019-01-25 02:34:01	iqubic	Getting there.
2019-01-25 02:34:04	 *	hackage modularity 0.2.1.0 - Find the modularity of a network.  https://hackage.haskell.org/package/modularity-0.2.1.0 (GregorySchwartz)
2019-01-25 02:34:10	-->	niklasl (~niklasl@c83-253-14-109.bredband.comhem.se) has joined #haskell
2019-01-25 02:34:21	iqubic	> (subtract take 1) 3 [1..]
2019-01-25 02:34:23	lambdabot	 [0,-1,-2]
2019-01-25 02:34:54	<--	abhixec (~abhixec@c-24-130-65-112.hsd1.ca.comcast.net) has quit (Ping timeout: 250 seconds)
2019-01-25 02:35:01	iqubic	> (subtract 1 take) 3 [1..] -- (take - 1) 3 [1..]
2019-01-25 02:35:04	lambdabot	 [0,1,2]
2019-01-25 02:37:42	iqubic	(f - n) == \x -> f x - n
2019-01-25 02:38:06	slackcals	Could someone please help me out:  https://gist.github.com/slackcals/0054247ce41edd0aef500dbb8cd3d83d
2019-01-25 02:38:16	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 02:38:20	<--	kitl_ (~kitlangto@198-27-223-170.fiber.dynamic.sonic.net) has quit (Ping timeout: 245 seconds)
2019-01-25 02:38:25	iqubic	I now understand what is going on there.
2019-01-25 02:38:28	slackcals	I am having a hard time understanding where the use of "when" is incorrect
2019-01-25 02:38:33	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 02:38:48	wroathe	Is there an idiom for naming functions that either produce the expected value or fails as part of a libraries API?
2019-01-25 02:39:03	iqubic	slackcals: Add the line `import Control.Monad` to the top of your file.
2019-01-25 02:39:17	wroathe	I see Maybe and Either being used for error handling, but I also want a "this might blow up your program" set of functions
2019-01-25 02:39:18	Welkin	wroathe: it's encoded in the type
2019-01-25 02:39:24	ski	slackcals : did you use `return' inside `when' ?
2019-01-25 02:39:35	Welkin	if it raises exceptions, it is not in the type though
2019-01-25 02:40:09	iqubic	Guys... It can't find the function that's trying to be run.
2019-01-25 02:40:09	Welkin	functions prefixed with `unsafe` break referential transparency
2019-01-25 02:40:56	slackcals	iqubic: I'm really embarrassed now.  Thank you, much!
2019-01-25 02:41:17	iqubic	The type of when that GHC is looking for matches the type when in hoogle.
2019-01-25 02:41:42	wroathe	For instance, it's a common pattern for a function that could fail to produce a result to wrap it in a Maybe, like "lookup" in Prelude. 
2019-01-25 02:42:13	iqubic	in XMonad, X is a monad. As the name kinda suggests.
2019-01-25 02:42:21	wroathe	But in some cases I think it can make sense to say "if you don't want to handle the case analysis after calling me function, you can accept the risks that if this fails it'll nuke everything"
2019-01-25 02:42:30	-->	byorgey (~byorgey@209.65.56.40) has joined #haskell
2019-01-25 02:42:30	<--	byorgey (~byorgey@209.65.56.40) has quit (Changing host)
2019-01-25 02:42:30	-->	byorgey (~byorgey@haskell/developer/byorgey) has joined #haskell
2019-01-25 02:42:48	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-25 02:43:03	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 02:43:14	iqubic	ski: He doesn't need `return` because the type that GHC assumes `when` should have is correct for `when` He just needed to import Control.Monad
2019-01-25 02:43:57	ski	iqubic : some people mistakenly assume that `when (...) $ do return (...)' will abort their `do'-block
2019-01-25 02:44:20	iqubic	I see. I don't think that was the issue here.
2019-01-25 02:44:30	-->	kipras (~Kipras@78-58-153-109.static.zebra.lt) has joined #haskell
2019-01-25 02:44:31	ski	it looks like it wasn't, true
2019-01-25 02:45:11	iqubic	I suggested my fix, and then he thanked me for my suggestion.
2019-01-25 02:46:06	-->	abhixec (~abhixec@c-24-130-65-112.hsd1.ca.comcast.net) has joined #haskell
2019-01-25 02:46:23	slackcals	just for clarity/confirmation... importing Control.Monad resolved my problem
2019-01-25 02:46:30	-->	ltchen (~ltchen@host-92-30-204-54.as13285.net) has joined #haskell
2019-01-25 02:46:39	slackcals	thank you all!
2019-01-25 02:47:44	-->	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has joined #haskell
2019-01-25 02:48:21	<--	lambdaman (~lambdaman@74.203.208.2) has quit (Remote host closed the connection)
2019-01-25 02:48:32	-->	lambdaman (~lambdaman@con08-vpn.calabrio.com) has joined #haskell
2019-01-25 02:49:03	<--	lambdaman (~lambdaman@con08-vpn.calabrio.com) has quit (Remote host closed the connection)
2019-01-25 02:49:35	-->	Zvpun (~Micha@92.117.40.94) has joined #haskell
2019-01-25 02:50:46	<--	abhixec (~abhixec@c-24-130-65-112.hsd1.ca.comcast.net) has quit (Ping timeout: 268 seconds)
2019-01-25 02:50:47	-->	lambdaman (~lambdaman@test-vpn.calabrio.com) has joined #haskell
2019-01-25 02:51:16	<--	hellozee (~hellozee@116.73.35.201) has quit (Remote host closed the connection)
2019-01-25 02:52:08	-->	errst (~errst@5.24.215.113) has joined #haskell
2019-01-25 02:52:14	<--	ltchen (~ltchen@host-92-30-204-54.as13285.net) has quit (Ping timeout: 250 seconds)
2019-01-25 02:52:30	<--	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has quit (Ping timeout: 245 seconds)
2019-01-25 02:53:19	-->	binq (~binq@99.156.186.141) has joined #haskell
2019-01-25 02:53:45	-->	zachk (~zachk@pool-108-26-37-159.syrcny.east.verizon.net) has joined #haskell
2019-01-25 02:54:11	<--	lambdaman (~lambdaman@test-vpn.calabrio.com) has quit (Remote host closed the connection)
2019-01-25 02:54:17	-->	lambdaman (~lambdaman@con08-vpn.calabrio.com) has joined #haskell
2019-01-25 02:54:24	<--	alx741 (~alx741@186.178.110.40) has quit (Ping timeout: 240 seconds)
2019-01-25 02:54:40	<--	lambdaman (~lambdaman@con08-vpn.calabrio.com) has quit (Remote host closed the connection)
2019-01-25 02:55:16	<--	ph88 (~ph88@a79-169-57-95.cpe.netcabo.pt) has quit (Remote host closed the connection)
2019-01-25 02:55:22	-->	nan` (~nan`@cpe-70-94-240-12.new.res.rr.com) has joined #haskell
2019-01-25 02:55:32	wroathe	So I have another function with a polymorphic return type, where there's a finite number of instances that that return type could be. A sort of "closed" class of types. Is there a better way of modeling this than just using regular old typeclasses and asking users to be on their best behavior?
2019-01-25 02:55:52	wroathe	Is this what type families are for?
2019-01-25 02:56:50	<--	milanj (~milan@cable-89-216-113-198.static.sbb.rs) has quit (Quit: This computer has gone to sleep)
2019-01-25 02:57:39	nbloomf	does it make sense to wrap the closed family behind an algebraic type?
2019-01-25 02:57:56	wroathe	I don't think so
2019-01-25 02:58:06	-->	nshepperd (~nshepperd@193.148.18.211) has joined #haskell
2019-01-25 02:58:07	<--	osa1 (~omer@haskell/developer/osa1) has quit (Remote host closed the connection)
2019-01-25 02:58:07	Welkin	always start wit the simplest solution, which is using basic ADTs, not typeclasses
2019-01-25 02:58:09	wroathe	Basically think something like "read" from prelude with a constrained set of "a"s
2019-01-25 02:58:14	<--	MiniCow (~MiniCow@46.233.78.20) has quit (Quit: MiniCow)
2019-01-25 02:58:16	Welkin	if you need more flexibility, then look into using typeclasses
2019-01-25 02:58:55	wroathe	Well, I suppose read already has a constrained set of As
2019-01-25 02:58:59	wroathe	"a"s
2019-01-25 02:59:07	wroathe	In the sense that the types need to be instances of Read
2019-01-25 02:59:23	wroathe	So the approach base uses is typeclasses for this
2019-01-25 02:59:40	wroathe	I guess I'm asking if there's a competing "better" way of doing this
2019-01-25 03:01:55	-->	lambdaman (~lambdaman@tst-vpn.calabrio.com) has joined #haskell
2019-01-25 03:02:25	cocreature	make a sumtype of all the options that you can return and use that
2019-01-25 03:02:59	<--	Lycurgus (~niemand@cpe-45-46-138-162.buffalo.res.rr.com) has quit (Quit: Exeunt)
2019-01-25 03:03:44	<--	yyy (~yyy@unaffiliated/tinnotl) has quit (Ping timeout: 268 seconds)
2019-01-25 03:05:20	<--	ngyj (~ngyj@2a02:2788:1008:17c::3) has quit (Quit: ngyj)
2019-01-25 03:05:32	nbloomf	trying to think of a way to use a phantom type parameter to do this
2019-01-25 03:05:33	-->	totte (~totte@chakra/totte) has joined #haskell
2019-01-25 03:05:37	-->	ngyj (~ngyj@2a02:2788:1008:17c::3) has joined #haskell
2019-01-25 03:05:52	-->	michaels_ (~michaelsd@38.126.31.226) has joined #haskell
2019-01-25 03:06:08	-->	merijn (~merijn@a212-238-239-156.adsl.xs4all.nl) has joined #haskell
2019-01-25 03:08:09	-->	alx741 (~alx741@181.196.68.162) has joined #haskell
2019-01-25 03:08:33	-->	kitl_ (~kitlangto@198-27-223-170.fiber.dynamic.sonic.net) has joined #haskell
2019-01-25 03:08:40	-->	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has joined #haskell
2019-01-25 03:08:46	-->	ocramz (~user@host-78-79-61-36.mobileonline.telia.com) has joined #haskell
2019-01-25 03:08:50	wroathe	Basically what I have is a hashmap that contains Aeson "Values"
2019-01-25 03:09:04	wroathe	Which is a sum type for modeling JSON data (and other serializable things)
2019-01-25 03:09:10	<--	michaelsdunn1 (~michaelsd@unaffiliated/michaelsdunn1) has quit (Ping timeout: 245 seconds)
2019-01-25 03:09:29	wroathe	And I want to provide a function to look up a value in that hashmap and and convert it to the desired "simple" type
2019-01-25 03:09:39	-->	MiniCow (~MiniCow@78.17.187.81.in-addr.arpa) has joined #haskell
2019-01-25 03:10:04	<--	MiniCow (~MiniCow@78.17.187.81.in-addr.arpa) has quit (Client Quit)
2019-01-25 03:10:14	wroathe	i.e. MyMap -> a where a could be one of Float, Double, Int, Bool, String
2019-01-25 03:10:35	Zvpun	Hey, I have a performance problem. My program generates lots of configurations and needs to check them, but I was hoping for lazyness. It seems I was wrong. Here is the source: https://pastebin.com/raw/ET1ta9BB and here is a profiler result https://pastebin.com/raw/qCm1uY5U
2019-01-25 03:10:37	cocreature	what should happen if it cannot be converted to that type?
2019-01-25 03:10:45	wroathe	It blows up, but that's documented as part of the API
2019-01-25 03:10:56	wroathe	It's for converting configuration
2019-01-25 03:11:17	cocreature	documenting that your API blows up doesn’t make it a good API :)
2019-01-25 03:11:27	wroathe	cocreature: :P Read my earlier message
2019-01-25 03:11:36	wroathe	I'm going to provide Either and Maybe versions of the same function
2019-01-25 03:11:51	wroathe	But being that it's configuration state, if a user says something like:
2019-01-25 03:12:03	wroathe	get "db.connString" config
2019-01-25 03:12:11	-->	comerijn (~merijn@a212-238-239-156.adsl.xs4all.nl) has joined #haskell
2019-01-25 03:12:19	wroathe	and connString wasn't present in any of their configuration
2019-01-25 03:12:23	<--	al-damiri (uid142631@gateway/web/irccloud.com/x-toffsoovmrwldosa) has quit (Quit: Connection closed for inactivity)
2019-01-25 03:12:27	wroathe	I think it's fair that say that that can explode
2019-01-25 03:12:39	wroathe	If they want to do case analysis, there will be a getMaybe and a getEither
2019-01-25 03:12:45	Welkin	just use an external (json) document store
2019-01-25 03:12:52	Welkin	they already provide a query interface
2019-01-25 03:13:28	<--	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has quit (Ping timeout: 250 seconds)
2019-01-25 03:13:38	-->	agander (~agander@185.128.27.100) has joined #haskell
2019-01-25 03:13:56	wroathe	Ima just use a typeclass
2019-01-25 03:14:04	cocreature	wroathe: it usually makes more sense to have the individual calls return something like "Either String …", then batch all calls that read the documentation together in one do block and then decide how you handle the combined failure (and leave that up to the users, if they want to blow up that’s easy enough to do)
2019-01-25 03:14:24	cocreature	there is already a typeclass for this: FromJSON
2019-01-25 03:14:40	wroathe	cocreature: Yup, that's why there will be a getEither
2019-01-25 03:15:30	wroathe	And yeah, I'm making FromJSON the superclass
2019-01-25 03:15:43	cocreature	why do you need another typeclass instead of using FromJSON directly?
2019-01-25 03:15:57	cocreature	and I’d strongly advise to make "get" the safe version and then have a getUnsafe if you really want to
2019-01-25 03:16:24	<--	comerijn (~merijn@a212-238-239-156.adsl.xs4all.nl) has quit (Ping timeout: 240 seconds)
2019-01-25 03:17:06	wroathe	Because I don't consider all of the instances of FromJSON to be valid instances for my thing
2019-01-25 03:17:31	wroathe	That could change though, but for now Ima do it this way
2019-01-25 03:17:38	wroathe	And yeah, I'll think about the getUnsafe thing. Thanks!
2019-01-25 03:19:01	cocreature	it kind of sounds like you are artifically restricting things by not using FromJSON. unless you have a good reason for that, there is usually little reason to do that
2019-01-25 03:19:10	<--	aware (~aware@rrcs-98-6-17-170.sw.biz.rr.com) has quit (Ping timeout: 245 seconds)
2019-01-25 03:19:19	<--	nbloomf (~nbloomf@2600:1700:83e0:1f40:6d74:a91e:18fc:6759) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-25 03:19:32	cocreature	eh that’s a tautology but hopefully you get my point :)
2019-01-25 03:19:44	cocreature	don’t restrict your API if it doesn’t provide a benefit
2019-01-25 03:21:23	<--	codesoup (~codesoup@2607:fea8:e21f:fea0:1948:e82c:1a73:3d92) has quit (Ping timeout: 240 seconds)
2019-01-25 03:22:08	<--	keepLearning512 (~keepLearn@106.51.31.245) has quit (Remote host closed the connection)
2019-01-25 03:22:23	<--	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has quit (Remote host closed the connection)
2019-01-25 03:23:32	-->	marco_t (~marco_t@181.231.118.54) has joined #haskell
2019-01-25 03:25:13	--	wrengr_away is now known as wrengr
2019-01-25 03:25:48	-->	kakadu_ (~kakadu@217.71.235.234) has joined #haskell
2019-01-25 03:26:33	-->	ph88 (~ph88@a79-169-57-95.cpe.netcabo.pt) has joined #haskell
2019-01-25 03:27:29	-->	pie_ (~pie_@unaffiliated/pie-/x-0787662) has joined #haskell
2019-01-25 03:28:11	<--	Sk01 (~sky3@92.44.30.64) has quit (Ping timeout: 250 seconds)
2019-01-25 03:28:13	-->	codesoup (~codesoup@174.119.180.211) has joined #haskell
2019-01-25 03:28:39	-->	SSS (d181f121@gateway/web/freenode/ip.209.129.241.33) has joined #haskell
2019-01-25 03:29:29	-->	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has joined #haskell
2019-01-25 03:29:29	<--	pie__ (~pie_@unaffiliated/pie-/x-0787662) has quit (Ping timeout: 250 seconds)
2019-01-25 03:29:47	<--	errst (~errst@5.24.215.113) has quit (Read error: Connection reset by peer)
2019-01-25 03:33:59	<--	dale (~dale@unaffiliated/dale) has quit (Quit: dale)
2019-01-25 03:34:10	<--	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has quit (Ping timeout: 245 seconds)
2019-01-25 03:35:09	-->	bbrodriguez (~Bender_Be@200.57.253.173) has joined #haskell
2019-01-25 03:35:18	-->	xrexeon (~xrexeon@41.237.99.188) has joined #haskell
2019-01-25 03:35:19	-->	dale (~dale@unaffiliated/dale) has joined #haskell
2019-01-25 03:35:28	<--	alyptik (ayy@cpe-76-173-133-37.hawaii.res.rr.com) has quit (Ping timeout: 272 seconds)
2019-01-25 03:35:38	<--	xrexeon (~xrexeon@41.237.99.188) has quit (Max SendQ exceeded)
2019-01-25 03:36:00	-->	yyy (~yyy@unaffiliated/tinnotl) has joined #haskell
2019-01-25 03:36:51	-->	pie__ (~pie_@unaffiliated/pie-/x-0787662) has joined #haskell
2019-01-25 03:36:58	-->	pfurla (~pfurla@177.142.249.84) has joined #haskell
2019-01-25 03:36:58	-->	xrexeon (~xrexeon@41.237.99.188) has joined #haskell
2019-01-25 03:37:14	<--	xrexeon (~xrexeon@41.237.99.188) has quit (Client Quit)
2019-01-25 03:37:29	-->	xrexeon (~xrexeon@41.237.99.188) has joined #haskell
2019-01-25 03:37:39	-->	freeman42x (~freeman42@2a02:8084:e81:9580:2048:8d29:3540:2004) has joined #haskell
2019-01-25 03:37:45	<--	xrexeon (~xrexeon@41.237.99.188) has quit (Max SendQ exceeded)
2019-01-25 03:38:10	<--	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has quit (Remote host closed the connection)
2019-01-25 03:38:13	-->	xrexeon (~xrexeon@41.237.99.188) has joined #haskell
2019-01-25 03:38:17	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 03:38:20	<--	xrexeon (~xrexeon@41.237.99.188) has quit (Max SendQ exceeded)
2019-01-25 03:38:33	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 03:38:54	-->	xrexeon (~xrexeon@41.237.99.188) has joined #haskell
2019-01-25 03:39:02	<--	xrexeon (~xrexeon@41.237.99.188) has quit (Max SendQ exceeded)
2019-01-25 03:39:04	<--	pfurla_ (~pfurla@ec2-18-208-170-161.compute-1.amazonaws.com) has quit (Ping timeout: 240 seconds)
2019-01-25 03:39:35	-->	xrexeon (~xrexeon@41.237.99.188) has joined #haskell
2019-01-25 03:39:51	-->	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has joined #haskell
2019-01-25 03:40:06	<--	pie_ (~pie_@unaffiliated/pie-/x-0787662) has quit (Ping timeout: 268 seconds)
2019-01-25 03:41:32	-->	pie___ (~pie_@unaffiliated/pie-/x-0787662) has joined #haskell
2019-01-25 03:41:55	-->	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has joined #haskell
2019-01-25 03:42:30	<--	bbrodriguez (~Bender_Be@200.57.253.173) has quit (Ping timeout: 250 seconds)
2019-01-25 03:42:48	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-25 03:42:51	<--	ocramz (~user@host-78-79-61-36.mobileonline.telia.com) has left #haskell ("ERC (IRC client for Emacs 24.5.1)")
2019-01-25 03:43:05	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 03:43:08	-->	aplainzetakind (~dk@2E8BD6FE.catv.pool.telekom.hu) has joined #haskell
2019-01-25 03:43:13	-->	BartAdv (uid90451@gateway/web/irccloud.com/x-pyrgrojmluxpnbne) has joined #haskell
2019-01-25 03:43:23	<--	Zvpun (~Micha@92.117.40.94) has quit (Quit: leaving)
2019-01-25 03:43:48	<--	juri_ (~juri@205.166.94.162) has quit (Ping timeout: 250 seconds)
2019-01-25 03:44:10	<--	pie__ (~pie_@unaffiliated/pie-/x-0787662) has quit (Ping timeout: 245 seconds)
2019-01-25 03:45:09	-->	sonofentropy (~k@84-10-10-170.static.chello.pl) has joined #haskell
2019-01-25 03:46:21	-->	rblaze (~Adium@2620:10d:c091:200::7:cec7) has joined #haskell
2019-01-25 03:46:23	<--	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has quit (Ping timeout: 240 seconds)
2019-01-25 03:48:39	-->	juri_ (~juri@205.166.94.162) has joined #haskell
2019-01-25 03:49:35	<--	lambdaman (~lambdaman@tst-vpn.calabrio.com) has quit (Remote host closed the connection)
2019-01-25 03:50:22	-->	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has joined #haskell
2019-01-25 03:50:53	<--	kitl_ (~kitlangto@198-27-223-170.fiber.dynamic.sonic.net) has quit (Ping timeout: 240 seconds)
2019-01-25 03:51:27	<--	obihann (~obihann@156.57.171.145) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-25 03:51:40	<--	caryoscelus_ (~caryoscel@176.195.43.43) has quit (Ping timeout: 245 seconds)
2019-01-25 03:53:47	-->	russruss (~russruss@138.197.24.158) has joined #haskell
2019-01-25 03:54:03	-->	eschnett_ (~eschnett@66.97.27.10) has joined #haskell
2019-01-25 03:54:04	<--	hamishmack (~textual@121-73-30-206.cable.telstraclear.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-25 03:54:45	-->	lambdaman (~lambdaman@tst-vpn.calabrio.com) has joined #haskell
2019-01-25 03:54:53	<--	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has quit (Ping timeout: 240 seconds)
2019-01-25 03:55:48	-->	NoidedSuper (~asuper@174-16-57-4.hlrn.qwest.net) has joined #haskell
2019-01-25 03:58:54	-->	pie_ (~pie_@unaffiliated/pie-/x-0787662) has joined #haskell
2019-01-25 03:59:04	 *	hackage hakyll-images 0.4.2 - Hakyll utilities to work with images  https://hackage.haskell.org/package/hakyll-images-0.4.2 (LaurentRDC)
2019-01-25 03:59:10	<--	ianandrich (~ianandric@c-73-223-61-224.hsd1.ca.comcast.net) has quit (Ping timeout: 245 seconds)
2019-01-25 03:59:24	-->	Sk01 (~sky3@92.44.30.64) has joined #haskell
2019-01-25 04:00:19	-->	kakadu__ (~kakadu@217.71.235.234) has joined #haskell
2019-01-25 04:00:23	<--	kakadu_ (~kakadu@217.71.235.234) has quit (Ping timeout: 240 seconds)
2019-01-25 04:00:28	<--	eschnett_ (~eschnett@66.97.27.10) has quit (Ping timeout: 244 seconds)
2019-01-25 04:00:30	<--	iqubic (a4747e96@gateway/web/freenode/ip.164.116.126.150) has quit (Quit: Page closed)
2019-01-25 04:00:38	-->	nbloomf (~nbloomf@2600:1700:83e0:1f40:6d74:a91e:18fc:6759) has joined #haskell
2019-01-25 04:00:53	<--	pie___ (~pie_@unaffiliated/pie-/x-0787662) has quit (Ping timeout: 240 seconds)
2019-01-25 04:01:08	-->	chaosmasttter (~chaosmast@p548B1108.dip0.t-ipconnect.de) has joined #haskell
2019-01-25 04:01:23	-->	Good-Luck-007 (~Good-Luck@c-843070d5.036-308-73746f28.bbcust.telenor.se) has joined #haskell
2019-01-25 04:01:25	Good-Luck-007	pastebin.com*G5Jqrd2S - new ctf gl
2019-01-25 04:01:48	<--	fendor (uid281290@gateway/web/irccloud.com/x-avcfcxxiosnrpaln) has quit (Quit: Connection closed for inactivity)
2019-01-25 04:03:00	-->	marxS (~marxS@host-89-241-184-68.as13285.net) has joined #haskell
2019-01-25 04:03:30	<--	HarveyPwca (~HarveyPwc@ip-64-134-172-208.public.wayport.net) has quit (Quit: Leaving)
2019-01-25 04:03:32	<--	Good-Luck-007 (~Good-Luck@c-843070d5.036-308-73746f28.bbcust.telenor.se) has left #haskell
2019-01-25 04:05:00	-->	pie__ (~pie_@unaffiliated/pie-/x-0787662) has joined #haskell
2019-01-25 04:05:16	-->	um1b0zu (~um1@38.88.168.107) has joined #haskell
2019-01-25 04:05:39	-->	_kwstas (~konstanti@ppp079166100013.access.hol.gr) has joined #haskell
2019-01-25 04:05:51	<--	megaTherion (~therion@unix.io) has quit (Ping timeout: 264 seconds)
2019-01-25 04:07:24	<--	pie_ (~pie_@unaffiliated/pie-/x-0787662) has quit (Ping timeout: 240 seconds)
2019-01-25 04:07:25	-->	ltchen (~ltchen@host-92-30-204-54.as13285.net) has joined #haskell
2019-01-25 04:08:21	<--	Sk01 (~sky3@92.44.30.64) has quit (Ping timeout: 246 seconds)
2019-01-25 04:08:23	<--	TMA (tma@twin.jikos.cz) has quit (Ping timeout: 240 seconds)
2019-01-25 04:08:26	<--	binq (~binq@99.156.186.141) has quit (Remote host closed the connection)
2019-01-25 04:08:36	-->	TMA (tma@twin.jikos.cz) has joined #haskell
2019-01-25 04:08:39	-->	daishi (~daishi@23.226.128.22.adsl.inet-telecom.org) has joined #haskell
2019-01-25 04:08:52	<--	Aquazi (uid312403@gateway/web/irccloud.com/x-zrcvvtccpmfzwpfa) has quit (Quit: Connection closed for inactivity)
2019-01-25 04:09:21	<--	dsh (~daishi@23.226.128.22.adsl.inet-telecom.org) has quit (Ping timeout: 250 seconds)
2019-01-25 04:09:28	<--	wroathe (~wroathe@23-30-253-203-static.hfc.comcastbusiness.net) has quit (Read error: Connection reset by peer)
2019-01-25 04:10:20	<--	condy (~condy@unaffiliated/condy) has quit (Ping timeout: 268 seconds)
2019-01-25 04:10:45	-->	JuanMiguel (~juanmi@11.red-81-35-110.dynamicip.rima-tde.net) has joined #haskell
2019-01-25 04:11:12	-->	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has joined #haskell
2019-01-25 04:11:33	-->	condy (~condy@unaffiliated/condy) has joined #haskell
2019-01-25 04:11:37	<--	ltchen (~ltchen@host-92-30-204-54.as13285.net) has quit (Ping timeout: 246 seconds)
2019-01-25 04:12:12	-->	jbayardo (~jbayardo@2601:602:9802:93d6:1def:5762:3ec:6d51) has joined #haskell
2019-01-25 04:12:18	-->	doyougnu (doyougnu@128-193-154-26.ptpg.oregonstate.edu) has joined #haskell
2019-01-25 04:13:04	 *	hackage hierarchical-spectral-clustering 0.2.2.0 - Hierarchical spectral clustering of a graph.  https://hackage.haskell.org/package/hierarchical-spectral-clustering-0.2.2.0 (GregorySchwartz)
2019-01-25 04:13:17	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 04:13:23	-->	binq (~binq@99.156.186.141) has joined #haskell
2019-01-25 04:13:31	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 04:13:49	-->	dididit (~didgit@213.152.161.229) has joined #haskell
2019-01-25 04:14:13	<--	pierrot (~pi@unaffiliated/pierrot) has quit (Quit: Let us not forget that the perfect is also the enemy of the bad and the ugly.)
2019-01-25 04:14:43	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-25 04:14:48	-->	ltchen (~ltchen@host-92-30-204-54.as13285.net) has joined #haskell
2019-01-25 04:14:53	<--	pie__ (~pie_@unaffiliated/pie-/x-0787662) has quit (Ping timeout: 240 seconds)
2019-01-25 04:15:16	<--	dididit (~didgit@213.152.161.229) has left #haskell
2019-01-25 04:15:43	-->	libertyprime (~libertypr@66.87.69.111.dynamic.snap.net.nz) has joined #haskell
2019-01-25 04:15:53	<--	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has quit (Ping timeout: 240 seconds)
2019-01-25 04:16:23	<--	agander (~agander@185.128.27.100) has quit (Ping timeout: 240 seconds)
2019-01-25 04:16:28	-->	pierrot (~pi@unaffiliated/pierrot) has joined #haskell
2019-01-25 04:17:32	-->	agander (~agander@185.128.27.99) has joined #haskell
2019-01-25 04:17:52	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-25 04:18:06	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 04:19:01	<--	SSS (d181f121@gateway/web/freenode/ip.209.129.241.33) has quit (Quit: Page closed)
2019-01-25 04:19:18	<--	ninedotnine (~dan@45.74.75.23) has quit (Read error: Connection reset by peer)
2019-01-25 04:19:44	-->	binq_ (~binq@99.156.186.141) has joined #haskell
2019-01-25 04:20:18	infandum	Quick question: Why does -194.42441343872122 ** (-1/2) give an answer, but (\x -> x ** (-1/2)) $ -194.42441343872122 gives a NaN?
2019-01-25 04:20:28	-->	bbrodriguez (~Bender_Be@200.57.253.173) has joined #haskell
2019-01-25 04:20:30	-->	ninedotnine (~dan@45.74.78.11) has joined #haskell
2019-01-25 04:21:59	merijn	:t -194.42441343872122 ** (-1/2)
2019-01-25 04:22:01	lambdabot	Floating a => a
2019-01-25 04:22:11	merijn	infandum: I blame IEEE754
2019-01-25 04:22:46	ski	> -194.42441343872122 ** (-1/2)
2019-01-25 04:22:48	lambdabot	 -7.171741069714176e-2
2019-01-25 04:22:48	ski	> (-194.42441343872122) ** (-1/2)
2019-01-25 04:22:49	<--	binq (~binq@99.156.186.141) has quit (Ping timeout: 246 seconds)
2019-01-25 04:22:51	lambdabot	 NaN
2019-01-25 04:23:07	saml	> \ (x::Double) -> x ** (-1/2.0) $  -194.42441343872122
2019-01-25 04:23:09	lambdabot	 error:
2019-01-25 04:23:10	lambdabot	     • Couldn't match expected type ‘Double -> t’
2019-01-25 04:23:10	lambdabot	                   with actual type ‘Double’
2019-01-25 04:23:21	ski	brackets
2019-01-25 04:23:34	saml	> \x :: Double -> x ** (-1/2.0) $  -194.42441343872122
2019-01-25 04:23:36	lambdabot	 error:
2019-01-25 04:23:37	lambdabot	     Illegal result type signature ‘Double’
2019-01-25 04:23:37	lambdabot	       Result signatures are no longer supported in pattern matches
2019-01-25 04:23:43	-->	alyptik (ayy@cpe-76-173-133-37.hawaii.res.rr.com) has joined #haskell
2019-01-25 04:23:46	 *	ski sighs
2019-01-25 04:24:01	ski	> (\(x :: Double) -> x ** (-1/2.0)) (-194.42441343872122)
2019-01-25 04:24:03	lambdabot	 NaN
2019-01-25 04:24:34	saml	:t  (-194.42441343872122)
2019-01-25 04:24:35	-->	kitl_ (~kitlangto@198-27-223-170.fiber.dynamic.sonic.net) has joined #haskell
2019-01-25 04:24:35	lambdabot	Fractional a => a
2019-01-25 04:25:03	infandum	weird, right?
2019-01-25 04:25:16	<--	JuanMiguel (~juanmi@11.red-81-35-110.dynamicip.rima-tde.net) has quit (Quit: Saliendo)
2019-01-25 04:25:24	merijn	:t (**)
2019-01-25 04:25:26	lambdabot	Floating a => a -> a -> a
2019-01-25 04:25:27	infandum	Is there a solution?
2019-01-25 04:25:35	ski	solution to what ?
2019-01-25 04:25:37	saml	what's relationship between Fractional and Floating?
2019-01-25 04:26:00	ski	`Floating' is a subclass of `Fractional'
2019-01-25 04:26:15	<--	oisdk (~textual@86-45-6-241-dynamic.agg2.dyx.chf-qkr.eircom.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-25 04:26:25	-->	Sk01 (~sky3@92.44.30.64) has joined #haskell
2019-01-25 04:26:41	saml	a**b  where a < 0   and b < 0   is imaginary number?
2019-01-25 04:27:05	<--	rruizt (~rruizt@5354177C.cm-6-5a.dynamic.ziggo.nl) has quit (Ping timeout: 245 seconds)
2019-01-25 04:27:20	ski	> (-1) ** (-1/2) :: Complex Double
2019-01-25 04:27:23	lambdabot	 6.123233995736766e-17 :+ 1.0
2019-01-25 04:27:28	ski	> (-1) ** (-1/2) :: Double
2019-01-25 04:27:30	lambdabot	 NaN
2019-01-25 04:27:36	<--	bbrodriguez (~Bender_Be@200.57.253.173) has quit (Ping timeout: 246 seconds)
2019-01-25 04:27:48	ski	> (-1) ** (-1/3) :: Complex Double
2019-01-25 04:27:50	lambdabot	 0.5000000000000001 :+ 0.8660254037844386
2019-01-25 04:27:52	infandum	Is there a way to apply ** (-1/2) to numbers with no NaNs for ones that shouldn't have NaNs?
2019-01-25 04:28:44	ski	square root of negative real numbers will not be a real number
2019-01-25 04:28:51	-->	oisdk (~textual@2001:bb6:331c:dc58:9075:a084:1c8:e32a) has joined #haskell
2019-01-25 04:29:00	<--	pera (~pera@unaffiliated/pera) has quit (Ping timeout: 246 seconds)
2019-01-25 04:29:02	saml	infandum, you wanna get square root of x?
2019-01-25 04:29:14	saml	**(-1/2)  is same as square root, right?
2019-01-25 04:29:21	saml	oh what ski said
2019-01-25 04:29:48	ski	no, `(** 1/2)' is square root
2019-01-25 04:29:58	infandum	inverse square root
2019-01-25 04:30:02	ski	what you had was the inverse of the square root
2019-01-25 04:30:10	saml	ah wow math
2019-01-25 04:30:10	johnw	is there an easy way to submit additions to 'base', like GitHub PR level easy?
2019-01-25 04:30:45	-->	rruizt (~rruizt@5354177C.cm-6-5a.dynamic.ziggo.nl) has joined #haskell
2019-01-25 04:30:46	<--	supercoven_ (~quassel@dsl-hkibng42-5673cf-252.dhcp.inet.fi) has quit (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
2019-01-25 04:31:23	<--	doyougnu (doyougnu@128-193-154-26.ptpg.oregonstate.edu) has quit (Quit: WeeChat 2.2)
2019-01-25 04:31:42	-->	pie_ (~pie_@unaffiliated/pie-/x-0787662) has joined #haskell
2019-01-25 04:31:57	<--	davr0s (~textual@host109-155-92-146.range109-155.btcentralplus.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2019-01-25 04:32:05	-->	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has joined #haskell
2019-01-25 04:32:09	<--	ngyj (~ngyj@2a02:2788:1008:17c::3) has quit (Remote host closed the connection)
2019-01-25 04:32:14	<--	lambdaman (~lambdaman@tst-vpn.calabrio.com) has quit (Remote host closed the connection)
2019-01-25 04:32:30	<--	Sk01 (~sky3@92.44.30.64) has quit (Ping timeout: 246 seconds)
2019-01-25 04:32:30	-->	ngyj (~ngyj@2a02:2788:1008:17c::3) has joined #haskell
2019-01-25 04:32:55	-->	aware (~aware@rrcs-98-6-17-170.sw.biz.rr.com) has joined #haskell
2019-01-25 04:32:57	<--	binq_ (~binq@99.156.186.141) has quit (Remote host closed the connection)
2019-01-25 04:33:26	<--	gxt (~gxt@b2b-78-94-156-186.unitymedia.biz) has quit (Quit: WeeChat 2.3)
2019-01-25 04:33:30	utdemir[m]	johnw: AFAIK they accept simple contributions via GitHub PR's. I'm not sure a change in `base` counts as simple tho.  But at least if you open a PR, they'll help you to move it to their tool of choice (GitLab?). https://github.com/ghc/ghc/tree/master/libraries/base
2019-01-25 04:33:32	-->	davr0s (~textual@host109-155-92-146.range109-155.btcentralplus.com) has joined #haskell
2019-01-25 04:34:03	geekosaur	no; and base is core enough that all such are supposed to go through the core libraries committee and be discussed on their mailing list, unless it's e.g. a simple bug
2019-01-25 04:35:34	-->	doyougnu (doyougnu@128-193-154-26.ptpg.oregonstate.edu) has joined #haskell
2019-01-25 04:36:33	johnw	utdemir[m]: thanks, I just wanted to submit mapMaybeM
2019-01-25 04:36:42	<--	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has quit (Ping timeout: 246 seconds)
2019-01-25 04:36:46	-->	aarvar (~foewfoiew@50.35.43.250) has joined #haskell
2019-01-25 04:36:56	-->	hamishmack (~textual@cbdfree-gw.cbdfree.net.nz) has joined #haskell
2019-01-25 04:37:27	-->	amar_ (~amar@165.231.255.11) has joined #haskell
2019-01-25 04:37:38	<--	boeingx (~bysong@87-88-52-149.abo.bbox.fr) has quit (Quit: Konversation terminated!)
2019-01-25 04:39:24	-->	eof (~eof@static.170.252.47.78.clients.your-server.de) has joined #haskell
2019-01-25 04:40:37	-->	lambdaman (~lambdaman@demo-vpn.calabrio.com) has joined #haskell
2019-01-25 04:41:04	<--	chaosmasttter (~chaosmast@p548B1108.dip0.t-ipconnect.de) has quit (Ping timeout: 240 seconds)
2019-01-25 04:41:55	-->	pera (~pera@unaffiliated/pera) has joined #haskell
2019-01-25 04:42:19	<--	hamishmack (~textual@cbdfree-gw.cbdfree.net.nz) has quit (Ping timeout: 244 seconds)
2019-01-25 04:42:23	<--	amar_ (~amar@165.231.255.11) has quit (Ping timeout: 240 seconds)
2019-01-25 04:46:03	-->	reactormonk (~tass@185.183.106.180) has joined #haskell
2019-01-25 04:47:39	<--	knupfer (~Thunderbi@200116b82c73bd00f69634fffef0b45f.dip.versatel-1u1.de) has quit (Remote host closed the connection)
2019-01-25 04:48:03	-->	Sk01 (~sky3@92.44.30.64) has joined #haskell
2019-01-25 04:50:23	<--	oisdk (~textual@2001:bb6:331c:dc58:9075:a084:1c8:e32a) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-25 04:52:30	<--	Sk01 (~sky3@92.44.30.64) has quit (Ping timeout: 245 seconds)
2019-01-25 04:52:53	-->	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has joined #haskell
2019-01-25 04:55:44	<--	niklasl (~niklasl@c83-253-14-109.bredband.comhem.se) has quit (Ping timeout: 250 seconds)
2019-01-25 04:55:53	<--	nan` (~nan`@cpe-70-94-240-12.new.res.rr.com) has quit (Ping timeout: 240 seconds)
2019-01-25 04:56:10	<--	xrexeon (~xrexeon@41.237.99.188) has quit (Quit: leaving)
2019-01-25 04:56:25	-->	xrexeon (~xrexeon@41.237.99.188) has joined #haskell
2019-01-25 04:56:37	-->	knupfer (~Thunderbi@200116b82c73bd00f69634fffef0b45f.dip.versatel-1u1.de) has joined #haskell
2019-01-25 04:57:20	-->	Sk01 (~sky3@92.44.30.64) has joined #haskell
2019-01-25 04:57:24	<--	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has quit (Ping timeout: 240 seconds)
2019-01-25 04:57:44	saml	division isn't associative. but multiplication is. and you can turn division into floating point multiplication
2019-01-25 04:57:55	saml	does that mean i can turn non-monad to monad?
2019-01-25 04:58:13	-->	niklasl (~niklasl@c83-253-14-109.bredband.comhem.se) has joined #haskell
2019-01-25 04:58:40	Welkin	yes, using pure
2019-01-25 05:00:24	 *	ski doesn't see what multiplication has to do with monads, there
2019-01-25 05:00:43	<--	_kwstas (~konstanti@ppp079166100013.access.hol.gr) has quit (Quit: _kwstas)
2019-01-25 05:01:15	-->	chaosmasttter (~chaosmast@p548B1108.dip0.t-ipconnect.de) has joined #haskell
2019-01-25 05:01:32	johnw	i missed the leap too
2019-01-25 05:03:03	-->	gxt (~gxt@2a02:908:e851:4020:c0f4:2c66:8889:13da) has joined #haskell
2019-01-25 05:03:50	--	wrengr is now known as wrengr_away
2019-01-25 05:04:50	<--	cpup (~cpup@24-151-32-148.dhcp.nwtn.ct.charter.com) has quit (Quit: Breaking stuff)
2019-01-25 05:05:24	<--	Sk01 (~sky3@92.44.30.64) has quit (Ping timeout: 246 seconds)
2019-01-25 05:06:31	<--	zmt00 (~zmt00@2600:1700:7c00:8f20:7960:50c3:3ebb:8685) has quit (Read error: Connection reset by peer)
2019-01-25 05:06:58	-->	zmt00 (~zmt00@2600:1700:7c00:8f20:fced:33c4:4d37:c784) has joined #haskell
2019-01-25 05:07:39	-->	initiumdoeslinux (~initiumdo@31-208-64-89.cust.bredband2.com) has joined #haskell
2019-01-25 05:09:52	<--	davr0s (~textual@host109-155-92-146.range109-155.btcentralplus.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2019-01-25 05:10:03	-->	_kwstas (~konstanti@ppp079166100013.access.hol.gr) has joined #haskell
2019-01-25 05:11:28	c_wraith	multiplication forms a monoid. a monoid is a 1-element category. monads are kleisli categories.
2019-01-25 05:11:35	<--	ngyj (~ngyj@2a02:2788:1008:17c::3) has quit (Quit: ngyj)
2019-01-25 05:11:40	c_wraith	that almost leads up to a conclusion
2019-01-25 05:11:50	c_wraith	except it doesn't right at the end.
2019-01-25 05:12:15	-->	jneira (4f9c6c37@gateway/web/freenode/ip.79.156.108.55) has joined #haskell
2019-01-25 05:12:29	-->	cpup (~cpup@24-151-32-148.dhcp.nwtn.ct.charter.com) has joined #haskell
2019-01-25 05:12:34	 *	hackage spectral-clustering 0.2.2.2 - Library for spectral clustering.  https://hackage.haskell.org/package/spectral-clustering-0.2.2.2 (GregorySchwartz)
2019-01-25 05:12:37	<--	initiumdoeslinux (~initiumdo@31-208-64-89.cust.bredband2.com) has quit (Ping timeout: 268 seconds)
2019-01-25 05:12:42	johnw	the only general way to turn non-monads into monads that I know of, is using the Freer monad
2019-01-25 05:12:44	-->	zero_byte (~zer0@ip-94-112-199-190.net.upcbroadband.cz) has joined #haskell
2019-01-25 05:13:00	c_wraith	but I can see how one might trace the ideas to points right next to each other.
2019-01-25 05:13:00	johnw	or just Free, if it's at least a Functor
2019-01-25 05:13:44	-->	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has joined #haskell
2019-01-25 05:14:00	-->	bbrodriguez (~Bender_Be@200.57.253.173) has joined #haskell
2019-01-25 05:16:04	<--	o1lo01ol1o (~o1lo01ol1@207.251.80.226) has quit (Remote host closed the connection)
2019-01-25 05:16:48	<--	daishi (~daishi@23.226.128.22.adsl.inet-telecom.org) has quit (Quit: Leaving)
2019-01-25 05:18:20	<--	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has quit (Ping timeout: 245 seconds)
2019-01-25 05:19:33	-->	pie__ (~pie_@unaffiliated/pie-/x-0787662) has joined #haskell
2019-01-25 05:20:02	-->	o1lo01ol1o (~o1lo01ol1@207.251.80.226) has joined #haskell
2019-01-25 05:20:28	<--	agander (~agander@185.128.27.99) has quit (Quit: Leaving)
2019-01-25 05:20:50	<--	ystael (~ystael@50-199-243-61-static.hfc.comcastbusiness.net) has quit (Ping timeout: 245 seconds)
2019-01-25 05:21:44	<--	pie_ (~pie_@unaffiliated/pie-/x-0787662) has quit (Ping timeout: 240 seconds)
2019-01-25 05:23:19	nbloomf	it's not that monads _are_ kleisli categories, they can be used to construct them
2019-01-25 05:23:37	<--	knupfer (~Thunderbi@200116b82c73bd00f69634fffef0b45f.dip.versatel-1u1.de) has quit (Ping timeout: 268 seconds)
2019-01-25 05:24:19	<--	o1lo01ol1o (~o1lo01ol1@207.251.80.226) has quit (Ping timeout: 250 seconds)
2019-01-25 05:24:41	-->	LKoen (~LKoen@crh60-h01-176-151-31-205.dsl.sta.abo.bbox.fr) has joined #haskell
2019-01-25 05:25:17	johnw	right, given a Monad m, we can construct a Kleisli category whose arrows are a -> m b.
2019-01-25 05:25:22	<--	tombusby (~tombusby@gateway/tor-sasl/tombusby) has quit (Remote host closed the connection)
2019-01-25 05:25:34	<--	lagothrix (~lagothrix@unaffiliated/lagothrix) has quit (Ping timeout: 268 seconds)
2019-01-25 05:25:55	-->	amar (~amar@cpc121556-lewi23-2-0-cust1623.2-4.cable.virginm.net) has joined #haskell
2019-01-25 05:26:17	--	amar is now known as Guest22169
2019-01-25 05:27:05	<--	sternmull (~kringel@p5481C9B5.dip0.t-ipconnect.de) has quit (Quit: Leaving.)
2019-01-25 05:27:17	-->	lagothrix (~lagothrix@unaffiliated/lagothrix) has joined #haskell
2019-01-25 05:28:12	<--	nbloomf (~nbloomf@2600:1700:83e0:1f40:6d74:a91e:18fc:6759) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-25 05:29:21	-->	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has joined #haskell
2019-01-25 05:29:51	<--	lambdaman (~lambdaman@demo-vpn.calabrio.com) has quit (Remote host closed the connection)
2019-01-25 05:30:09	-->	tombusby (~tombusby@gateway/tor-sasl/tombusby) has joined #haskell
2019-01-25 05:31:09	-->	lambdama_ (~lambdaman@con08-vpn.calabrio.com) has joined #haskell
2019-01-25 05:32:10	-->	o1lo01ol1o (~o1lo01ol1@207.251.80.226) has joined #haskell
2019-01-25 05:32:35	 *	hackage spectral-clustering 0.2.2.3 - Library for spectral clustering.  https://hackage.haskell.org/package/spectral-clustering-0.2.2.3 (GregorySchwartz)
2019-01-25 05:33:39	-->	marxS-2 (~marxS@host-89-241-184-68.as13285.net) has joined #haskell
2019-01-25 05:33:57	-->	Solonarv (~Thunderbi@astrasbourg-653-1-100-90.w90-13.abo.wanadoo.fr) has joined #haskell
2019-01-25 05:34:35	-->	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has joined #haskell
2019-01-25 05:34:44	<--	swalladge (~swalladge@unaffiliated/swalladge) has quit (Ping timeout: 240 seconds)
2019-01-25 05:34:48	<--	um1b0zu (~um1@38.88.168.107) has quit (Ping timeout: 246 seconds)
2019-01-25 05:35:13	<--	cfsloth (~cfsloth3@89-181-200-17.net.novis.pt) has quit (Read error: Connection reset by peer)
2019-01-25 05:35:13	<--	o1lo01ol1o (~o1lo01ol1@207.251.80.226) has quit (Read error: Connection reset by peer)
2019-01-25 05:35:18	-->	o1lo01ol_ (~o1lo01ol1@207.251.80.226) has joined #haskell
2019-01-25 05:36:02	-->	nbloomf (~nbloomf@2600:1700:83e0:1f40:6d74:a91e:18fc:6759) has joined #haskell
2019-01-25 05:36:21	-->	um1b0zu (~um1@38.88.168.107) has joined #haskell
2019-01-25 05:36:40	<--	marxS (~marxS@host-89-241-184-68.as13285.net) has quit (Ping timeout: 268 seconds)
2019-01-25 05:37:20	<--	Guest22169 (~amar@cpc121556-lewi23-2-0-cust1623.2-4.cable.virginm.net) has quit (Read error: Connection reset by peer)
2019-01-25 05:37:43	-->	snowgoggles (~snowgoggl@dhcp-c-b6-d2-83-34-5a.cpe.i-zoom.net) has joined #haskell
2019-01-25 05:38:42	-->	obihann (~obihann@156.57.171.145) has joined #haskell
2019-01-25 05:39:21	<--	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has quit (Ping timeout: 246 seconds)
2019-01-25 05:40:28	<--	LKoen (~LKoen@crh60-h01-176-151-31-205.dsl.sta.abo.bbox.fr) has quit (Remote host closed the connection)
2019-01-25 05:41:12	<--	nbloomf (~nbloomf@2600:1700:83e0:1f40:6d74:a91e:18fc:6759) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-25 05:44:03	<--	Meowitskaitlin (~Meowitska@88-105-153-177.dynamic.dsl.as9105.com) has quit (Ping timeout: 268 seconds)
2019-01-25 05:45:21	-->	jchia_ (~jchia@58.32.32.5) has joined #haskell
2019-01-25 05:46:04	 *	hackage too-many-cells 0.1.1.0 - Cluster single cells and analyze cell clade relationships.  https://hackage.haskell.org/package/too-many-cells-0.1.1.0 (GregorySchwartz)
2019-01-25 05:47:25	<--	lambdama_ (~lambdaman@con08-vpn.calabrio.com) has quit (Remote host closed the connection)
2019-01-25 05:47:45	-->	hamishmack (~textual@121-73-30-206.cable.telstraclear.net) has joined #haskell
2019-01-25 05:48:03	<--	_kwstas (~konstanti@ppp079166100013.access.hol.gr) has quit (Quit: _kwstas)
2019-01-25 05:48:20	<--	kish\ (~oracle@unaffiliated/oracle) has quit (Ping timeout: 245 seconds)
2019-01-25 05:48:45	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 245 seconds)
2019-01-25 05:49:07	-->	caryoscelus_ (~caryoscel@176.195.43.43) has joined #haskell
2019-01-25 05:50:00	<--	NoidedSuper (~asuper@174-16-57-4.hlrn.qwest.net) has quit (Ping timeout: 244 seconds)
2019-01-25 05:50:19	<--	free-zombie (~tjol@2a02:7b40:c287:5d57::1) has quit (Ping timeout: 250 seconds)
2019-01-25 05:51:33	<--	Khisanth (~Khisanth@pool-108-46-1-221.nycmny.east.verizon.net) has quit (Ping timeout: 244 seconds)
2019-01-25 05:52:53	-->	iqubic (~user@98.232.18.124) has joined #haskell
2019-01-25 05:53:40	-->	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has joined #haskell
2019-01-25 05:53:41	-->	swalladge (~swalladge@unaffiliated/swalladge) has joined #haskell
2019-01-25 05:54:00	iqubic	ski: I figured out how you did the crazy `take -1` thing.
2019-01-25 05:54:43	<--	fmixing (~fmixing@5.18.98.152) has quit (Remote host closed the connection)
2019-01-25 05:55:33	<--	BartAdv (uid90451@gateway/web/irccloud.com/x-pyrgrojmluxpnbne) has quit (Quit: Connection closed for inactivity)
2019-01-25 05:57:00	ski	dmwit, not me
2019-01-25 05:57:49	-->	fmixing (~fmixing@5.18.98.152) has joined #haskell
2019-01-25 05:58:04	ahri	I loaded a file into GHCI that contained `{-# LANGUAGE DataKinds #-}`, why do I need to type `:set -XDataKinds` into GHCI in order to interact with e.g. `:k "hello"`?
2019-01-25 05:58:17	-->	lambdaman (~lambdaman@demo-vpn.calabrio.com) has joined #haskell
2019-01-25 05:58:35	dmwit	The REPL and the file have separate language extension settings.
2019-01-25 05:58:40	dmwit	This is occasionally handy.
2019-01-25 05:59:06	ahri	it's surprising to me - can you give an example of its handiness?
2019-01-25 06:00:34	<--	gxt (~gxt@2a02:908:e851:4020:c0f4:2c66:8889:13da) has quit (Quit: WeeChat 2.3)
2019-01-25 06:00:50	dmwit	Extensions don't leak from ghci to the file. This means it doesn't have to re-load the file every time you turn on or off an extension, and turning off an extension in ghci doesn't accidentally prevent the file from being loadable.
2019-01-25 06:01:16	<--	lambdaman (~lambdaman@demo-vpn.calabrio.com) has quit (Remote host closed the connection)
2019-01-25 06:01:22	-->	lambdaman (~lambdaman@tst-vpn.calabrio.com) has joined #haskell
2019-01-25 06:01:24	dmwit	Extensions don't leak from the file to ghci. This means that you land in a predictable state when ghci starts up; you don't need to mentally shift every time you start interpreting a file from some project you've never source-dived on before.
2019-01-25 06:01:40	<--	lambdaman (~lambdaman@tst-vpn.calabrio.com) has quit (Remote host closed the connection)
2019-01-25 06:01:40	-->	pie_ (~pie_@unaffiliated/pie-/x-0787662) has joined #haskell
2019-01-25 06:01:43	-->	argent0 (~argent0@186.133.236.143) has joined #haskell
2019-01-25 06:01:45	<--	Welkin (~Welkin@047-227-169-219.res.spectrum.com) has quit (Ping timeout: 246 seconds)
2019-01-25 06:01:54	-->	LKoen (~LKoen@crh60-h01-176-151-31-205.dsl.sta.abo.bbox.fr) has joined #haskell
2019-01-25 06:02:01	<--	takuan (~takuan@178-116-215-47.access.telenet.be) has quit (Remote host closed the connection)
2019-01-25 06:02:06	<--	fmixing (~fmixing@5.18.98.152) has quit (Ping timeout: 246 seconds)
2019-01-25 06:02:50	-->	Welkin (~Welkin@047-227-169-219.res.spectrum.com) has joined #haskell
2019-01-25 06:03:20	<--	pie__ (~pie_@unaffiliated/pie-/x-0787662) has quit (Ping timeout: 245 seconds)
2019-01-25 06:03:42	ahri	I see, I can't find an option to automatically load extensions based on a file - is this not available?
2019-01-25 06:04:28	-->	pie__ (~pie_@unaffiliated/pie-/x-0787662) has joined #haskell
2019-01-25 06:04:53	dexterfoo	ahri: you can use a .ghci file: https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#the-ghci-files
2019-01-25 06:05:23	dexterfoo	ahri: or if you are using cabal, then you can list your extensions in your cabal file, and then "cabal repl" will load them i believe
2019-01-25 06:05:46	-->	lambdaman (~lambdaman@con08-vpn.calabrio.com) has joined #haskell
2019-01-25 06:05:47	<--	lambdaman (~lambdaman@con08-vpn.calabrio.com) has quit (Remote host closed the connection)
2019-01-25 06:05:53	-->	lambdaman (~lambdaman@tst-vpn.calabrio.com) has joined #haskell
2019-01-25 06:05:59	<--	danvet (~Daniel@2a02:168:569e:0:3106:d637:d723:e855) has quit (Ping timeout: 252 seconds)
2019-01-25 06:06:20	dmwit	I believe the exact feature you ask for is not available.
2019-01-25 06:06:53	<--	pie_ (~pie_@unaffiliated/pie-/x-0787662) has quit (Ping timeout: 240 seconds)
2019-01-25 06:07:01	-->	wroathe (~wroathe@23-30-253-203-static.hfc.comcastbusiness.net) has joined #haskell
2019-01-25 06:07:11	ahri	ok, that's interesting, I can see why in most projects it's not all that useful. I think I'll code something up to load them in for my case :) thanks!
2019-01-25 06:07:20	<--	simukis (~simukis_@78-63-88-48.static.zebra.lt) has quit (Quit: simukis)
2019-01-25 06:07:27	-->	pie_ (~pie_@unaffiliated/pie-/x-0787662) has joined #haskell
2019-01-25 06:07:56	-->	gxt (~gxt@2a02:908:e851:4020:567:4420:3bb5:65db) has joined #haskell
2019-01-25 06:09:48	<--	pie__ (~pie_@unaffiliated/pie-/x-0787662) has quit (Ping timeout: 246 seconds)
2019-01-25 06:10:25	<--	lagothrix (~lagothrix@unaffiliated/lagothrix) has quit (Ping timeout: 245 seconds)
2019-01-25 06:11:30	geekosaur	it's even trickier than that. say you have a project with multiple source files, each with its own LANGUAGE pragmas, and you load all of them. which one wins?
2019-01-25 06:11:31	-->	pie__ (~pie_@unaffiliated/pie-/x-0787662) has joined #haskell
2019-01-25 06:11:32	-->	davr0s (~textual@host109-155-92-146.range109-155.btcentralplus.com) has joined #haskell
2019-01-25 06:11:45	-->	lagothrix (~lagothrix@unaffiliated/lagothrix) has joined #haskell
2019-01-25 06:12:04	geekosaur	note that :m doesn't help here, it controls only which one gets unqualified names. would you expect it to look at a qualified name and switch extensions to match? and what happens if you mix them in the same expression?
2019-01-25 06:12:25	ahri	yeah, so my case is single-file "projects", so I'm spared this complication
2019-01-25 06:13:23	<--	pie_ (~pie_@unaffiliated/pie-/x-0787662) has quit (Ping timeout: 240 seconds)
2019-01-25 06:14:00	-->	Khisanth (~Khisanth@pool-108-46-5-244.nycmny.east.verizon.net) has joined #haskell
2019-01-25 06:14:21	<--	mizu_no_oto (~textual@2604:6000:1012:6096:30a2:244f:9524:c682) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-25 06:15:11	<--	aware (~aware@rrcs-98-6-17-170.sw.biz.rr.com) has quit (Quit: WeeChat 2.2)
2019-01-25 06:15:31	<--	raichoo (~raichoo@213.240.178.58) has quit (Ping timeout: 268 seconds)
2019-01-25 06:17:04	 *	hackage expresso 0.1.2.0 - A simple expressions language based on row types  https://hackage.haskell.org/package/expresso-0.1.2.0 (willtim)
2019-01-25 06:17:22	<--	pie__ (~pie_@unaffiliated/pie-/x-0787662) has quit (Ping timeout: 268 seconds)
2019-01-25 06:18:30	-->	_deepfire (~user@80.92.100.69) has joined #haskell
2019-01-25 06:18:35	<--	crobbins (~crobbins@2601:2c7:780:416e:54cb:a129:542a:e1b) has quit (Remote host closed the connection)
2019-01-25 06:22:58	<--	slackcals (~slackcals@unaffiliated/slackcals) has quit (Quit: Lost terminal)
2019-01-25 06:24:51	<--	davr0s (~textual@host109-155-92-146.range109-155.btcentralplus.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2019-01-25 06:25:18	-->	kvda (~kvda@unaffiliated/kvda) has joined #haskell
2019-01-25 06:25:40	iqubic	dmwit: ski: I solve the puzzle of the weird (take -1) thing.
2019-01-25 06:26:35	ski	ok
2019-01-25 06:26:54	iqubic	it's clever and weird.
2019-01-25 06:27:08	iqubic	how is the let misdirection though?
2019-01-25 06:27:18	<--	Ariakenom (~Ariakenom@h-155-4-222-251.NA.cust.bahnhof.se) has quit (Quit: Leaving)
2019-01-25 06:28:04	ski	brackets emphasize that something weird is going on with the function and the minus sign
2019-01-25 06:28:28	-->	nyc (~nyc@unaffiliated/wli) has joined #haskell
2019-01-25 06:29:05	iqubic	Ah, I see.
2019-01-25 06:30:25	<--	rasusto (~robert@64.121.15.242) has quit (Quit: rasusto)
2019-01-25 06:30:55	<--	um1b0zu (~um1@38.88.168.107) has quit (Quit: leaving)
2019-01-25 06:31:18	-->	rasusto (~rasusto@64.121.15.242) has joined #haskell
2019-01-25 06:32:11	-->	kitlangton (~kitlangto@198-27-223-170.fiber.dynamic.sonic.net) has joined #haskell
2019-01-25 06:33:28	iqubic	fromInteger = const -- for functions
2019-01-25 06:33:32	iqubic	I think.
2019-01-25 06:34:09	kadoban	Wat? Functions are Num instances ?
2019-01-25 06:34:16	iqubic	no.
2019-01-25 06:34:25	ski	they are now, thanks to dmwit
2019-01-25 06:34:31	kadoban	Oh
2019-01-25 06:34:34	iqubic	ski and/or dmwit can explain this better.
2019-01-25 06:34:41	ski	> 2 3
2019-01-25 06:34:43	lambdabot	 2
2019-01-25 06:34:49	kadoban	Haha
2019-01-25 06:34:56	iqubic	> let f = take -1 in [1..]
2019-01-25 06:34:58	lambdabot	 [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,...
2019-01-25 06:35:15	<--	doyougnu (doyougnu@128-193-154-26.ptpg.oregonstate.edu) has quit (Ping timeout: 268 seconds)
2019-01-25 06:35:16	iqubic	> let f = take -1 in f 3 [1..]
2019-01-25 06:35:18	lambdabot	 [0,1,2]
2019-01-25 06:35:45	iqubic	bonus point to you kadoban if you can figure out how that works.
2019-01-25 06:35:55	<--	marxS-2 (~marxS@host-89-241-184-68.as13285.net) has quit (Remote host closed the connection)
2019-01-25 06:36:06	kadoban	:t take
2019-01-25 06:36:07	lambdabot	Int -> [a] -> [a]
2019-01-25 06:36:15	<--	ym555 (~ym@156.201.104.27) has quit (Ping timeout: 245 seconds)
2019-01-25 06:36:57	ski	> (map . map) (fst^2 + snd^2) [[(x,y) | x <- [0 .. 3]] | y <- [x .. 3]]
2019-01-25 06:37:00	lambdabot	 *Exception: not an integer: x
2019-01-25 06:37:09	ski	> (map . map) (fst^2 + snd^2) [[(x,y) | x <- [y .. 3]] | y <- [0 .. 3]]
2019-01-25 06:37:11	lambdabot	 [[0,1,4,9],[2,5,10],[8,13],[18]]
2019-01-25 06:37:39	kadoban	:t take -1
2019-01-25 06:37:41	lambdabot	Num a => Int -> [a] -> [a]
2019-01-25 06:37:48	-->	jackdk (98537540@gateway/web/cgi-irc/kiwiirc.com/ip.152.83.117.64) has joined #haskell
2019-01-25 06:37:54	kadoban	I'm guessing it has something to do with that
2019-01-25 06:37:56	-->	nbloomf (~nbloomf@2600:1700:83e0:1f40:6d74:a91e:18fc:6759) has joined #haskell
2019-01-25 06:38:01	<--	kakadu__ (~kakadu@217.71.235.234) has quit (Remote host closed the connection)
2019-01-25 06:38:01	iqubic	there is so much cleverness going on there.
2019-01-25 06:38:30	<--	TC` (~justas@gilvonauskas.lt) has quit (Remote host closed the connection)
2019-01-25 06:38:32	iqubic	kadoban: Perhaps, but how does (take -1) work exactly?
2019-01-25 06:38:50	kadoban	Depends what the definition is for subtraction in this Num instance
2019-01-25 06:39:06	kadoban	It's probably just ...   (-) a b = a  I guess?
2019-01-25 06:39:16	iqubic	Try testing it.
2019-01-25 06:39:17	kadoban	So (take -1) = take
2019-01-25 06:39:30	iqubic	does that work?
2019-01-25 06:39:39	kadoban	> take -1 5 [1,2,3,4,5]
2019-01-25 06:39:41	lambdabot	 <Int -> [Integer] -> [Integer]>
2019-01-25 06:39:45	 *	ski grins
2019-01-25 06:39:51	kadoban	> (take -1) 5 [1,2,3,4,5]
2019-01-25 06:39:53	lambdabot	 [0,1,2,3,4]
2019-01-25 06:39:57	kadoban	There we go
2019-01-25 06:40:03	iqubic	that was figured out quickly.
2019-01-25 06:40:04	kadoban	> (take -1) 3 [1,2,3,4,5]
2019-01-25 06:40:06	lambdabot	 [0,1,2]
2019-01-25 06:40:25	kadoban	Damn is that confusing though. What a garbage language this is xD </s>
2019-01-25 06:40:33	iqubic	See there's an interesting thing going on here.
2019-01-25 06:41:16	iqubic	There are two critical pieces of information you need to find here.
2019-01-25 06:42:43	-->	darjeeling_ (~darjeelin@205.175.106.219) has joined #haskell
2019-01-25 06:42:46	Heffalump	iqubic: FTP and FTP? :-)
2019-01-25 06:42:51	iqubic	> [1,2,3] - [1,2,3] -- kadoban
2019-01-25 06:42:53	lambdabot	 [0,0,0]
2019-01-25 06:42:54	kadoban	I wonder if you could make this Num instance even more confusing depending on what the arguments to the function are. If you start acutally using a and b ... that'd be even more wonky.
2019-01-25 06:42:59	-->	olligobber (olligobber@gateway/vpn/privateinternetaccess/olligobber) has joined #haskell
2019-01-25 06:43:10	iqubic	Heffalump: what is FTP?
2019-01-25 06:43:18	kadoban	Nice. That's almost a halfway sane Num instance.
2019-01-25 06:43:29	Heffalump	Foldable Traversable Proposal - the thing that led to nonsense like length (2, 3) = 1
2019-01-25 06:43:39	 *	ski . o O ( "Fleyland Tenebrificate Plangorous" )
2019-01-25 06:43:50	Heffalump	I'm assuming that's not actually the culprit here, but it feels like it ought to be :-)
2019-01-25 06:44:15	kadoban	I don't think so, ya
2019-01-25 06:44:18	iqubic	yeah. It's basically "x `binOp` y == zipWith binOp x y"
2019-01-25 06:44:33	<--	LKoen (~LKoen@crh60-h01-176-151-31-205.dsl.sta.abo.bbox.fr) has quit (Quit: “It’s only logical. First you learn to talk, then you learn to think. Too bad it’s not the other way round.”)
2019-01-25 06:44:46	iqubic	Where "x is the same type as y and both are [a]"
2019-01-25 06:45:14	iqubic	And `binOp` is one of (+, -, *, /)
2019-01-25 06:45:44	ski	not `/'
2019-01-25 06:45:56	iqubic	Why?
2019-01-25 06:46:01	iqubic	Is div different?
2019-01-25 06:46:13	ski	@type [(+),(-),(*)]
2019-01-25 06:46:15	lambdabot	Num a => [a -> a -> a]
2019-01-25 06:46:16	ski	@type [(+),(-),(*),(/)]
2019-01-25 06:46:18	lambdabot	Fractional a => [a -> a -> a]
2019-01-25 06:46:20	<--	obihann (~obihann@156.57.171.145) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-25 06:46:29	ski	> [0] / [1]
2019-01-25 06:46:31	lambdabot	 error:
2019-01-25 06:46:31	lambdabot	     • No instance for (Fractional [Integer])
2019-01-25 06:46:31	lambdabot	         arising from a use of ‘e_101’
2019-01-25 06:46:55	-->	carlosdagos (uid312197@gateway/web/irccloud.com/x-qdzemychyxwfwjjl) has joined #haskell
2019-01-25 06:47:08	iqubic	Ah right. But I'm basically right with my implementation of (Num a => Num [a])
2019-01-25 06:47:15	ski	(one could easily make a `Fractional' instance, though. it's just that dmwit didn't bother to)
2019-01-25 06:47:22	<--	yqt (~yqt@81.88.230.28) has quit (Ping timeout: 272 seconds)
2019-01-25 06:47:30	<--	kmelvn (~karl@213-202-66-196.dsl.iskon.hr) has quit (Ping timeout: 245 seconds)
2019-01-25 06:47:33	iqubic	also: "fromInteger = repeat"
2019-01-25 06:47:41	ski	yep, that's crucial
2019-01-25 06:47:56	ski	(together with the cut-off behaviour of `zipWith')
2019-01-25 06:48:11	iqubic	kadoban: There still one or two things that you haven't explained.
2019-01-25 06:48:14	ski	iqubic : did you see the monoids thing, yet ?
2019-01-25 06:48:40	iqubic	> let f = take -1 in f 3 [1..]
2019-01-25 06:48:42	lambdabot	 [0,1,2]
2019-01-25 06:48:44	iqubic	ski: No.
2019-01-25 06:48:52	iqubic	Care to show me some weirdness?
2019-01-25 06:50:21	ski	> sortBy (comparing length <> compare) (words "The quick brown fox jumps over the lazy dog")  -- primarily sort by length, secondarily by contents (lexicographically as usual)
2019-01-25 06:50:23	lambdabot	 ["The","dog","fox","the","lazy","over","brown","jumps","quick"]
2019-01-25 06:50:24	kadoban	iqubic: Oh, what'd I not figure out yet?
2019-01-25 06:50:33	ski	@where monoids
2019-01-25 06:50:34	lambdabot	comment on "Monoids? In my programming language?" by Cale in 2008 (or 2009 ?) at <http://www.reddit.com/r/programming/comments/7cf4r/monoids_in_my_programming_language/c06adnx> about a use of `
2019-01-25 06:50:34	lambdabot	instance Monoid a => Monoid (rho -> a)'
2019-01-25 06:50:38	ski	iqubic ^
2019-01-25 06:51:00	<--	Essadon (~Essadon@81-225-32-185-no249.tbcn.telia.com) has quit (Quit: Qutting)
2019-01-25 06:51:20	iqubic	kadoban: There something more to this.
2019-01-25 06:51:21	iqubic	> let f = take -1 in f 3 [1..]
2019-01-25 06:51:23	lambdabot	 [0,1,2]
2019-01-25 06:51:33	iqubic	:t (take - 1)
2019-01-25 06:51:35	lambdabot	Num a => Int -> [a] -> [a]
2019-01-25 06:51:46	iqubic	:t (id - 1)
2019-01-25 06:51:47	lambdabot	Num a => a -> a
2019-01-25 06:51:54	iqubic	:t (const - 1)
2019-01-25 06:51:55	lambdabot	Num a => a -> b -> a
2019-01-25 06:52:05	ski	iqubic : have fun reading that
2019-01-25 06:52:14	iqubic	What is rho?
2019-01-25 06:52:21	Heffalump	:t (\f -> f - 1)
2019-01-25 06:52:21	<--	sonofentropy (~k@84-10-10-170.static.chello.pl) has quit (Quit: sonofentropy)
2019-01-25 06:52:22	lambdabot	Num a => a -> a
2019-01-25 06:52:25	-->	ym555 (~ym@156.201.218.209) has joined #haskell
2019-01-25 06:52:36	Heffalump	:t 1
2019-01-25 06:52:37	lambdabot	Num p => p
2019-01-25 06:52:45	iqubic	Also kadoban, there's one more Num instance that has been created that hasn't been explicitly called out.
2019-01-25 06:53:04	Heffalump	> let f = take - const 1 in f 3 [1..]
2019-01-25 06:53:06	lambdabot	 [0,1,2]
2019-01-25 06:53:16	iqubic	Other than the "Num a => Num [a]" that dmwit made.
2019-01-25 06:53:22	ski	iqubic : just a type variable
2019-01-25 06:53:23	kadoban	iqubic: I'm not sure what I'm missing. Those seem easy to understand so far? I'm not really sure why there's a Num constraint on id -1 and const -1, is that it?
2019-01-25 06:53:54	kadoban	> (id - 42) 100
2019-01-25 06:53:56	lambdabot	 58
2019-01-25 06:54:01	iqubic	What is that doing.
2019-01-25 06:54:05	kadoban	Oh, because it does the funny thing I thought would be funny
2019-01-25 06:54:16	kadoban	> (id - 1) 100
2019-01-25 06:54:18	lambdabot	 99
2019-01-25 06:54:23	Heffalump	is kadoban the only person supposed to be solving this problem, or can anyone play?
2019-01-25 06:54:23	iqubic	How the heck are are you able to subtract a number from a function?
2019-01-25 06:54:28	-->	ystael (~ystael@209.6.50.55) has joined #haskell
2019-01-25 06:54:36	iqubic	Heffalump: You can certainly help.
2019-01-25 06:54:52	kadoban	Because the number becomes a function because there's a Num instance for functions (and a subtraction instance for functions)
2019-01-25 06:54:53	 *	ski suspects Heffalump would solve it too fast :)
2019-01-25 06:55:06	iqubic	kadoban: Yes.
2019-01-25 06:55:07	Heffalump	well, I don't know the answer, so I can't guarantee to help without actually solving it :-)
2019-01-25 06:55:21	kadoban	iqubic: I thought that's already what I said though earlier
2019-01-25 06:55:24	Heffalump	though I have a vague guess, if my idea above is on the right track
2019-01-25 06:55:24	<--	merijn (~merijn@a212-238-239-156.adsl.xs4all.nl) has quit (Ping timeout: 240 seconds)
2019-01-25 06:55:29	iqubic	Oh. I misunderstood.
2019-01-25 06:56:13	kadoban	Ah
2019-01-25 06:56:16	Heffalump	ok, I do know now actually
2019-01-25 06:56:22	iqubic	Yeah. dmwit also made "Instance Num b => Num (a -> b)"A
2019-01-25 06:56:39	kadoban	I didn't realize it was actually using the "1" part, but now I see
2019-01-25 06:56:40	<--	cyphase (~cyphase@unaffiliated/cyphase) has quit (Ping timeout: 245 seconds)
2019-01-25 06:56:44	iqubic	But I'm unsure of what the fromInteger looks like there.
2019-01-25 06:56:45	kadoban	Did the instance change or was the original one doing that too?
2019-01-25 06:57:09	iqubic	kadoban: "take -1" and "take (-1)" are two different things.
2019-01-25 06:57:11	ski	iqubic : it was mentioned before
2019-01-25 06:57:26	kadoban	iqubic: Yeah, I got that
2019-01-25 06:57:38	Heffalump	so all the pieces have been mentioned now, right?
2019-01-25 06:57:43	kadoban	fromInteger a = \x -> x - a   I think?
2019-01-25 06:57:49	kadoban	Or is it more complicated somehow?
2019-01-25 06:57:52	iqubic	ski: What is the fromInteger for this new Num type on functions?
2019-01-25 06:57:54	Heffalump	kadoban: it's simpler I think
2019-01-25 06:57:58	 *	ski . o O ( "`take -1' is clearly the inverse function of `take' .." )
2019-01-25 06:58:00	Heffalump	iqubic: just the obvious one, surely?
2019-01-25 06:58:15	iqubic	Heffalump: What is the obvious one.
2019-01-25 06:58:19	iqubic	Also, I don't know.
2019-01-25 06:58:24	Heffalump	iqubic: fromInteger k = \_ -> fromInteger k
2019-01-25 06:58:32	kadoban	Oh, fromInteger a = const a   probably
2019-01-25 06:58:34	ski	Heffalump : yes, since about four and a half hour ago
2019-01-25 06:58:38	kadoban	Gotcha
2019-01-25 06:58:47	<--	ljhms (~ljhms@h-164-169.A357.priv.bahnhof.se) has quit (Read error: Connection reset by peer)
2019-01-25 06:58:59	kadoban	Or ya, whatever actually typechecks there
2019-01-25 06:59:09	iqubic	ski: That's actually what I said a while ago.
2019-01-25 06:59:14	<--	ltchen (~ltchen@host-92-30-204-54.as13285.net) has quit (Remote host closed the connection)
2019-01-25 06:59:18	ski	iqubic : yep, as i said :)
2019-01-25 06:59:24	iqubic	ski: http://www.rubinsteyn.com/monoids.html
2019-01-25 06:59:31	iqubic	That gives me a 404 error.
2019-01-25 06:59:44	iqubic	So I can't really look at the monoids thing.
2019-01-25 06:59:47	ski	dunno where you got that link from
2019-01-25 06:59:52	ski	i certainly didn't provide it
2019-01-25 07:00:40	iqubic	It's the link I got when I opened the reddit post and looked at what link they were discussing.
2019-01-25 07:00:50	iqubic	You provided a link to the reddit post.
2019-01-25 07:01:16	ski	yea. just look at the message composed by Cale in the message thread
2019-01-25 07:01:23	<--	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has quit (Ping timeout: 250 seconds)
2019-01-25 07:01:30	ski	(you know, the one i pointed you to)
2019-01-25 07:01:39	iqubic	And I click through to see what link they were discussing by clicking the text "Monoids? In my programming language?"
2019-01-25 07:01:49	-->	ljhms (~ljhms@h-164-169.A357.priv.bahnhof.se) has joined #haskell
2019-01-25 07:02:06	Heffalump	so it's just Num a => Num [a] and Num a => Num (b -> a) , right?
2019-01-25 07:02:06	 *	ski doesn't recall whether they even looked at the link they were originally discussing
2019-01-25 07:02:13	ski	Heffalump : pretty much
2019-01-25 07:02:32	ski	and overloaded numeric literals, of course
2019-01-25 07:02:41	-->	Wuzzy (~Wuzzy@p5790E3A2.dip0.t-ipconnect.de) has joined #haskell
2019-01-25 07:02:56	Heffalump	isn't that automatic? Given Num contains fromInteger and that's how Haskell works
2019-01-25 07:03:16	-->	cyphase (~cyphase@unaffiliated/cyphase) has joined #haskell
2019-01-25 07:03:28	ski	sure, but it might not be obvious to people not already familiar with how that works
2019-01-25 07:03:33	<--	yyy (~yyy@unaffiliated/tinnotl) has quit (Ping timeout: 250 seconds)
2019-01-25 07:03:37	ski	(is that a truism ?)
2019-01-25 07:03:54	Heffalump	:-) I really meant "it's just ... in addition to the Prelude+standard Haskell, right?"
2019-01-25 07:04:06	ski	(in any case, even if one's heard about it, it needn't be something that immediately comes to mind)
2019-01-25 07:04:13	ski	sure :)
2019-01-25 07:04:24	Heffalump	I guess that fromInteger = pure might be more natural than fromInteger = repeat
2019-01-25 07:04:39	ski	yea, `liftA2' works in place of `zipWith'
2019-01-25 07:04:41	Heffalump	but otherwise those are quite natural instances if you're going to have them at all
2019-01-25 07:04:46	<--	kitlangton (~kitlangto@198-27-223-170.fiber.dynamic.sonic.net) has quit
2019-01-25 07:05:19	iqubic	Are there default definitions for "Monoid Ordering" and and "Monoid m => Monoid (e -> m)" in the haskell standard library already?
2019-01-25 07:06:08	-->	Bradux (~La@laubervilliers-657-1-64-163.w90-63.abo.wanadoo.fr) has joined #haskell
2019-01-25 07:06:09	iqubic	> sortBy (comparing length <> compare) (words "here is a bunch of words to sort first by length and then alphabetically")
2019-01-25 07:06:11	lambdabot	 ["a","by","is","of","to","and","here","sort","then","bunch","first","words",...
2019-01-25 07:06:15	Solonarv	iqubic: yes
2019-01-25 07:06:23	<--	ystael (~ystael@209.6.50.55) has quit (Ping timeout: 240 seconds)
2019-01-25 07:06:24	iqubic	I see. So that's how that thing works.
2019-01-25 07:06:34	ski	pretty neat, huh ?
2019-01-25 07:06:52	-->	ltchen (~ltchen@host-92-30-204-54.as13285.net) has joined #haskell
2019-01-25 07:06:54	Solonarv	Heffalump: the 'Num [a]' instance is a special case of lifting "through" an applicative functor
2019-01-25 07:07:10	iqubic	What exactly does that thing do that I just posted?
2019-01-25 07:07:24	iqubic	And how does it work??
2019-01-25 07:07:30	wroathe	So with TypeApplications, if I have a foo :: Monad m => m a, and I call it like so: foo @Integer, it tries to apply Integer to m a. The documentation mentions using forall to make it so that it applies Integer to a
2019-01-25 07:07:38	wroathe	How would that syntax look?
2019-01-25 07:07:53	ski	iqubic : it does what it says
2019-01-25 07:08:05	lyxia	foo :: forall m a. Monad m => m a
2019-01-25 07:08:05	<--	infandum (~user@24.102.139.254.res-cmts.sm.ptd.net) has quit (Remote host closed the connection)
2019-01-25 07:08:14	Solonarv	[] is actually an applicative functor in two different ways (pure = repeat and liftA2 = zipWith, or: pure x = [x] and liftA2 = {- cartesian product -}), so there are two ways to lift a Num instance through []
2019-01-25 07:08:28	lyxia	I'm pretty sure that's what you get by default though
2019-01-25 07:08:48	lyxia	so foo @Integer is ill-typed
2019-01-25 07:09:04	wroathe	get :: (MonadFail m, FromJSON a) => String -> FlatConfigMap -> m a
2019-01-25 07:09:04	-->	yyy (~yyy@unaffiliated/tinnotl) has joined #haskell
2019-01-25 07:09:10	wroathe	This is the actual signature
2019-01-25 07:09:34	<--	acarrico (~acarrico@dhcp-68-142-35-239.greenmountainaccess.net) has quit (Ping timeout: 244 seconds)
2019-01-25 07:09:49	wroathe	It's telling me it can't match type Integer with IO
2019-01-25 07:10:03	wroathe	So it's trying to do something like Integer a,  instead of IO Integer
2019-01-25 07:10:18	Solonarv	sure looks like the order is 'forall m a. ...'
2019-01-25 07:10:32	geekosaur	I think you'd have to swap those variables in the forall?
2019-01-25 07:10:39	Solonarv	you can also use wildcards in type applications, like so:
2019-01-25 07:10:43	geekosaur	forall a m. ...
2019-01-25 07:10:49	Solonarv	foo @_ @Integer
2019-01-25 07:11:04	geekosaur	but that would be weird, and I'd recommend Solonarv's solution
2019-01-25 07:11:13	geekosaur	weird and confusing
2019-01-25 07:12:02	-->	doyougnu (doyougnu@128-193-154-26.ptpg.oregonstate.edu) has joined #haskell
2019-01-25 07:12:24	<--	olligobber (olligobber@gateway/vpn/privateinternetaccess/olligobber) has quit (Ping timeout: 240 seconds)
2019-01-25 07:12:31	<--	o1lo01ol_ (~o1lo01ol1@207.251.80.226) has quit (Remote host closed the connection)
2019-01-25 07:12:43	-->	merijn (~merijn@a212-238-239-156.adsl.xs4all.nl) has joined #haskell
2019-01-25 07:13:42	<--	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has quit (Ping timeout: 244 seconds)
2019-01-25 07:14:40	<--	lambdaman (~lambdaman@tst-vpn.calabrio.com) has quit (Remote host closed the connection)
2019-01-25 07:14:48	wroathe	Yeah, so forall a m. (MonadFail m, FromJSON a) => String -> FlatConfigMap -> m a works
2019-01-25 07:14:59	wroathe	But why is that weird/confusing geekosaur?
2019-01-25 07:16:00	geekosaur	because people tend to think of m and a there as having a particular relationship, which here gets inverted. consider as an example wanting to apply both
2019-01-25 07:16:21	wroathe	Well, the use case is I want m to be inferred 
2019-01-25 07:16:29	geekosaur	(foo @Integer @IO) where one would expect (foo @IO @Integer)
2019-01-25 07:16:37	-->	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has joined #haskell
2019-01-25 07:22:23	--	irc: disconnected from server
2019-01-25 07:43:02	-->	gwosix (~gwosix@122.3.47.163) has joined #haskell
2019-01-25 07:43:02	--	Topic for #haskell is "https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: https://gist.github.com/ | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org"
2019-01-25 07:43:02	--	Topic set by glguy on Sat, 05 Jan 2019 15:21:52
2019-01-25 07:43:02	--	Channel #haskell: 1351 nicks (2 ops, 0 voices, 1349 normals)
2019-01-25 07:43:03	--	URL for #haskell: http://www.haskell.org/
2019-01-25 07:43:30	--	Channel created on Sun, 26 Nov 2006 06:42:48
2019-01-25 07:44:04	-->	abhixec (~abhixec@c-24-130-65-112.hsd1.ca.comcast.net) has joined #haskell
2019-01-25 07:44:17	<--	slomo (~slomo@unaffiliated/slomo) has quit (Ping timeout: 250 seconds)
2019-01-25 07:44:19	<--	NoidedSuper (~asuper@174-16-57-4.hlrn.qwest.net) has quit (Ping timeout: 268 seconds)
2019-01-25 07:45:03	-->	urodna (~urodna@unaffiliated/urodna) has joined #haskell
2019-01-25 07:45:08	-->	ensyde (~ensyde@ip-173-153-42-180.ekrgmd.spcsdns.net) has joined #haskell
2019-01-25 07:45:13	<--	argent0 (~argent0@186.133.236.143) has quit (Ping timeout: 244 seconds)
2019-01-25 07:47:46	<--	lagothrix (~lagothrix@unaffiliated/lagothrix) has quit (Ping timeout: 250 seconds)
2019-01-25 07:49:53	<--	ensyde (~ensyde@ip-173-153-42-180.ekrgmd.spcsdns.net) has quit (Ping timeout: 240 seconds)
2019-01-25 07:49:54	<--	obihann (~obihann@156.57.171.145) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-01-25 07:50:57	--	caryoscelus_ is now known as caryoscelus
2019-01-25 07:51:21	-->	lagothrix (~lagothrix@unaffiliated/lagothrix) has joined #haskell
2019-01-25 07:51:25	<--	jchia_ (~jchia@58.32.32.5) has quit (Ping timeout: 246 seconds)
2019-01-25 07:51:27	<--	marco_t (~marco_t@181.231.118.54) has quit (Remote host closed the connection)
2019-01-25 07:52:06	<--	Deide (~Deide@90.240.92.199) has quit (Quit: Seeee yaaaa)
2019-01-25 07:52:10	<--	lambdaman (~lambdaman@74.203.208.2) has quit (Remote host closed the connection)
2019-01-25 07:52:27	<--	machined1od (~machinedg@198-48-220-190.cpe.pppoe.ca) has quit (Ping timeout: 244 seconds)
2019-01-25 08:00:24	<--	turbo_MaCk (~turbo_MaC@ip-78-102-113-18.net.upcbroadband.cz) has quit (Ping timeout: 240 seconds)
2019-01-25 08:03:53	<--	ym555 (~ym@156.201.218.209) has quit (Ping timeout: 240 seconds)
2019-01-25 08:05:57	-->	lightandlight (uid135476@gateway/web/irccloud.com/x-qqllgbycwdyfudhj) has joined #haskell
2019-01-25 08:05:57	<--	wroathe (~wroathe@23-30-253-203-static.hfc.comcastbusiness.net) has quit (Read error: Connection reset by peer)
2019-01-25 08:07:45	-->	mizu_no_oto (~textual@2604:6000:1012:6096:30a2:244f:9524:c682) has joined #haskell
2019-01-25 08:08:45	<--	chaosmasttter (~chaosmast@p548B1108.dip0.t-ipconnect.de) has quit (Ping timeout: 245 seconds)
2019-01-25 08:08:46	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-25 08:10:57	-->	ym555 (~ym@156.199.213.34) has joined #haskell
2019-01-25 08:11:34	 *	hackage pencil 0.1.3 - Static site generator  https://hackage.haskell.org/package/pencil-0.1.3 (elben)
2019-01-25 08:21:42	-->	gwosix (~gwosix@122.3.47.163) has joined #haskell
2019-01-25 08:21:42	--	Topic for #haskell is "https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: https://gist.github.com/ | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org"
2019-01-25 08:21:42	--	Topic set by glguy on Sat, 05 Jan 2019 15:21:52
2019-01-25 08:21:43	--	Channel #haskell: 1346 nicks (2 ops, 0 voices, 1344 normals)
2019-01-25 08:21:43	--	URL for #haskell: http://www.haskell.org/
2019-01-25 08:21:45	--	Channel created on Sun, 26 Nov 2006 06:42:48
2019-01-25 08:22:27	-->	Lycurgus (~niemand@cpe-45-46-138-162.buffalo.res.rr.com) has joined #haskell
2019-01-25 08:22:46	Lycurgus	there's no channel for bnfc someplace is there?
2019-01-25 08:23:24	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-25 08:28:38	<--	marco_t (~marco_t@181.231.118.54) has quit (Remote host closed the connection)
2019-01-25 08:28:45	ski	apparently there is a #bnfc channel. not densely populated, though
2019-01-25 08:29:39	<--	gentauro (~gentauro@185.107.12.141) has quit (Read error: Connection reset by peer)
2019-01-25 08:29:47	-->	gentauro (~gentauro@185.107.12.141) has joined #haskell
2019-01-25 08:30:25	<--	thc202 (~thc202@unaffiliated/thc202) has quit (Ping timeout: 245 seconds)
2019-01-25 08:31:41	Lycurgus	yeah and it might have been just created
2019-01-25 08:32:59	zachk	what is bnfc?
2019-01-25 08:33:14	Lycurgus	(because it didn show in the search I did before asking)
2019-01-25 08:33:45	Lycurgus	https://bnfc.digitalgrammars.com one of a handful of killer hs apps
2019-01-25 08:34:11	<--	isBEKaml (~~.~@unaffiliated/isbekaml) has quit (Quit: WeeChat 2.3)
2019-01-25 08:34:15	-->	oisdk (~textual@86-45-6-241-dynamic.agg2.dyx.chf-qkr.eircom.net) has joined #haskell
2019-01-25 08:34:28	Lycurgus	pandoc, xmonad, bnfc, and maybe a couple i can't recall right now
2019-01-25 08:34:35	wroathe	I'm curious what those of you who have built applications think of https://www.parsonsmatt.org/2018/03/22/three_layer_haskell_cake.html
2019-01-25 08:36:05	Lycurgus	actually there's killer, and killer but narrow appeal the ones I mentioned were not narrow and example of narrow would be like GF and there's a lot more of them
2019-01-25 08:36:30	Lycurgus	*an example (Grammatical Framework)
2019-01-25 08:37:59	-->	ddellacosta (~ddellacos@ool-43536010.dyn.optonline.net) has joined #haskell
2019-01-25 08:38:17	ski	Lycurgus : secret channel, i think. still doesn't show with `alis'
2019-01-25 08:38:46	ski	i wonder whether the GF people would know of an appropriate channel
2019-01-25 08:39:10	<--	Solonarv (~Thunderbi@astrasbourg-653-1-100-90.w90-13.abo.wanadoo.fr) has quit (Ping timeout: 245 seconds)
2019-01-25 08:39:21	sm	wroathe: I have not tried it; it seems more complex than my apps, and than this pattern: https://www.reddit.com/r/haskell/comments/aizfui/how_long_did_it_take_you_to_become_confident_in/eerkf1i/
2019-01-25 08:39:28	<--	ddellaco_ (~ddellacos@87.101.95.115) has quit (Ping timeout: 244 seconds)
2019-01-25 08:39:33	<--	thunderrd (~thunderrd@110.78.155.104) has quit (Ping timeout: 240 seconds)
2019-01-25 08:39:39	Lycurgus	ski, you mean #gf ?
2019-01-25 08:39:44	ski	yes
2019-01-25 08:40:18	-->	eiGHttt (~eiGHttt@m85-64.yeah.net) has joined #haskell
2019-01-25 08:40:44	sm	Lycurgus: don't forget hledger!
2019-01-25 08:40:57	ski	(note that Aarne Ranta, who wrote the BNFC book, is also the progenitor of GF)
2019-01-25 08:41:08	sm	and darcs, for a while
2019-01-25 08:41:14	Lycurgus	i'm too tired to do a regex search for gf lower case 
2019-01-25 08:41:48	Lycurgus	well it currently lists a team of contributors at chalmers
2019-01-25 08:41:49	ski	-!- Topic for #gf: Grammatical Framework · www.grammaticalframework.org
2019-01-25 08:42:18	-->	lee_ (~lee@2601:197:600:42a7:9055:8d95:4498:c957) has joined #haskell
2019-01-25 08:42:52	Lycurgus	right they're talked about as if they were apples and apples, but I've always associated GF with NLP
2019-01-25 08:43:09	Lycurgus	and BNFC is just a tool
2019-01-25 08:43:17	<--	lee_ (~lee@2601:197:600:42a7:9055:8d95:4498:c957) has quit (Remote host closed the connection)
2019-01-25 08:43:28	-->	marco_t (~marco_t@181.231.118.54) has joined #haskell
2019-01-25 08:43:58	-->	lee_ (~lee@2601:197:600:42a7:9055:8d95:4498:c957) has joined #haskell
2019-01-25 08:44:10	Lycurgus	like CRISPR is Just a tool
2019-01-25 08:44:57	<--	lee_ (~lee@2601:197:600:42a7:9055:8d95:4498:c957) has quit (Remote host closed the connection)
2019-01-25 08:45:11	<--	ltchen (~ltchen@host-92-30-204-54.as13285.net) has quit (Remote host closed the connection)
2019-01-25 08:45:38	-->	lee_ (~lee@2601:197:600:42a7:9055:8d95:4498:c957) has joined #haskell
2019-01-25 08:45:42	sm	pandoc, shellcheck and postgrest are the big three in github stars. purescript and elm are the next tier. Then it's Haxl, cardano, stack, luna, idris.
2019-01-25 08:46:25	Lycurgus	is that a stray t on pg?
2019-01-25 08:46:30	 *	ski . o O ( Neuro-Linguistic Programming ? )
2019-01-25 08:46:38	-->	NoidedSuper (~asuper@2602:ae:1039:400:6241:8f35:fa44:c52e) has joined #haskell
2019-01-25 08:46:48	-->	ltchen (~ltchen@host-92-30-204-54.as13285.net) has joined #haskell
2019-01-25 08:46:49	Welkin	natural language processing
2019-01-25 08:46:56	-->	jmcarthur (~jmcarthur@69.142.145.138) has joined #haskell
2019-01-25 08:46:57	 *	Lycurgus goes bonk bonk on the ski head
2019-01-25 08:47:00	Welkin	no hypo-rapist stuff
2019-01-25 08:47:04	Welkin	hynpo*
2019-01-25 08:47:07	Welkin	hypno*
2019-01-25 08:47:30	ski	heh
2019-01-25 08:47:37	ski	and CRISPR ?
2019-01-25 08:47:42	Welkin	no idea
2019-01-25 08:47:46	Welkin	it's a techinque for gene editing
2019-01-25 08:48:00	<--	marco_t (~marco_t@181.231.118.54) has quit (Remote host closed the connection)
2019-01-25 08:48:06	Welkin	the full name is never important
2019-01-25 08:48:07	<--	lee_ (~lee@2601:197:600:42a7:9055:8d95:4498:c957) has quit (Read error: Connection reset by peer)
2019-01-25 08:48:14	Welkin	they try to make clever acronyms in science
2019-01-25 08:48:18	Welkin	so the full name is oftne meaningless
2019-01-25 08:48:39	Welkin	clustered regularly interspaced short palindromic repeats
2019-01-25 08:48:41	Welkin	apparently
2019-01-25 08:48:48	Lycurgus	conserved repeating intersomething palandromic repeats
2019-01-25 08:48:57	ski	(WP points me to DNA stuff. "CRISPR is a family of DNA sequences found within the genomes of prokaryotic organisms such as bacteria and archaea. These sequences are derived from DNA fragments from viruses that have previously infected the prokaryote and are used to detect and destroy DNA from similar viruses during subsequent infections. Hence these sequences play a key role in the antiviral defense system of prokaryotes.")
2019-01-25 08:49:03	Lycurgus	oh yeah clustered
2019-01-25 08:49:08	-->	fmixing (~fmixing@5.18.98.152) has joined #haskell
2019-01-25 08:49:24	ski	so how is CRISPR just a tool ?
2019-01-25 08:49:27	benzrf	CRISPR drawer
2019-01-25 08:49:32	-->	jchia_ (~jchia@58.32.32.5) has joined #haskell
2019-01-25 08:49:36	Welkin	it's a technique for gene editing
2019-01-25 08:49:41	Lycurgus	if WP is word press, figures, CRISPR is much more than that
2019-01-25 08:49:47	ski	nah, Wikipedia
2019-01-25 08:50:06	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 246 seconds)
2019-01-25 08:50:11	Lycurgus	https://www.youtube.com/watch?v=4YKFw2KZA5o
2019-01-25 08:50:26	-->	marco_t (~marco_t@181.231.118.54) has joined #haskell
2019-01-25 08:50:46	Welkin	wikipedia is awful lately
2019-01-25 08:50:57	Lycurgus	yeah I stopped editing completely
2019-01-25 08:50:57	Welkin	I often find myself reading broken english
2019-01-25 08:51:15	<--	ltchen (~ltchen@host-92-30-204-54.as13285.net) has quit (Ping timeout: 245 seconds)
2019-01-25 08:51:22	Welkin	I have to stop and go "what!?" and re-read it five times
2019-01-25 08:51:45	Lycurgus	Criticism of monarchy was my absolute last, cold turkey from it
2019-01-25 08:52:01	Welkin	are russians editing wikipedia or something?
2019-01-25 08:52:15	<--	lawlesseel (~lawlessee@gateway/tor-sasl/lawlesseel) has quit (Ping timeout: 256 seconds)
2019-01-25 08:52:25	Lycurgus	yeah but wiki is much stronger in dealing with them
2019-01-25 08:52:34	Lycurgus	they really prey best on firms
2019-01-25 08:52:56	Lycurgus	and communities of dummies
2019-01-25 08:53:18	Lycurgus	which does describe the wiki masses but not the WMF staff
2019-01-25 08:53:28	<--	hph^ (hph@ip98-186-247-88.mc.at.cox.net) has quit (Read error: Connection reset by peer)
2019-01-25 08:53:43	-->	hph^ (~hph@ip98-186-247-88.mc.at.cox.net) has joined #haskell
2019-01-25 08:53:44	<--	hph^ (~hph@ip98-186-247-88.mc.at.cox.net) has quit (Max SendQ exceeded)
2019-01-25 08:53:58	-->	hph^ (nhh@ip98-186-247-88.mc.at.cox.net) has joined #haskell
2019-01-25 08:53:59	<--	hph^ (nhh@ip98-186-247-88.mc.at.cox.net) has quit (Max SendQ exceeded)
2019-01-25 08:54:24	-->	hph^ (~hph@ip98-186-247-88.mc.at.cox.net) has joined #haskell
2019-01-25 08:54:29	<--	fmixing (~fmixing@5.18.98.152) has quit (Ping timeout: 250 seconds)
2019-01-25 08:54:32	-->	Sheilong (uid293653@gateway/web/irccloud.com/x-teaeorrzpfdsbxvr) has joined #haskell
2019-01-25 08:55:08	<--	hph^ (~hph@ip98-186-247-88.mc.at.cox.net) has quit (Excess Flood)
2019-01-25 08:55:35	-->	hph^ (hph@ip98-186-247-88.mc.at.cox.net) has joined #haskell
2019-01-25 08:55:36	<--	hph^ (hph@ip98-186-247-88.mc.at.cox.net) has quit (Max SendQ exceeded)
2019-01-25 08:55:50	-->	hph^ (hph@ip98-186-247-88.mc.at.cox.net) has joined #haskell
2019-01-25 08:55:50	<--	hph^ (hph@ip98-186-247-88.mc.at.cox.net) has quit (Max SendQ exceeded)
2019-01-25 08:56:04	-->	hph^ (hph@ip98-186-247-88.mc.at.cox.net) has joined #haskell
2019-01-25 08:56:05	<--	hph^ (hph@ip98-186-247-88.mc.at.cox.net) has quit (Max SendQ exceeded)
2019-01-25 08:56:18	-->	hph^ (hph@ip98-186-247-88.mc.at.cox.net) has joined #haskell
2019-01-25 08:56:19	<--	hph^ (hph@ip98-186-247-88.mc.at.cox.net) has quit (Max SendQ exceeded)
2019-01-25 08:56:34	-->	aabac (~aabac@unaffiliated/aabac) has joined #haskell
2019-01-25 08:56:38	-->	hph^ (hph@ip98-186-247-88.mc.at.cox.net) has joined #haskell
2019-01-25 08:56:39	<--	hph^ (hph@ip98-186-247-88.mc.at.cox.net) has quit (Max SendQ exceeded)
2019-01-25 08:56:50	<--	jneira (4f9c6c37@gateway/web/freenode/ip.79.156.108.55) has quit (Ping timeout: 256 seconds)
2019-01-25 08:59:22	<--	Lycurgus (~niemand@cpe-45-46-138-162.buffalo.res.rr.com) has quit (Quit: Exeunt)
2019-01-25 08:59:58	<--	codesoup (~codesoup@174.119.180.211) has quit (Remote host closed the connection)
2019-01-25 09:00:10	geekosaur	the actual tool is CRISPR/Cas9
2019-01-25 09:00:37	geekosaur	Cas9 being a protein that grabs a CRISPR sequence, and when that grabs onto something floating in the cell, chops up the floater
2019-01-25 09:01:09	geekosaur	then hauls the fragments to be incorporated into new CRISPR sequences
2019-01-25 09:01:49	geekosaur	hence the funny acronym; it's freezing samples of invading bacteriophages so the cell can react to them or their relatives (they mutate quickly, so one fragment is never enough)
2019-01-25 09:03:04	<--	doyougnu (doyougnu@128-193-154-26.ptpg.oregonstate.edu) has quit (Ping timeout: 240 seconds)
2019-01-25 09:06:54	<--	marco_t (~marco_t@181.231.118.54) has quit (Remote host closed the connection)
2019-01-25 09:07:02	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-25 09:07:12	-->	marco_t (~marco_t@181.231.118.54) has joined #haskell
2019-01-25 09:09:24	<--	silver (~silver@37.214.84.43) has quit (Read error: Connection reset by peer)
2019-01-25 09:10:08	-->	mekeor (~mekeor@cable-static-165-3.muttenznet.ch) has joined #haskell
2019-01-25 09:10:13	-->	codesoup (~codesoup@174.119.180.211) has joined #haskell
2019-01-25 09:11:26	<--	oo_miguel (~miguel@89-75-127-111.dynamic.chello.pl) has quit (Read error: Connection reset by peer)
2019-01-25 09:11:27	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 246 seconds)
2019-01-25 09:11:40	<--	pera (~pera@unaffiliated/pera) has quit (Ping timeout: 245 seconds)
2019-01-25 09:13:03	-->	merijn (~merijn@212.238.239.156) has joined #haskell
2019-01-25 09:15:40	-->	nbloomf (~nbloomf@2600:1700:83e0:1f40:6d74:a91e:18fc:6759) has joined #haskell
2019-01-25 09:16:02	<--	michaels_ (~michaelsd@38.126.31.226) has quit (Remote host closed the connection)
2019-01-25 09:17:27	<--	merijn (~merijn@212.238.239.156) has quit (Ping timeout: 250 seconds)
2019-01-25 09:18:53	<--	jeltsch (~wolfgang@9b0c-573f-2dc9-c937-3e80-82b2-07d0-2001.dyn.estpak.ee) has quit (Ping timeout: 240 seconds)
2019-01-25 09:19:11	<--	urodna (~urodna@unaffiliated/urodna) has quit (Ping timeout: 268 seconds)
2019-01-25 09:21:12	-->	ar1a (~ar1a@cr-27.54.142.23.45ru.net.au) has joined #haskell
2019-01-25 09:21:40	-->	nan` (~nan`@cpe-75-86-97-30.wi.res.rr.com) has joined #haskell
2019-01-25 09:21:49	ar1a	how can i safely run user input as haskell code? kind of like > or % with yahb lambdabot 
2019-01-25 09:22:59	<--	aplainzetakind (~dk@2E8BD6FE.catv.pool.telekom.hu) has quit (Ping timeout: 268 seconds)
2019-01-25 09:25:21	zachk	hint maybe iirc 
2019-01-25 09:25:21	-->	ltchen (~ltchen@host-92-30-204-54.as13285.net) has joined #haskell
2019-01-25 09:26:07	<--	nan` (~nan`@cpe-75-86-97-30.wi.res.rr.com) has quit (Ping timeout: 250 seconds)
2019-01-25 09:26:14	-->	justan0theruser (~justanoth@unaffiliated/justanotheruser) has joined #haskell
2019-01-25 09:26:31	-->	replay_ (~replay@pdpc/supporter/student/replay) has joined #haskell
2019-01-25 09:26:33	<--	replay (~replay@pdpc/supporter/student/replay) has quit (Ping timeout: 250 seconds)
2019-01-25 09:26:44	-->	fennecdjay (~djay@apoitiers-259-1-57-178.w92-134.abo.wanadoo.fr) has joined #haskell
2019-01-25 09:26:54	amx	ar1a: I think that's the whole point of Safe Haskell
2019-01-25 09:27:52	ar1a	amx: ty
2019-01-25 09:28:10	amx	https://wiki.haskell.org/Safely_running_untrusted_Haskell_code
2019-01-25 09:28:45	<--	justanotheruser (~justanoth@unaffiliated/justanotheruser) has quit (Ping timeout: 245 seconds)
2019-01-25 09:28:52	--	justan0theruser is now known as justanotheruser
2019-01-25 09:29:19	<--	replay_ (~replay@pdpc/supporter/student/replay) has quit (Client Quit)
2019-01-25 09:29:20	Welkin	pipe it into /dev/null
2019-01-25 09:30:53	<--	ltchen (~ltchen@host-92-30-204-54.as13285.net) has quit (Ping timeout: 240 seconds)
2019-01-25 09:30:54	<--	ar1a (~ar1a@cr-27.54.142.23.45ru.net.au) has left #haskell ("WeeChat 2.3")
2019-01-25 09:31:19	<--	jao (~jao@pdpc/supporter/professional/jao) has quit (Ping timeout: 250 seconds)
2019-01-25 09:32:03	-->	nyc (~nyc@unaffiliated/wli) has joined #haskell
2019-01-25 09:34:38	<--	uglyfigurine (~uglyfigur@c-73-209-130-115.hsd1.il.comcast.net) has quit (Remote host closed the connection)
2019-01-25 09:35:13	<--	rblaze (~Adium@2620:10d:c091:200::7:cec7) has quit (Ping timeout: 268 seconds)
2019-01-25 09:36:03	<--	fennecdjay (~djay@apoitiers-259-1-57-178.w92-134.abo.wanadoo.fr) has quit (Quit: WeeChat 2.3)
2019-01-25 09:38:18	<--	leungbk (~user@2605:e000:1315:546:dfd7:1f82:6204:3216) has quit (Ping timeout: 268 seconds)
2019-01-25 09:38:30	-->	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has joined #haskell
2019-01-25 09:38:30	-->	erisco (~erisco@107-179-195-51.cpe.teksavvy.com) has joined #haskell
2019-01-25 09:39:17	<--	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has quit (Ping timeout: 256 seconds)
2019-01-25 09:39:54	-->	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has joined #haskell
2019-01-25 09:40:24	<--	elgot (~elgot@c83-249-187-114.bredband.comhem.se) has quit (Ping timeout: 240 seconds)
2019-01-25 09:41:04	-->	DasBrain (~Johannes1@unaffiliated/johannes13) has joined #haskell
2019-01-25 09:41:18	<--	DasBrain (~Johannes1@unaffiliated/johannes13) has quit (Read error: Connection reset by peer)
2019-01-25 09:42:30	-->	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has joined #haskell
2019-01-25 09:42:34	-->	recursion-ninja (186658ca@gateway/web/freenode/ip.24.102.88.202) has joined #haskell
2019-01-25 09:43:00	c_wraith	@hackage mueval ar1a, this is probably what you want. it's what lambdabot uses.
2019-01-25 09:43:00	-->	DasBrain (~Johannes1@unaffiliated/johannes13) has joined #haskell
2019-01-25 09:43:01	lambdabot	http://hackage.haskell.org/package/mueval ar1a, this is probably what you want. it's what lambdabot uses.
2019-01-25 09:43:07	<--	DasBrain (~Johannes1@unaffiliated/johannes13) has quit (Read error: Connection reset by peer)
2019-01-25 09:43:27	<--	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has quit (Ping timeout: 250 seconds)
2019-01-25 09:43:53	recursion-ninja	How do I change one element at a given index of a bytestring. I looked at the ByteString API and there doesn't seem to export a function to do this. I was looking for something along the lines of ByteString -> Int -> Char -> ByteString. Am I missing something?
2019-01-25 09:44:40	Axman6	Char would be the wrong type, should be Word8, but also doing that will be quite inefficient
2019-01-25 09:45:40	-->	elgot (~elgot@c83-249-187-114.bredband.comhem.se) has joined #haskell
2019-01-25 09:46:07	-->	DasBrain (~Johannes1@unaffiliated/johannes13) has joined #haskell
2019-01-25 09:47:01	lyxia	if it's really a one off thing, you can slice the bytestring to rebuild it. Otherwise if you really want mutation, convert to a mutable vector.
2019-01-25 09:48:14	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-25 09:48:24	<--	darjeeling_ (~darjeelin@205.175.106.167) has quit (Ping timeout: 240 seconds)
2019-01-25 09:48:24	<--	mountaingoat (~mountaing@unaffiliated/mountaingoat) has quit (Ping timeout: 240 seconds)
2019-01-25 09:48:50	<--	dale (~dale@unaffiliated/dale) has quit (Quit: dale)
2019-01-25 09:49:36	DasBrain	Hi, I try to understand Lenses. In particular, according to the lens tutorial Control.Lens.Tutorial, the type Lens' a b = forall f . Functor f => (b -> f b) -> (a -> f a) looks kind of simple.
2019-01-25 09:50:05	-->	Gurkenglas (~Gurkengla@unaffiliated/gurkenglas) has joined #haskell
2019-01-25 09:50:50	DasBrain	A function, when given some function to convert the value to a Functor, returns a function which will turn some other value into a Functor.
2019-01-25 09:51:03	c_wraith	DasBrain, are you trying to use them, or understand their implementation?
2019-01-25 09:51:12	DasBrain	Understand them.
2019-01-25 09:52:03	c_wraith	OK, then first. only types can be an instance of Functor. values are not Functors, nor are they not-Functors
2019-01-25 09:52:12	<--	zachk (~zachk@pool-108-26-37-159.syrcny.east.verizon.net) has quit (Quit: Leaving)
2019-01-25 09:52:24	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 240 seconds)
2019-01-25 09:52:39	c_wraith	a function cannot return a Functor, because functions return values.
2019-01-25 09:52:49	-->	sedeki (~textual@unaffiliated/sedeki) has joined #haskell
2019-01-25 09:53:04	DasBrain	Yeah.
2019-01-25 09:53:24	sedeki	hello all, i've read haskellbook, now what? i don't feel like i have a sufficient theoretical foundation
2019-01-25 09:53:34	ski	`Maybe' (together with its implementation of `fmap', satisfying laws) is a functor. `Just False' is not a functor
2019-01-25 09:54:14	DasBrain	I don't have all the nessencary technical terms, so I was probably not very specific in my wording.
2019-01-25 09:54:24	<--	yyy (~yyy@unaffiliated/tinnotl) has quit (Ping timeout: 240 seconds)
2019-01-25 09:54:30	lyxia	sedeki: isn't there an exercise at the end where you build a whole program
2019-01-25 09:54:33	c_wraith	DasBrain, the van Laarhoven encoding of lenses is indeed a rather simple encoding. the trick is how flexible it lets you be with only minor modifications
2019-01-25 09:54:44	ski	sedeki : perhaps CIS194, Typeclassopedia, Data61
2019-01-25 09:55:10	c_wraith	DasBrain, have you watched the Simon Peyton Jones video on skillsmatter that lens links to? it's a great place to start
2019-01-25 09:55:52	c_wraith	(that man is an amazingly skilled educator. I wish I was that good.)
2019-01-25 09:56:36	DasBrain	Ok, to quote the tutorial which the point I have a problem understanding it: "You might wonder how you can fit both getter and setter functionality in a single value like this. The trick is that we get to pick what Functor we specialize f to and depending on which Functor we pick we get different features."
2019-01-25 09:57:18	c_wraith	have you watched the video? it spends a lot of time explaining that.
2019-01-25 09:57:40	DasBrain	Ok, I'll watch it. Thank you.
2019-01-25 09:58:05	c_wraith	I understand if video isn't your favorite format to learn something. it's not mine either. this one is so good I recommend it anyway. :)
2019-01-25 09:58:13	sedeki	ski bookmarked, thanks
2019-01-25 09:58:24	ski	@where CIS194
2019-01-25 09:58:25	lambdabot	https://www.seas.upenn.edu/~cis194/spring13/lectures.html
2019-01-25 09:58:28	ski	@where Typeclassopedia
2019-01-25 09:58:29	lambdabot	http://www.haskell.org/haskellwiki/Typeclassopedia
2019-01-25 09:58:34	ski	@where AAM
2019-01-25 09:58:34	lambdabot	http://www.haskell.org/haskellwiki/All_About_Monads
2019-01-25 09:58:37	ski	@where Data61
2019-01-25 09:58:37	lambdabot	Data61 Functional Programming Course <https://github.com/data61/fp-course>,<https://qfpl.io/links/2017-october-fp-course/> by Tony Morris,Mark Hibberd
2019-01-25 09:58:52	sedeki	404 not found (last one)
2019-01-25 09:59:22	<--	sedeki (~textual@unaffiliated/sedeki) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-01-25 10:00:12	DasBrain	I don't like to signup to random pages.
2019-01-25 10:01:16	c_wraith	also fair.
2019-01-25 10:01:24	<--	Niamkik (~Niamkik@80.67.190.201) has quit (Ping timeout: 240 seconds)
2019-01-25 10:01:46	<--	darithorn (~darithorn@75.174.234.76) has quit (Quit: Leaving)
2019-01-25 10:01:51	c_wraith	well, are you familiar with how polymorphism works in Haskell?
2019-01-25 10:01:54	-->	mountaingoat (mountaingo@gateway/vpn/privateinternetaccess/mountaingoat) has joined #haskell
2019-01-25 10:03:25	c_wraith	like, what it means for a function to have the type Functor f => (Int -> f Int) -> ((Int, String) -> f (Int, String))
2019-01-25 10:03:47	<--	fresheyeball (~isaac@c-71-237-105-37.hsd1.co.comcast.net) has quit (Quit: WeeChat 2.2)
2019-01-25 10:03:53	c_wraith	I've chosen a silly example to make it monomorphic in everything but f
2019-01-25 10:04:32	shachaf	Control.Lens.Tutorial? What's that?
2019-01-25 10:04:39	<--	Welkin (~Welkin@047-227-169-219.res.spectrum.com) has quit (Quit: leaving)
2019-01-25 10:04:41	shachaf	Oh, Tekmo's thing, right.
2019-01-25 10:05:24	shachaf	So many explanations of lens just pull the Functor f => (a -> f b) -> s -> f t thing out of thin air, which seems like such an odd way to do it.
2019-01-25 10:05:56	c_wraith	yeah, that's why I like SPJ's video
2019-01-25 10:06:15	c_wraith	but I acknowledge the registration barrier is annoying.
2019-01-25 10:06:22	ski	which video are we talking about ?
2019-01-25 10:06:23	<--	mountaingoat (mountaingo@gateway/vpn/privateinternetaccess/mountaingoat) has quit (Ping timeout: 240 seconds)
2019-01-25 10:06:36	DasBrain	myLens Identity (3, "foo") = Identity (3, "foo")
2019-01-25 10:06:36	<--	oisdk (~textual@86-45-6-241-dynamic.agg2.dyx.chf-qkr.eircom.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-25 10:06:37	--	amalloy is now known as amalloy_
2019-01-25 10:06:41	c_wraith	SPJ's introduction to lenses on skillsmatter
2019-01-25 10:06:57	-->	darithorn (~darithorn@75.174.234.76) has joined #haskell
2019-01-25 10:07:54	DasBrain	This video: https://player.vimeo.com/video/76506719?api=1&title=0 It's an hour, so.. be right back?
2019-01-25 10:08:41	ski	"Lenses: compositional data access and manipulation" by Simon Peyton-Jones in 2013-10-09 at <https://skillsmatter.com/skillscasts/4251-lenses-compositional-data-access-and-manipulation>
2019-01-25 10:08:49	ski	?
2019-01-25 10:08:58	shachaf	c_wraith: Didn't his video do that too?
2019-01-25 10:09:07	-->	antsmartian (~antsmarti@171.60.254.120) has joined #haskell
2019-01-25 10:09:13	shachaf	Maybe I'm thinking of something else.
2019-01-25 10:09:18	c_wraith	ski, yes
2019-01-25 10:09:41	 *	ski gets "Sorry. Because of its privacy settings, this video cannot be played here." for the link DasBrain provided
2019-01-25 10:10:07	c_wraith	shachaf, no, he go to it from starting with get, set, modify, then adding modifyIO, then finally generalizing that
2019-01-25 10:10:12	c_wraith	*got to it
2019-01-25 10:10:14	DasBrain	Ahh, well, it's the URL of the IFrame on skillsmatter.
2019-01-25 10:10:53	<--	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has quit (Ping timeout: 240 seconds)
2019-01-25 10:10:54	shachaf	Hmm.
2019-01-25 10:11:00	<--	ph88 (~ph88@a79-169-57-95.cpe.netcabo.pt) has quit (Quit: Leaving)
2019-01-25 10:11:02	shachaf	Maybe I'm remembering wrong.
2019-01-25 10:11:06	c_wraith	shachaf, no idea if it has anything to do with the historical development method, but it's a good story
2019-01-25 10:11:17	<--	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has quit (Ping timeout: 272 seconds)
2019-01-25 10:12:29	shachaf	I still think the natural way to do it is Setter->Traversal->Lens
2019-01-25 10:13:00	shachaf	But I never wrote that up except in IRC. And now I'm a grouch so it's too late.
2019-01-25 10:13:07	-->	o1lo01ol1o (~o1lo01ol1@cpe-74-72-45-166.nyc.res.rr.com) has joined #haskell
2019-01-25 10:14:08	c_wraith	I did like edwardk calling Gibbons' "The Essence of the Iterator Pattern" the old testament of lens.
2019-01-25 10:15:04	iqubic	I learned about Lenses first, then traversals.
2019-01-25 10:15:11	-->	pplorins (~Mutter@223.104.63.3) has joined #haskell
2019-01-25 10:15:12	-->	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has joined #haskell
2019-01-25 10:16:39	shachaf	Anyway I don't think looking at the way things were figured out historically is necessarily particularly good.
2019-01-25 10:16:59	shachaf	(Though I still have a soft spot for "(g a -> f b) -> g s -> f t", which doesn't exist anywhere anymore.)
2019-01-25 10:17:04	<--	o1lo01ol1o (~o1lo01ol1@cpe-74-72-45-166.nyc.res.rr.com) has quit (Ping timeout: 240 seconds)
2019-01-25 10:17:42	<--	pplorins (~Mutter@223.104.63.3) has quit (Client Quit)
2019-01-25 10:19:11	jackdk	is it correct to say that while you could do lens with Profunctor p => p a b -> p s t, Haskell does it with Functor f => (a -> f b) -> s -> f t so it lines up with the type of Data.Traversable.traverse?
2019-01-25 10:19:37	<--	TipsyMe (~TipsyMe@50-50-239-253.waus.wi.frontiernet.net) has quit (Quit: TipsyMe)
2019-01-25 10:19:39	<--	Synthetica (uid199651@gateway/web/irccloud.com/x-uaccfagugdtdcxfx) has quit (Quit: Connection closed for inactivity)
2019-01-25 10:19:41	-->	novum (~novumsens@unaffiliated/novumsensum) has joined #haskell
2019-01-25 10:19:41	c_wraith	anyway, SPJ did have a good story. each new modify function was well motivated, then he made a great show of demonstrating how all of the other functions can be derived from the last one.
2019-01-25 10:19:53	shachaf	jackdk: That's what the lens library does.
2019-01-25 10:20:11	-->	chongwish (~chongwish@27.38.32.20) has joined #haskell
2019-01-25 10:20:26	shachaf	Well, in general it does p a (f b) -> p s (f t), so you can choose p = (->) and get something compatible with traverse.
2019-01-25 10:20:43	c_wraith	jackdk, I don't think that's the biggest contributor. I think the biggest contributor is the ability to write indexed optics that unify down to non-indexed ones.
2019-01-25 10:21:06	c_wraith	by varying the choice of p in shachaf's example.
2019-01-25 10:21:13	shachaf	I guess one of those ps can be a q to make it more general, sure.
2019-01-25 10:21:25	shachaf	But the f is pretty superfluous.
2019-01-25 10:21:35	shachaf	You can always add it to your profunctor instead.
2019-01-25 10:21:50	jackdk	yeah okay, so it's an ergonomic thing rather than a theoretical one?
2019-01-25 10:22:15	-->	SolJ_ (465cf550@gateway/web/freenode/ip.70.92.245.80) has joined #haskell
2019-01-25 10:22:20	-->	slack1256 (~slack1256@181-163-61-16.baf.movistar.cl) has joined #haskell
2019-01-25 10:22:47	-->	cheater (~cheater@unaffiliated/cheater) has joined #haskell
2019-01-25 10:23:34	shachaf	Yes.
2019-01-25 10:25:26	SolJ_	jd
2019-01-25 10:25:49	-->	pera (~pera@unaffiliated/pera) has joined #haskell
2019-01-25 10:26:18	<--	chongwish (~chongwish@27.38.32.20) has quit (Read error: Connection reset by peer)
2019-01-25 10:26:32	<--	nbloomf (~nbloomf@2600:1700:83e0:1f40:6d74:a91e:18fc:6759) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-25 10:26:53	<--	elgot (~elgot@c83-249-187-114.bredband.comhem.se) has quit (Ping timeout: 240 seconds)
2019-01-25 10:27:00	-->	elgot (~elgot@c83-249-187-114.bredband.comhem.se) has joined #haskell
2019-01-25 10:29:30	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-25 10:30:51	<--	Geezus42 (~Geezus42@072-182-213-208.res.spectrum.com) has quit (Quit: WeeChat 2.3)
2019-01-25 10:30:58	-->	mountaingoat (mountaingo@gateway/vpn/privateinternetaccess/mountaingoat) has joined #haskell
2019-01-25 10:34:09	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 250 seconds)
2019-01-25 10:34:56	<--	SolJ_ (465cf550@gateway/web/freenode/ip.70.92.245.80) has quit (Quit: Page closed)
2019-01-25 10:38:02	-->	Niamkik (~Niamkik@80.67.190.201) has joined #haskell
2019-01-25 10:38:45	<--	iqubic (~user@98.232.18.124) has quit (Ping timeout: 245 seconds)
2019-01-25 10:38:47	-->	nan` (~nan`@cpe-75-86-97-30.wi.res.rr.com) has joined #haskell
2019-01-25 10:39:41	-->	iqubic (~user@98.232.18.124) has joined #haskell
2019-01-25 10:41:12	-->	pie_ (~pie_@unaffiliated/pie-/x-0787662) has joined #haskell
2019-01-25 10:42:37	iqubic	Well, I just got a complete system slow down caused by a rouge instance of GHC.
2019-01-25 10:43:48	-->	rprije (~rprije@ppp118-209-115-8.bras1.mel11.internode.on.net) has joined #haskell
2019-01-25 10:44:33	<--	reactormonk (~tass@185.183.106.180) has quit (Ping timeout: 250 seconds)
2019-01-25 10:44:52	-->	yyt16384 (~yyt16384@unaffiliated/yyt16384) has joined #haskell
2019-01-25 10:45:17	--	amalloy_ is now known as amalloy
2019-01-25 10:45:33	iqubic	It used like 4GB of my swap and slowed everything down. Luckily htop exists.
2019-01-25 10:46:17	nullremains	try a black instance of GHC
2019-01-25 10:46:52	-->	machined1od (~machinedg@198-48-220-190.cpe.pppoe.ca) has joined #haskell
2019-01-25 10:47:12	iqubic	Huh?
2019-01-25 10:47:21	nullremains	rouge = red
2019-01-25 10:48:01	iqubic	I meant rogue.
2019-01-25 10:48:11	nullremains	yeah, bad joke, continue on...
2019-01-25 10:48:41	iqubic	Well, somehow GHC decided that it wanted to run as a background program that I couldn't easily kill.
2019-01-25 10:48:42	<--	jmcarthur (~jmcarthur@69.142.145.138) has quit (Ping timeout: 268 seconds)
2019-01-25 10:48:53	<--	Niamkik (~Niamkik@80.67.190.201) has quit (Ping timeout: 250 seconds)
2019-01-25 10:48:58	iqubic	Except for with htop.
2019-01-25 10:49:16	iqubic	It used all my RAM and most of my SWAP too.
2019-01-25 10:49:53	nullremains	impressive, I run without swap so that would be a reboot for me
2019-01-25 10:50:43	iqubic	Well, it was a reboot, the first time. But then I ran into the same issues when I tried to resume my code editing. The second time I was able to use HTOP effectively.
2019-01-25 10:51:08	iqubic	I might not want to continue using Dante for Emacs in the future.
2019-01-25 10:51:17	-->	Johannes13 (~Johannes1@unaffiliated/johannes13) has joined #haskell
2019-01-25 10:51:46	nullremains	In this case, Dante's inferno
2019-01-25 10:53:13	<--	darithorn (~darithorn@75.174.234.76) has quit (Ping timeout: 250 seconds)
2019-01-25 10:53:37	<--	antsmartian (~antsmarti@171.60.254.120) has quit (Remote host closed the connection)
2019-01-25 10:54:28	iqubic	Och, that's a terrible joke.
2019-01-25 10:54:34	<--	DasBrain (~Johannes1@unaffiliated/johannes13) has quit (Ping timeout: 250 seconds)
2019-01-25 10:54:58	-->	totte_ (~totte@chakra/totte) has joined #haskell
2019-01-25 10:55:38	<--	totte (~totte@chakra/totte) has quit (Ping timeout: 272 seconds)
2019-01-25 10:55:50	<--	recursion-ninja (186658ca@gateway/web/freenode/ip.24.102.88.202) has quit (Ping timeout: 256 seconds)
2019-01-25 10:56:09	-->	Niamkik (~Niamkik@2a00:5884:8219::1) has joined #haskell
2019-01-25 10:56:45	nullremains	I thought it was actually pretty good, I mean surely your laptop fans are attempting liftoff when GHC decides to melt your CPU.
2019-01-25 10:56:45	-->	darithorn (~darithorn@75.174.234.76) has joined #haskell
2019-01-25 10:57:02	suzu	what with everyone ditching stack and moving to cabal new-build
2019-01-25 10:57:10	suzu	is cabal the hot shit now
2019-01-25 10:57:13	suzu	what about intero and such
2019-01-25 10:57:18	-->	ziyourenxiang (~ziyourenx@unaffiliated/ziyourenxiang) has joined #haskell
2019-01-25 10:58:32	iqubic	nullremains: That's actually what happen. That's how I noticed the problem in the first place.
2019-01-25 11:00:10	-->	sonofentropy (~k@84-10-10-170.static.chello.pl) has joined #haskell
2019-01-25 11:00:17	<--	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has quit (Remote host closed the connection)
2019-01-25 11:03:47	-->	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has joined #haskell
2019-01-25 11:06:12	<--	bbrodriguez (~Bender_Be@200.57.253.173) has quit (Ping timeout: 244 seconds)
2019-01-25 11:07:31	-->	leungbk (~user@2605:e000:1315:546:dfd7:1f82:6204:3216) has joined #haskell
2019-01-25 11:07:42	<--	andyhuzhill (~andyhuzhi@14.23.45.178) has quit (Quit: andyhuzhill)
2019-01-25 11:08:20	-->	andyhuzhill (~andyhuzhi@14.23.45.178) has joined #haskell
2019-01-25 11:08:23	<--	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has quit (Ping timeout: 240 seconds)
2019-01-25 11:10:34	iqubic	the main issue is that Dante doesn't like dealing with IO or Debug.Trace functions, I think.
2019-01-25 11:10:48	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-25 11:11:31	-->	Henson (~kvirc@23-233-2-26.cpe.pppoe.ca) has joined #haskell
2019-01-25 11:13:18	-->	merijn (~merijn@a212-238-239-156.adsl.xs4all.nl) has joined #haskell
2019-01-25 11:13:29	--	Johannes13 is now known as DasBrain
2019-01-25 11:13:30	<--	milanj (~milan@87.116.181.57) has quit (Quit: This computer has gone to sleep)
2019-01-25 11:13:44	-->	revtintin (~revtintin@101.100.177.178) has joined #haskell
2019-01-25 11:14:28	<--	theDon (~td@94.134.91.6) has quit (Ping timeout: 244 seconds)
2019-01-25 11:15:00	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 245 seconds)
2019-01-25 11:16:21	-->	theDon (~td@94.134.91.11) has joined #haskell
2019-01-25 11:16:57	jackdk	@pl \x -> f x . g
2019-01-25 11:16:57	lambdabot	(. g) . f
2019-01-25 11:17:11	-->	clever (~clever@NixOS/user/clever) has joined #haskell
2019-01-25 11:17:21	<--	dddddd (~dddddd@unaffiliated/dddddd) has quit (Remote host closed the connection)
2019-01-25 11:17:23	<--	merijn (~merijn@a212-238-239-156.adsl.xs4all.nl) has quit (Ping timeout: 240 seconds)
2019-01-25 11:17:43	<--	sonofentropy (~k@84-10-10-170.static.chello.pl) has quit (Quit: sonofentropy)
2019-01-25 11:18:12	-->	sonofentropy (~k@84-10-10-170.static.chello.pl) has joined #haskell
2019-01-25 11:18:29	<--	sonofentropy (~k@84-10-10-170.static.chello.pl) has quit (Client Quit)
2019-01-25 11:18:53	<--	mountaingoat (mountaingo@gateway/vpn/privateinternetaccess/mountaingoat) has quit (Ping timeout: 240 seconds)
2019-01-25 11:20:25	<--	Gurkenglas (~Gurkengla@unaffiliated/gurkenglas) has quit (Ping timeout: 245 seconds)
2019-01-25 11:20:50	DasBrain	@pl \x -> (f x) . (g x)
2019-01-25 11:20:50	lambdabot	liftM2 (.) f g
2019-01-25 11:21:04	DasBrain	@pl liftM2
2019-01-25 11:21:05	lambdabot	liftM2
2019-01-25 11:22:00	DasBrain	c_wraith, thanks for the useful video. My initial questions have been answered. And I get the feeling that I only scratched the surface.
2019-01-25 11:22:15	<--	andyhuzhill (~andyhuzhi@14.23.45.178) has quit (Quit: andyhuzhill)
2019-01-25 11:22:40	c_wraith	DasBrain: you're welcome.  and you've absolutely just scratched the surface.  If/when you have followup questions, feel free to ask.
2019-01-25 11:22:51	-->	andyhuzhill (~andyhuzhi@14.23.45.178) has joined #haskell
2019-01-25 11:23:15	iqubic	@pl \x -> f . x . g
2019-01-25 11:23:16	lambdabot	(f .) . (. g)
2019-01-25 11:23:21	iqubic	Huh??
2019-01-25 11:23:39	iqubic	@unpl (f .) . g
2019-01-25 11:23:40	lambdabot	(\ x x0 -> f (g x x0))
2019-01-25 11:23:48	iqubic	Huh? How does that work???
2019-01-25 11:24:12	DasBrain	@unpl liftM2
2019-01-25 11:24:12	lambdabot	(\ f m1 m2 -> m1 >>= \ x1 -> m2 >>= \ x2 -> return (f x1 x2))
2019-01-25 11:24:25	iqubic	Yeah, that's what that does.
2019-01-25 11:24:34	DasBrain	@unpl liftM2 (.)
2019-01-25 11:24:34	lambdabot	(\ m1 m2 -> m1 >>= \ x1 -> m2 >>= \ x2 -> return (\ x -> x1 (x2 x)))
2019-01-25 11:24:54	c_wraith	iqubic: just substitute in the definition of (.) and then simplify.  There's no other way to learn it
2019-01-25 11:26:29	-->	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has joined #haskell
2019-01-25 11:30:44	<--	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has quit (Ping timeout: 240 seconds)
2019-01-25 11:30:54	russruss	I have no idea how stack works or what it does really - is there a way to install and run a program in an isolated environment without installing anything globally using stack?
2019-01-25 11:31:44	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-25 11:31:55	russruss	I'm familiar with a few package manager tools, including npm and cargo.  I'm having trouble mapping stack to the concepts from these other tools, which may be a bad way to approach it anyways
2019-01-25 11:32:26	russruss	if there's no way to install a program to an isolated environment, I can make do with a different tool, just wondering if there's something I'm missing from stack
2019-01-25 11:33:13	-->	mighty_mosquito (~chadhaa@106.51.28.0) has joined #haskell
2019-01-25 11:33:49	wroathe	russruss: AFAIK stack creates it's own isolated sandbox in .stack-work
2019-01-25 11:34:16	<--	carlomagno (~carlomagn@inet-hqmc01-o.oracle.com) has quit (Remote host closed the connection)
2019-01-25 11:34:19	wroathe	russruss: Not quite the same semantics as NPM, but I think close enough to what it sounds like you're looking for
2019-01-25 11:34:21	russruss	yes, I've noticed this when I've wanted to build something.  In this case, I'm not building anything, I just want to install a program without messing with any of my global state
2019-01-25 11:35:34	jackdk	russruss what program, out of interest?
2019-01-25 11:35:46	russruss	"stack install" seems to install to somewhere like ~/.stack/snapshots/x86_64-osx/lts-8.12/8.0.2/lib/x86_64-osx-ghc-8.0.2
2019-01-25 11:35:55	-->	carlomagno (~carlomagn@inet-hqmc01-o.oracle.com) has joined #haskell
2019-01-25 11:36:15	russruss	clash
2019-01-25 11:36:33	russruss	https://github.com/clash-lang/clash-compiler/wiki/FAQ#how-do-i-run-and-install-clash-using-stack seems to only include global install instructions
2019-01-25 11:36:42	-->	mountaingoat (~mountaing@unaffiliated/mountaingoat) has joined #haskell
2019-01-25 11:37:36	<--	Henson (~kvirc@23-233-2-26.cpe.pppoe.ca) has quit (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
2019-01-25 11:39:44	wroathe	russruss: I can't try this now, but I think Stack lets you specify the local bin path with stack --local-bin-path=foo install my-package
2019-01-25 11:40:33	wroathe	"stack path" prints out the directories stack cares about
2019-01-25 11:40:49	wroathe	"stack --help" prints out that flag
2019-01-25 11:42:16	iqubic	Does anyone know why GHC sometimes hogs all the memory on my system.
2019-01-25 11:43:10	russruss	wroathe: thanks, it seems even if I specify local-bin-path, it still modifies file in the ~/.stack directory, which I don't want.  I think it probably wasn't designed for this usage pattern
2019-01-25 11:43:29	shachaf	Do you mean a lot of address space or a lot of memory actually used?
2019-01-25 11:43:39	MarcelineVQ	"Does anyone know why GHC sometimes hogs all the memory on my system. [when I'm doing <specific task written here>]"
2019-01-25 11:43:43	shachaf	I think the GHC allocator just asks for 1TB of address space at startup nowadays.
2019-01-25 11:44:01	iqubic	It's stolen all my memory twice in a row now, and at this point I'm afraid to ever open GHCI
2019-01-25 11:44:39	-->	MoarSpaceFi (~Forgot_my@65.126.126.193) has joined #haskell
2019-01-25 11:44:51	<--	lagothrix (~lagothrix@unaffiliated/lagothrix) has quit (Killed (tolkien.freenode.net (Nickname regained by services)))
2019-01-25 11:44:53	iqubic	MarcelineVQ: GHC has eaten throug all my RAM and most of my 8GB SWAP and slowed my whole computer down ten fold.
2019-01-25 11:44:57	-->	lagothrix (~lagothrix@unaffiliated/lagothrix) has joined #haskell
2019-01-25 11:45:06	iqubic	I have 8GB RAM, and 8GB Swap.
2019-01-25 11:45:21	maerwald	iqubic: ghc?
2019-01-25 11:45:22	wroathe	iqubic: It always seems like you have the most unique issues
2019-01-25 11:45:23	MarcelineVQ	"while I'm doing <specific task written here"
2019-01-25 11:45:26	maerwald	or cabal
2019-01-25 11:45:33	wroathe	Of anyone I've seen in this channel
2019-01-25 11:45:42	iqubic	maerwald: Actually, I think it was cabal.
2019-01-25 11:45:51	maerwald	iqubic: likely, since default numbers of jobs is unsafe
2019-01-25 11:46:04	maerwald	https://github.com/haskell/cabal/issues/5776
2019-01-25 11:46:11	iqubic	maerwald: Is there a way to tell it to use less jobs.
2019-01-25 11:46:13	-->	Meowitskaitlin (~Meowitska@88-105-153-177.dynamic.dsl.as9105.com) has joined #haskell
2019-01-25 11:46:16	maerwald	--jobs=1
2019-01-25 11:46:52	MarcelineVQ	aka -j1 which is a common shorthand for build systems
2019-01-25 11:47:49	iqubic	MarcelineVQ: I was running `cabal new-repl` and evaluating some functions to test my code. Everything was going fine, until I modified one of my functions to use `traceShowId` Evaluating that was the wrong thing to do.
2019-01-25 11:47:51	maerwald	-j1 is ambigously parsed in some cases afair
2019-01-25 11:47:52	MarcelineVQ	however you just said you were afraid of open ghci, that doesn't sound like a cabal issue. so what specific thing are you doing when the memory is used up?
2019-01-25 11:48:18	maerwald	yeah that sounds you were just recompiling the current project, not dependencies
2019-01-25 11:48:34	iqubic	Memory usage spiked when I ran a function that had just recently been modified.
2019-01-25 11:48:41	MarcelineVQ	suspicious, kinda sounds like you wrote a loop
2019-01-25 11:48:54	iqubic	Oh. I did write a loop.
2019-01-25 11:48:59	iqubic	Doh.
2019-01-25 11:49:19	iqubic	I'm trying to make a recursive parser, and I did actually write a loop.
2019-01-25 11:49:22	MarcelineVQ	This is why being specific with questions is a big deal.
2019-01-25 11:49:30	-->	dale (~dale@unaffiliated/dale) has joined #haskell
2019-01-25 11:49:34	<--	erisco (~erisco@107-179-195-51.cpe.teksavvy.com) has quit (Read error: Connection reset by peer)
2019-01-25 11:49:41	MarcelineVQ	Because that was a one line conclusion/solution to the more specific information.
2019-01-25 11:52:37	<--	OnkelTem (~onkeltem@unaffiliated/fantomas) has quit (Ping timeout: 250 seconds)
2019-01-25 11:52:47	iqubic	Well, this is not the right way to write a parser of mathematical expressions.
2019-01-25 11:53:06	iqubic	http://dpaste.com/3MZBP19
2019-01-25 11:53:19	MarcelineVQ	not so much
2019-01-25 11:53:54	iqubic	What I actually meant was `try minus` which parses something of the form `expr - expr` not `try expr`
2019-01-25 11:54:30	iqubic	I'll update that to include all binary operators once I figure out how to parse things with the correct fixity.
2019-01-25 11:54:51	iqubic	But yeah, that has an infinite loop in it.
2019-01-25 11:58:24	iqubic	Can I use cabal's --jobs=1 flag with new-repl/
2019-01-25 11:58:33	iqubic	s./.?.
2019-01-25 11:59:04	sclv	repl is always single threaded?
2019-01-25 12:00:29	iqubic	Is it? I'm not sure it is? Can a single threaded program still chew through memory rapidly?
2019-01-25 12:00:45	wroathe	Yes it is, and yes it can
2019-01-25 12:00:48	-->	nous1024 (~nous1024@202.26.160.201) has joined #haskell
2019-01-25 12:01:25	-->	o1lo01ol1o (~o1lo01ol1@cpe-74-72-45-166.nyc.res.rr.com) has joined #haskell
2019-01-25 12:01:36	iqubic	So I don't need the --jobs=1 flag when running `cabal new-repl`?
2019-01-25 12:01:55	maerwald	if cabal needs to install deps in order to spawn your repl, it will use ncpus
2019-01-25 12:02:00	maerwald	boom
2019-01-25 12:02:25	maerwald	or just set it globally
2019-01-25 12:02:34	iqubic	maerwald: I had all the dependencies installed already.
2019-01-25 12:02:48	wroathe	But the actual repl itself will be, by default, single threaded
2019-01-25 12:02:54	iqubic	How do I set the jobs flag globally? That is a thing I wish to do.
2019-01-25 12:03:53	<--	marco_t (~marco_t@181.231.118.54) has quit (Remote host closed the connection)
2019-01-25 12:05:21	wroathe	Pass +RTS -N through to GHCI?
2019-01-25 12:05:50	wroathe	Something like cabal new-repl --ghc-options='+RTS -N' should get the job done
2019-01-25 12:06:01	<--	joenio (~joenio@107.170.91.230) has quit (Ping timeout: 250 seconds)
2019-01-25 12:06:11	-->	joenio (~joenio@107.170.91.230) has joined #haskell
2019-01-25 12:06:17	iqubic	What does the +RTS -N flags do?
2019-01-25 12:06:24	<--	o1lo01ol1o (~o1lo01ol1@cpe-74-72-45-166.nyc.res.rr.com) has quit (Ping timeout: 268 seconds)
2019-01-25 12:06:27	<--	markhuge (~markhuge@take.me.down.to.the.butthole.city) has quit (Ping timeout: 250 seconds)
2019-01-25 12:07:30	<--	lastmanstanding (~arjoonn@111.92.49.135) has quit (Ping timeout: 246 seconds)
2019-01-25 12:07:46	-->	tokamak (uid331723@gateway/web/irccloud.com/x-hcfnfkdcrhqoylej) has joined #haskell
2019-01-25 12:07:55	-->	markhuge (~markhuge@take.me.down.to.the.butthole.city) has joined #haskell
2019-01-25 12:08:18	wroathe	https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/runtime_control.html#rts-opts-cmdline
2019-01-25 12:08:24	MarcelineVQ	they're irrelivant to your earlier issue, but youo can find out what they do in the ghc manual
2019-01-25 12:09:09	wroathe	Although I can't imagine why you'd want testing this simple parser to be multi-threaded in the repl
2019-01-25 12:09:55	iqubic	wroathe: I don't.
2019-01-25 12:10:10	iqubic	In fact I want it to use as little memory as possible.
2019-01-25 12:11:05	-->	marco_t (~marco_t@181.231.118.54) has joined #haskell
2019-01-25 12:11:29	-->	peterhil (~peterhil@dsl-hkibng11-50dcc3-14.dhcp.inet.fi) has joined #haskell
2019-01-25 12:11:34	<--	kadoban (~mud@unaffiliated/kadoban) has quit (Quit: bye)
2019-01-25 12:11:43	wroathe	Well, the repl is already single-threaded, and the cause of your earlier issue was the infinite loop
2019-01-25 12:11:49	wroathe	So... problem solved?
2019-01-25 12:12:01	iqubic	I'm too scared to try fixing it.
2019-01-25 12:12:26	iqubic	I don't want to softlock my system for a third time this evening.
2019-01-25 12:18:25	iqubic	wroathe: Well... Good news and bad news.
2019-01-25 12:19:02	iqubic	Bad: I didn't fix my issues. My computer was slowed a bunch.
2019-01-25 12:19:09	wroathe	You've saved a bunch of money on your car insurance by switching to Geico?
2019-01-25 12:19:58	iqubic	Good: I didn't have to reboot, as it was just slow, not completely blocked. I was able to launch htop and kill ghc.
2019-01-25 12:20:17	iqubic	So I'm back to square one here.
2019-01-25 12:20:52	iqubic	I just realized that I didn't actually solve my issue.
2019-01-25 12:21:03	iqubic	I still had an infinite loop.
2019-01-25 12:21:22	wroathe	Then you'll need to spend more time reasoning about your program :P
2019-01-25 12:21:37	<--	jbayardo (~jbayardo@2601:602:9802:93d6:1def:5762:3ec:6d51) has quit (Ping timeout: 264 seconds)
2019-01-25 12:21:58	wroathe	Or maybe someone here can tell you how to get a stack trace at runtime (I haven't figured that out yet)
2019-01-25 12:22:25	iqubic	I know what the issue is.
2019-01-25 12:22:47	<--	slack1256 (~slack1256@181-163-61-16.baf.movistar.cl) has quit (Remote host closed the connection)
2019-01-25 12:25:07	-->	slack1256 (~slack1256@181-163-31-228.baf.movistar.cl) has joined #haskell
2019-01-25 12:25:42	iqubic	http://dpaste.com/3VPGEJ3
2019-01-25 12:25:53	iqubic	That's the code I just ran a moment ago.
2019-01-25 12:25:53	-->	pie__ (~pie_@unaffiliated/pie-/x-0787662) has joined #haskell
2019-01-25 12:26:03	iqubic	It's another infinite loop.
2019-01-25 12:26:23	iqubic	I think I just need to move the minus parser to the end.
2019-01-25 12:27:03	-->	nbloomf (~nbloomf@2600:1700:83e0:1f40:6d74:a91e:18fc:6759) has joined #haskell
2019-01-25 12:27:36	-->	lassulus_ (~lassulus@c-base/crew/lassulus) has joined #haskell
2019-01-25 12:27:36	-->	Sgeo_ (~Sgeo@ool-18b98dd9.dyn.optonline.net) has joined #haskell
2019-01-25 12:27:48	wroathe	Where are minus, func, var, and num defined?
2019-01-25 12:27:59	MarcelineVQ	Seems to me that just means that it'll only loop if the rest fail, so it'll only loop sometimes
2019-01-25 12:28:20	iqubic	No. As that is written, it will always loop.
2019-01-25 12:28:27	MarcelineVQ	I
2019-01-25 12:28:37	MarcelineVQ	'm referring to your proposed change
2019-01-25 12:28:41	iqubic	Oh.
2019-01-25 12:28:53	wroathe	You should paste all of your code
2019-01-25 12:29:40	<--	pie_ (~pie_@unaffiliated/pie-/x-0787662) has quit (Ping timeout: 246 seconds)
2019-01-25 12:30:17	<--	lassulus (~lassulus@c-base/crew/lassulus) has quit (Ping timeout: 250 seconds)
2019-01-25 12:30:17	--	lassulus_ is now known as lassulus
2019-01-25 12:30:23	<--	Sgeo (~Sgeo@ool-18b98dd9.dyn.optonline.net) has quit (Ping timeout: 240 seconds)
2019-01-25 12:30:32	iqubic	I'm not sure how to make a recursive parser parse infix operators properly.
2019-01-25 12:31:54	-->	lambda-11235 (~lambda-11@207.183.239.54) has joined #haskell
2019-01-25 12:32:04	iqubic	Why is this so darn hard?
2019-01-25 12:32:32	MarcelineVQ	because it's your first time
2019-01-25 12:33:15	iqubic	yes. yes it is.
2019-01-25 12:33:37	wroathe	There's plenty of EBNF examples for simple math expression parsers online
2019-01-25 12:33:39	wroathe	http://matt.might.net/articles/grammars-bnf-ebnf/
2019-01-25 12:33:41	-->	thunderrd (~thunderrd@159.192.198.202) has joined #haskell
2019-01-25 12:33:54	iqubic	What is EBNF?
2019-01-25 12:34:00	<--	Ekho (~Ekho@unaffiliated/ekho) has quit (Remote host closed the connection)
2019-01-25 12:34:03	wroathe	You're trying to map your understanding of that to using haskell's parser combinators
2019-01-25 12:34:16	MarcelineVQ	iqubic. when your question fits on one line you ask google.
2019-01-25 12:34:51	AfC	Sometimes if you're having what you suspect is an infinite loop, ghci won't catch it / gets wedged. One thing to try is building to an executable binary. At least ^C will work. And it opens yhe avenue to stack traces if you become desperate.
2019-01-25 12:36:09	AfC	(for the benefit thay the deadlock detection seems to work slightly better)
2019-01-25 12:37:44	-->	Ekho (~Ekho@unaffiliated/ekho) has joined #haskell
2019-01-25 12:37:52	wroathe	http://math.pnw.edu/~rlkraft/cs31600-2012/chapter03/syntax-examples.html
2019-01-25 12:37:58	wroathe	This might be helpful
2019-01-25 12:38:13	iqubic	This is my first parser of any sort.
2019-01-25 12:38:35	wroathe	And EBNF: https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form
2019-01-25 12:39:41	-->	fmixing (~fmixing@5.18.98.152) has joined #haskell
2019-01-25 12:40:51	geekosaur	also wrt ^C, with an executable you can use -fno-omit-yields which sometimes helps
2019-01-25 12:41:06	<--	nyc (~nyc@unaffiliated/wli) has quit (Ping timeout: 246 seconds)
2019-01-25 12:41:07	-->	deviantfero (~deviantfe@ip168-243-230-189.intercom.com.sv) has joined #haskell
2019-01-25 12:41:27	iqubic	Well, I don't know how to write a parser for recursive EBNF grammar.
2019-01-25 12:41:41	iqubic	I mean, one that doesn't loop infinitely.
2019-01-25 12:42:04	<--	xrexeon (~xrexeon@41.237.99.188) has quit (Remote host closed the connection)
2019-01-25 12:42:20	wroathe	Pasting the rest of your code might help us :D
2019-01-25 12:44:08	mniip	eliminate left recursion
2019-01-25 12:44:08	mniip	that's pretty much it
2019-01-25 12:44:24	<--	mighty_mosquito (~chadhaa@106.51.28.0) has quit (Ping timeout: 240 seconds)
2019-01-25 12:45:53	<--	ym555 (~ym@156.199.213.34) has quit (Ping timeout: 250 seconds)
2019-01-25 12:46:15	iqubic	The main roadblock I'm running into is: `expr := expr, "-", expr`
2019-01-25 12:46:18	-->	lastmanstanding (~arjoonn@103.79.223.74) has joined #haskell
2019-01-25 12:46:23	<--	acidjnk (~acid@mue-88-130-58-157.dsl.tropolys.de) has quit (Ping timeout: 240 seconds)
2019-01-25 12:46:42	-->	acidjnk (~acid@i577BCA9D.versanet.de) has joined #haskell
2019-01-25 12:46:46	<--	acidjnk (~acid@i577BCA9D.versanet.de) has left #haskell
2019-01-25 12:46:47	-->	acidjnk (~acid@i577BCA9D.versanet.de) has joined #haskell
2019-01-25 12:46:59	<--	xkapastel (uid17782@gateway/web/irccloud.com/x-wzpvgkrjjrgmlwlh) has quit (Quit: Connection closed for inactivity)
2019-01-25 12:47:35	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 12:48:31	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Quit: leaving)
2019-01-25 12:48:33	iqubic	For some reason I was able to write `func := String, "(", expr, ")"` without running into trouble anywhere.
2019-01-25 12:48:55	iqubic	So I could parse things like "sin(cos(tan(5)))" just fine.
2019-01-25 12:49:15	iqubic	With no infinite loop. It's minus that is screwing me up.
2019-01-25 12:49:25	<--	Sheilong (uid293653@gateway/web/irccloud.com/x-teaeorrzpfdsbxvr) has quit
2019-01-25 12:49:35	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-25 12:49:41	-->	jdawgz959 (~jdawgz959@2601:645:8500:15a2:f448:e4c:6cd6:601d) has joined #haskell
2019-01-25 12:49:43	iqubic	And maybe `func` is just a fluke, IDK.
2019-01-25 12:50:05	<--	leungbk (~user@2605:e000:1315:546:dfd7:1f82:6204:3216) has quit (Ping timeout: 268 seconds)
2019-01-25 12:50:23	<--	nan` (~nan`@cpe-75-86-97-30.wi.res.rr.com) has quit (Ping timeout: 240 seconds)
2019-01-25 12:50:32	ski	that main roadblock appears to be left recursion
2019-01-25 12:51:43	<--	machined1od (~machinedg@198-48-220-190.cpe.pppoe.ca) has quit (Ping timeout: 246 seconds)
2019-01-25 12:52:15	iqubic	I'm not sure what that is, but I'm looking into it online.
2019-01-25 12:53:43	<--	NoidedSuper (~asuper@2602:ae:1039:400:6241:8f35:fa44:c52e) has quit (Quit: Konversation terminated!)
2019-01-25 12:54:14	jdawgz959	Hi all, I am an experience dev and new to Haskell. I have been reading a book about Haskell for the past week and doing some exercises. I want to build a small app and I was thinking of building a basic web api with a relational db. Does anyone have any suggested resources for doing so?
2019-01-25 12:54:26	<--	nocm (~chatzilla@178.141.48.207) has quit (Remote host closed the connection)
2019-01-25 12:54:35	<--	acarrico (~acarrico@dhcp-68-142-35-239.greenmountainaccess.net) has quit (Ping timeout: 245 seconds)
2019-01-25 12:54:45	ski	the first thing `expr' does is attempting the parser `minus'. and the first thing `minus' does is attempting the parser `expr'
2019-01-25 12:55:06	jdawgz959	The purpose of doing so is to upskill in Haskell
2019-01-25 12:55:28	ski	and so it goes round and round, chasing its own tail, without ever possibly getting a parse error, since it never gets to consume any token (which might fail, on mismatch with what was expected)
2019-01-25 12:55:32	iqubic	ski: I get that there is an error there.
2019-01-25 12:55:49	nshepperd1	iqubic: If you had expr := expr that's obviously an infinite loop
2019-01-25 12:56:01	iqubic	right. I understand.
2019-01-25 12:56:28	nshepperd1	iqubic: with recursive descent, 'expr := expr, other stuff' is an infinite loop for much the same reason
2019-01-25 12:56:49	-->	otto_s (~user@p4FF2787D.dip0.t-ipconnect.de) has joined #haskell
2019-01-25 12:57:17	ski	let's say you wanted to parse `expr ::= expr + num | num', how would you solve that ?
2019-01-25 12:58:01	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 250 seconds)
2019-01-25 12:58:02	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 250 seconds)
2019-01-25 12:58:08	ski	(that's about as simple as this problem gets. i suggest attempting to solve something this simple, so you better understand the solution, before going back to what you actually want to parse)
2019-01-25 12:58:20	iqubic	I'm not sure how I would go about solving that.
2019-01-25 12:58:27	iqubic	It looks impossible.
2019-01-25 12:58:28	glguy	Is the answer 'use happy'?
2019-01-25 12:58:35	 *	ski grins
2019-01-25 12:58:44	iqubic	glguy: I don't want to do that.
2019-01-25 12:58:58	iqubic	or, not right now.
2019-01-25 12:59:32	ski	let's say you get the input `2 + 3 + 5 + 7', and you want to build the parse result `Add (Add (Add (Lit 2) (Lit 3)) (Lit 5)) (Lit 7)'
2019-01-25 12:59:44	iqubic	expr ::= num + expr'
2019-01-25 12:59:53	ski	well, that's a good start
2019-01-25 12:59:53	<--	otto_s_ (~user@p4FF27B7A.dip0.t-ipconnect.de) has quit (Ping timeout: 240 seconds)
2019-01-25 13:00:05	iqubic	expr' ::= num | expr
2019-01-25 13:00:11	iqubic	I think. I'm not really sure.
2019-01-25 13:00:18	ski	however, that will get you `Add (Lit 2) (Add (Lit 3) (Add (Lit 5) (Lit 7)))'
2019-01-25 13:00:33	-->	mighty_mosquito (~chadhaa@106.51.28.0) has joined #haskell
2019-01-25 13:00:47	iqubic	Is that not what I want?
2019-01-25 13:01:03	ski	well, it's not the same thing as what i was asking about
2019-01-25 13:01:04	iqubic	Did I create a thing with the wrong associativity?
2019-01-25 13:01:17	ski	yes. imagine you had subtraction instead of addition
2019-01-25 13:01:22	ski	with addition, it matters less
2019-01-25 13:01:42	ski	is there a way you could "fix up" the associativity ?
2019-01-25 13:02:11	iqubic	expr ::= num + expr'
2019-01-25 13:02:37	iqubic	Wait... No my thing won't work.
2019-01-25 13:02:51	ski	(btw, your current version can't parse `42', but that's a valid token stream accepted by the original grammar)
2019-01-25 13:03:28	iqubic	Oh. I'm not sure how to fix the associativeity.
2019-01-25 13:03:50	iqubic	eliminating left recursion is hard.
2019-01-25 13:03:54	<--	jackdk (98537540@gateway/web/cgi-irc/kiwiirc.com/ip.152.83.117.64) has quit (Ping timeout: 240 seconds)
2019-01-25 13:03:58	iqubic	Why is it called left recursion?
2019-01-25 13:04:39	-->	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has joined #haskell
2019-01-25 13:04:49	ski	because the recursive "call" is immediately to the left (with no token preceding it)
2019-01-25 13:04:53	johnw	iqubic: http://www.personal.kent.edu/~rmuhamma/Compilers/MyCompiler/leftRecursion.htm
2019-01-25 13:05:00	<--	mighty_mosquito (~chadhaa@106.51.28.0) has quit (Ping timeout: 245 seconds)
2019-01-25 13:05:18	<--	dale (~dale@unaffiliated/dale) has quit (Quit: dale)
2019-01-25 13:05:24	ski	well, the problem is that you're attempting to parse something like `(((..(((a + b) + c) + d)..) + x) + y) + z' (iow that's the structure of the parse tree you want to get, given a token stream `a + b + c + d + ... + x + y + z')
2019-01-25 13:05:57	-->	ar1a (~ar1a@cr-27.54.142.23.45ru.net.au) has joined #haskell
2019-01-25 13:06:51	ar1a	i have a couple functions i want to test, maybe 8 functions, whats the recommended way of going about that
2019-01-25 13:07:00	ar1a	ive seen people recommend hunit, hspec, quickcheck
2019-01-25 13:07:06	ski	if you'd get something like `a + b + c + d + ... + x + y + z', in C, or Java, or Python, or whatever, and you just wanted to be able to parse something of this form (into the desired, left-leaning, tree/list), in an unprincipled way, how would you do it ?
2019-01-25 13:08:29	<--	nbloomf (~nbloomf@2600:1700:83e0:1f40:6d74:a91e:18fc:6759) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-25 13:09:10	<--	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has quit (Ping timeout: 245 seconds)
2019-01-25 13:09:36	<--	fmixing (~fmixing@5.18.98.152) has quit (Remote host closed the connection)
2019-01-25 13:09:56	iqubic	Wait...
2019-01-25 13:10:09	iqubic	expr ::= num add
2019-01-25 13:10:36	iqubic	add ::= + expr
2019-01-25 13:10:42	iqubic	I think that works?
2019-01-25 13:11:06	-->	fmixing (~fmixing@5.18.98.152) has joined #haskell
2019-01-25 13:11:12	-->	Big_G (~Big_G@50-46-197-243.evrt.wa.frontiernet.net) has joined #haskell
2019-01-25 13:11:40	iqubic	See, I'd check if there is a number at the start, and then keep going as long as the next bit is the `+` symbol followed by another expression.
2019-01-25 13:11:57	iqubic	I think that works.
2019-01-25 13:12:08	iqubic	ski: Is this right?
2019-01-25 13:12:25	iqubic	expr ::= num add | num
2019-01-25 13:12:32	iqubic	add ::= + expr
2019-01-25 13:13:02	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 13:13:09	-->	merijn (~merijn@a212-238-239-156.adsl.xs4all.nl) has joined #haskell
2019-01-25 13:14:26	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-25 13:17:29	-->	osa1 (~omer@haskell/developer/osa1) has joined #haskell
2019-01-25 13:17:44	<--	merijn (~merijn@a212-238-239-156.adsl.xs4all.nl) has quit (Ping timeout: 240 seconds)
2019-01-25 13:18:32	AfC	jdawgz959: that's a great place to start!
2019-01-25 13:19:18	ski	iqubic : it's a good start :)
2019-01-25 13:19:22	AfC	jdawgz959: though I'd suggest keeping it as stock simple as you can for starters,
2019-01-25 13:19:24	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 272 seconds)
2019-01-25 13:19:37	ski	iqubic : that will only parse at most one `+', though
2019-01-25 13:19:44	iqubic	Why?
2019-01-25 13:20:15	ski	oh, right
2019-01-25 13:20:26	-->	mighty_mosquito (~chadhaa@106.51.28.0) has joined #haskell
2019-01-25 13:20:44	ski	yea, it can build `a + (b + c)'
2019-01-25 13:20:57	iqubic	But you are right the better way to do it is.
2019-01-25 13:21:01	ski	it can't build `(a + b) + c', though
2019-01-25 13:21:09	iqubic	expr ::= num add | num
2019-01-25 13:21:22	iqubic	add ::= + add
2019-01-25 13:21:47	ski	the `expr' in `+ expr' is the right operand of the addition symbol. it has nothing to do with the repetition of `+'s that we're trying to capture at the moment
2019-01-25 13:22:03	-->	blistok (~blistok@2604:2000:c647:c300:40af:4732:c7a3:808d) has joined #haskell
2019-01-25 13:22:10	AfC	jdawgz959: there are any number of gotchas. First thing I ever did was a little URL redirector. I wasted lots of time doing things the hard way
2019-01-25 13:22:23	ski	this is why i suggested concentrating on the grammar `expr ::= expr + num | num' at the start, and not `expr ::= expr + expr | num'
2019-01-25 13:22:23	<--	deviantfero (~deviantfe@ip168-243-230-189.intercom.com.sv) has quit (Ping timeout: 240 seconds)
2019-01-25 13:22:36	<--	blistok (~blistok@2604:2000:c647:c300:40af:4732:c7a3:808d) has quit (Client Quit)
2019-01-25 13:22:55	ski	iqubic : `add ::= + add' is perhaps closer, but not right there
2019-01-25 13:23:02	iqubic	Why not?
2019-01-25 13:23:03	<--	libertyprime (~libertypr@66.87.69.111.dynamic.snap.net.nz) has quit (Quit: leaving)
2019-01-25 13:23:06	ski	iqubic : now your parser can parse `a + + + + +'
2019-01-25 13:23:20	ski	(`a' being an arbitrary numeric literal, a numeral)
2019-01-25 13:23:22	iqubic	Oh, right..
2019-01-25 13:24:15	-->	doyougnu (~doyougnu@c-73-11-11-86.hsd1.or.comcast.net) has joined #haskell
2019-01-25 13:24:23	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 240 seconds)
2019-01-25 13:24:53	<--	mighty_mosquito (~chadhaa@106.51.28.0) has quit (Ping timeout: 240 seconds)
2019-01-25 13:26:03	ski	`add', given `add ::= + num', represents a *single* addition of a `+' token, and a numeral
2019-01-25 13:26:22	-->	TipsyMe (~TipsyMe@50-50-239-253.waus.wi.frontiernet.net) has joined #haskell
2019-01-25 13:26:43	iqubic	expr ::= num add | num, add ::= + expr add
2019-01-25 13:26:56	iqubic	I think that's better, but I'm really not sure.
2019-01-25 13:26:57	ski	getting better :)
2019-01-25 13:27:04	iqubic	HUH?!?!
2019-01-25 13:27:07	ski	but `add' has no base case
2019-01-25 13:27:10	<--	unlink__ (~unlink2@dslc-082-082-094-065.pools.arcor-ip.net) has quit (Ping timeout: 268 seconds)
2019-01-25 13:27:23	iqubic	expr ::= num add
2019-01-25 13:27:24	ski	it always parses infinitely many `+'&numeral pairs
2019-01-25 13:27:26	-->	karq20 (~karq20@125.19.48.58) has joined #haskell
2019-01-25 13:27:43	<--	andyhuzhill (~andyhuzhi@14.23.45.178) has quit (Quit: andyhuzhill)
2019-01-25 13:27:58	ski	(well, expression, not numeral, in your case, since you used `expr' to the right of `+', not `num', which was in my original specification)
2019-01-25 13:28:23	-->	andyhuzhill (~andyhuzhi@14.23.45.178) has joined #haskell
2019-01-25 13:28:48	iqubic	expr ::= num add | num
2019-01-25 13:28:50	iqubic	add ::= + num add | ɛ
2019-01-25 13:29:04	ski	good good
2019-01-25 13:29:13	ski	now, factor the first rule like
2019-01-25 13:29:14	iqubic	Where ɛis the empty string.
2019-01-25 13:29:24	ski	  expr ::= num (add | ɛ)
2019-01-25 13:30:25	iqubic	And then what is add?
2019-01-25 13:30:25	-->	keepLearning512 (~keepLearn@106.51.31.245) has joined #haskell
2019-01-25 13:30:25	ski	but note that `add' already can succeed, accepting the empty string. so `add | ɛ' is just `add', so `expr' is defined by
2019-01-25 13:30:25	ski	  expr ::= num add
2019-01-25 13:30:34	iqubic	But then what is `add' in that cass?
2019-01-25 13:30:38	ski	(keeping the same definition of `add')
2019-01-25 13:36:25	--	irc: disconnected from server
2019-01-25 15:58:14	-->	gwosix (~gwosix@112.209.186.56) has joined #haskell
2019-01-25 15:58:14	--	Topic for #haskell is "https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: https://gist.github.com/ | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org"
2019-01-25 15:58:14	--	Topic set by glguy on Sat, 05 Jan 2019 15:21:52
2019-01-25 15:58:14	--	Channel #haskell: 1331 nicks (2 ops, 0 voices, 1329 normals)
2019-01-25 15:58:14	--	URL for #haskell: http://www.haskell.org/
2019-01-25 15:58:20	--	Channel created on Sun, 26 Nov 2006 06:42:48
2019-01-25 15:59:53	<--	mighty_mosquito (~chadhaa@103.19.212.1) has quit (Ping timeout: 240 seconds)
2019-01-25 16:00:53	<--	wto (~wto@h-37-123-163-82.NA.cust.bahnhof.se) has quit (Ping timeout: 250 seconds)
2019-01-25 16:01:29	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-25 16:01:49	-->	chele (~chele@2a02:8106:1:f900:faca:b8ff:fe2f:8499) has joined #haskell
2019-01-25 16:02:01	-->	mighty_mosquito (~chadhaa@103.19.212.1) has joined #haskell
2019-01-25 16:02:34	-->	wto (~wto@h-37-123-163-82.NA.cust.bahnhof.se) has joined #haskell
2019-01-25 16:04:32	-->	kmelvn (~karl@213-202-66-196.dsl.iskon.hr) has joined #haskell
2019-01-25 16:04:48	-->	Sk01 (~sky3@d131.wls.metu.edu.tr) has joined #haskell
2019-01-25 16:05:35	 *	hackage aeson-value-parser 0.13.1 - An API for parsing "aeson" JSON tree into Haskell types  https://hackage.haskell.org/package/aeson-value-parser-0.13.1 (NikitaVolkov)
2019-01-25 16:05:55	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-25 16:05:58	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 246 seconds)
2019-01-25 16:08:21	<--	[rg] (~ricardo_@63.135.30.178) has left #haskell ("Leaving")
2019-01-25 16:08:47	-->	marco_t (~marco_t@181.231.118.54) has joined #haskell
2019-01-25 16:09:25	-->	pie__ (~pie_@unaffiliated/pie-/x-0787662) has joined #haskell
2019-01-25 16:10:24	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 240 seconds)
2019-01-25 16:11:18	<--	ixian8 (~mgold@2002:4a74:ba78:1701:0:ff:fe78:6269) has quit (Ping timeout: 250 seconds)
2019-01-25 16:11:57	-->	ixian (~mgold@2002:4a74:ba78:1701:0:ff:fe78:6269) has joined #haskell
2019-01-25 16:12:43	<--	andyhuzhill (~andyhuzhi@14.23.45.178) has quit (Quit: andyhuzhill)
2019-01-25 16:12:52	-->	davr0s (~textual@host109-155-92-146.range109-155.btcentralplus.com) has joined #haskell
2019-01-25 16:13:20	-->	andyhuzhill (~andyhuzhi@14.23.45.178) has joined #haskell
2019-01-25 16:13:33	<--	marco_t (~marco_t@181.231.118.54) has quit (Ping timeout: 246 seconds)
2019-01-25 16:17:37	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 16:21:12	-->	raichoo (~raichoo@office02.saltation.de) has joined #haskell
2019-01-25 16:22:14	<--	andyhuzhill (~andyhuzhi@14.23.45.178) has quit (Quit: andyhuzhill)
2019-01-25 16:22:51	-->	andyhuzhill (~andyhuzhi@14.23.45.178) has joined #haskell
2019-01-25 16:23:33	<--	pera (~pera@unaffiliated/pera) has quit (Ping timeout: 268 seconds)
2019-01-25 16:24:17	-->	slomo (~slomo@unaffiliated/slomo) has joined #haskell
2019-01-25 16:24:53	-->	merijn (~merijn@145.100.116.5) has joined #haskell
2019-01-25 16:25:36	-->	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has joined #haskell
2019-01-25 16:29:21	<--	davr0s (~textual@host109-155-92-146.range109-155.btcentralplus.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2019-01-25 16:29:36	<--	slack1256 (~slack1256@181-163-79-184.baf.movistar.cl) has quit (Remote host closed the connection)
2019-01-25 16:29:56	<--	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has quit (Ping timeout: 250 seconds)
2019-01-25 16:31:58	<--	ar1a (~ar1a@cr-27.54.142.23.45ru.net.au) has left #haskell ("WeeChat 2.3")
2019-01-25 16:33:53	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 240 seconds)
2019-01-25 16:34:36	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit
2019-01-25 16:34:55	-->	supercoven (~quassel@dsl-hkibng42-5673cf-252.dhcp.inet.fi) has joined #haskell
2019-01-25 16:36:04	-->	davr0s (~textual@host109-155-92-146.range109-155.btcentralplus.com) has joined #haskell
2019-01-25 16:40:26	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-25 16:40:55	-->	milanj (~milan@87.116.183.185) has joined #haskell
2019-01-25 16:41:57	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Client Quit)
2019-01-25 16:42:40	-->	yqt (~yqt@81.88.230.28) has joined #haskell
2019-01-25 16:43:17	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-25 16:44:01	-->	marco_t (~marco_t@181.231.118.54) has joined #haskell
2019-01-25 16:46:09	<--	markus1189 (~markus118@82.206.29.233) has quit (Remote host closed the connection)
2019-01-25 08:48:19	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 08:48:26	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 272 seconds)
2019-01-25 08:48:36	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 08:48:36	<--	marco_t (~marco_t@181.231.118.54) has quit (Ping timeout: 250 seconds)
2019-01-25 08:48:36	<--	JimmyRcom (~JimmyRcom@71-11-240-211.dhcp.dntn.tx.charter.com) has quit (Ping timeout: 250 seconds)
2019-01-25 08:50:01	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 08:50:10	<--	lambda-11235 (~lambda-11@207.183.239.54) has quit (Quit: Bye)
2019-01-25 08:50:20	<--	doyougnu (~doyougnu@c-73-11-11-86.hsd1.or.comcast.net) has quit (Ping timeout: 272 seconds)
2019-01-25 08:50:30	-->	thc202 (~thc202@unaffiliated/thc202) has joined #haskell
2019-01-25 08:51:09	-->	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has joined #haskell
2019-01-25 08:51:14	<--	funrep_ (~funrep@31-208-65-162.cust.bredband2.com) has quit (Remote host closed the connection)
2019-01-25 08:51:20	<--	Guest6886 (~amar@185.5.172.230) has quit (Remote host closed the connection)
2019-01-25 08:51:42	-->	poljar (~poljar@93-143-181-8.adsl.net.t-com.hr) has joined #haskell
2019-01-25 08:51:47	-->	ARMEWT (~ARMer@ip-184-209-5-86.spfdma.spcsdns.net) has joined #haskell
2019-01-25 08:51:54	-->	amar (~amar@185.5.172.230) has joined #haskell
2019-01-25 08:52:07	-->	errst (~errst@5.24.215.113) has joined #haskell
2019-01-25 08:52:18	--	amar is now known as Guest23444
2019-01-25 08:52:25	<--	forell (~forell@unaffiliated/forell) has quit (Quit: ZNC - https://znc.in)
2019-01-25 08:52:45	-->	forell (~forell@unaffiliated/forell) has joined #haskell
2019-01-25 08:52:49	-->	doyougnu (~doyougnu@c-73-11-11-86.hsd1.or.comcast.net) has joined #haskell
2019-01-25 08:52:51	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-25 08:53:07	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 08:54:26	<--	poljar1 (~poljar@93-143-132-210.adsl.net.t-com.hr) has quit (Ping timeout: 240 seconds)
2019-01-25 08:54:48	-->	howdoi (uid224@gateway/web/irccloud.com/x-kjegvkfcsyoqatwf) has joined #haskell
2019-01-25 08:55:28	-->	kritzefitz (~kritzefit@2003:5b:203b:100:6e0b:84ff:feb4:9eaf) has joined #haskell
2019-01-25 08:55:55	<--	kritzefitz (~kritzefit@2003:5b:203b:100:6e0b:84ff:feb4:9eaf) has quit (Remote host closed the connection)
2019-01-25 08:56:06	-->	kritzefitz (~kritzefit@2003:5b:203b:100:6e0b:84ff:feb4:9eaf) has joined #haskell
2019-01-25 08:56:26	<--	Guest23444 (~amar@185.5.172.230) has quit (Ping timeout: 240 seconds)
2019-01-25 08:58:19	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 08:58:34	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 08:59:13	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 245 seconds)
2019-01-25 09:02:51	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-25 09:03:07	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 09:04:12	<--	mountaingoat (~mountaing@unaffiliated/mountaingoat) has quit (Ping timeout: 250 seconds)
2019-01-25 09:04:46	-->	ricks_ (3e798312@gateway/web/freenode/ip.62.121.131.18) has joined #haskell
2019-01-25 09:04:51	-->	ltchen (~ltchen@host-92-30-204-54.as13285.net) has joined #haskell
2019-01-25 09:05:34	<--	ricks_ (3e798312@gateway/web/freenode/ip.62.121.131.18) has quit (Client Quit)
2019-01-25 09:06:16	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 09:06:26	<--	unlink__ (~unlink2@194.95.98.65) has quit (Ping timeout: 240 seconds)
2019-01-25 09:09:29	-->	turbo_MaCk (~turbo_MaC@ip-78-102-113-18.net.upcbroadband.cz) has joined #haskell
2019-01-25 09:13:44	<--	karq20_ (~karq20@125.19.48.58) has quit (Remote host closed the connection)
2019-01-25 09:14:20	--	amalloy is now known as amalloy_
2019-01-25 09:14:49	-->	LKoen (~LKoen@176-151-31-205.abo.bbox.fr) has joined #haskell
2019-01-25 09:15:28	-->	karq20 (~karq20@125.19.48.58) has joined #haskell
2019-01-25 09:17:45	-->	mountaingoat (mountaingo@gateway/vpn/privateinternetaccess/mountaingoat) has joined #haskell
2019-01-25 09:18:16	-->	marco_t (~marco_t@181.231.118.54) has joined #haskell
2019-01-25 09:18:17	-->	cwil (~chris@203-214-126-65.dyn.iinet.net.au) has joined #haskell
2019-01-25 09:18:37	-->	chaosmasttter (~chaosmast@p2E50E0EF.dip0.t-ipconnect.de) has joined #haskell
2019-01-25 09:19:33	-->	agander (~agander@185.128.27.100) has joined #haskell
2019-01-25 09:21:23	-->	ar1a (~ar1a@cr-27.54.142.23.45ru.net.au) has joined #haskell
2019-01-25 09:21:35	-->	byte8421 (~byte8421_@36.157.119.28) has joined #haskell
2019-01-25 09:21:59	ar1a	how do you pattern match for prefixes on Text. for String i could just do ('.':x) 
2019-01-25 09:22:18	merijn	ar1a: You can't really pattern match text, tbh
2019-01-25 09:22:33	<--	marco_t (~marco_t@181.231.118.54) has quit (Ping timeout: 245 seconds)
2019-01-25 09:22:55	ar1a	only guards huh?
2019-01-25 09:23:20	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 09:23:25	ar1a	i ended up doing "." `T.isPrefixOf` s
2019-01-25 09:23:28	merijn	Yeah, you can "pattern" match on entire values with OverloadedStrings, but not partial things
2019-01-25 09:23:35	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 09:23:36	merijn	ar1a: You might want to use pattern guards
2019-01-25 09:23:42	lortabac	ar1a: there is uncons, but it's only one letter at a time
2019-01-25 09:24:32	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 272 seconds)
2019-01-25 09:24:41	merijn	ar1a: You can do 'foo myTextVal | Just suffix <- T.stripPrefix "." myTextVal = doStuffWith suffix'
2019-01-25 09:25:06	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-25 09:25:14	merijn	(Assuming you wanted to do something without the prefix, else a guard with isPrefixOf works)
2019-01-25 09:26:14	ski	  foo (T.stripPrefix "." -> Just suffix) = doStuffWith suffix  -- after enabling `ViewPatterns'
2019-01-25 09:26:49	<--	davr0s (~textual@host109-155-92-146.range109-155.btcentralplus.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2019-01-25 09:26:51	<--	p0lyph3m (~p0lyph3m@2a02:810d:640:776c:76d7:55f6:f85b:c889) has quit (Read error: Connection reset by peer)
2019-01-25 09:27:46	ar1a	all these language features i have no idea what they do! :D
2019-01-25 09:27:49	ski	(also there's `PatternSynonyms', which probably would look nicer)
2019-01-25 09:27:51	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-25 09:27:56	merijn	ski: That requires an extension, though. Pattern guard does not
2019-01-25 09:28:05	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 09:28:12	ski	oh, right. i forget it's included in the language, now
2019-01-25 09:28:19	merijn	ski: Everyone always does...
2019-01-25 09:28:23	 *	ski smiles
2019-01-25 09:28:59	merijn	ar1a: My version uses a pattern guard, i.e. it pattern matches in the guard (allowing you to use T.stripPrefix) if the pattern match fails it will just continue and try the next guard (like regular boolean guards)
2019-01-25 09:29:32	<--	dpyro (~dpyro@66-169-160-49.dhcp.ftwo.tx.charter.com) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-25 09:29:35	merijn	ski: FPComplete is still enabling EmptyDataDecls in their code and writing articles recommending the extension, despite it being part of Haskell2010 too
2019-01-25 09:29:38	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 245 seconds)
2019-01-25 09:29:46	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 09:30:03	<--	oish (~charlie@228.25.169.217.in-addr.arpa) has quit (Ping timeout: 245 seconds)
2019-01-25 09:30:08	ski	ar1a : the pattern guard `Just suffix <- T.stripPrefix "." myTextVal' matches the result value of the expression `T.stripPrefix "." myTextVal' with the pattern `Just suffix'. if it matches, the pattern guard is successful, and we commit to evaluating `doStuffWith suffix'. otherwise the next guard, or next defining equation, of `foo', is tried, if any
2019-01-25 09:31:12	ski	> stripPrefix [0,1,2] [0,1,2,3,4,5,6,7]
2019-01-25 09:31:14	lambdabot	 Just [3,4,5,6,7]
2019-01-25 09:31:17	ski	> stripPrefix [0,1,2] [0,1,3,2,4,5,6,7]
2019-01-25 09:31:19	lambdabot	 Nothing
2019-01-25 09:31:40	merijn	Pattern guards are one of Haskell's most underrated features, imo
2019-01-25 09:31:45	ar1a	thanks
2019-01-25 09:33:26	<--	andyhuzhill (~andyhuzhi@14.23.45.178) has quit (Quit: andyhuzhill)
2019-01-25 09:34:34	<--	Bish (~arne@b2b-37-24-1-41.unitymedia.biz) has quit (Ping timeout: 246 seconds)
2019-01-25 09:34:37	 *	hackage trackit 0.6 - A command-line tool for live monitoring  https://hackage.haskell.org/package/trackit-0.6 (EmilAxelsson)
2019-01-25 09:35:19	-->	davr0s (~textual@host109-155-92-146.range109-155.btcentralplus.com) has joined #haskell
2019-01-25 09:35:23	-->	Bish (~arne@b2b-37-24-1-41.unitymedia.biz) has joined #haskell
2019-01-25 09:36:50	-->	amar (~amar@217.138.122.53) has joined #haskell
2019-01-25 09:37:13	--	amar is now known as Guest16207
2019-01-25 09:38:24	<--	TipsyMe (~TipsyMe@50-50-239-253.waus.wi.frontiernet.net) has quit (Quit: TipsyMe)
2019-01-25 09:38:26	dminuoso	merijn: Sorry I had to quickly leave to catch the train myself. :)
2019-01-25 09:38:59	dminuoso	merijn: I just want to prevent log messages from different threads from overlapping. The possible loss of messages during shutdown is acceptable at this point.
2019-01-25 09:39:21	-->	yyy (~yyy@unaffiliated/tinnotl) has joined #haskell
2019-01-25 09:39:26	merijn	dminuoso: If not, I've got a Chan to fix that for you ;)
2019-01-25 09:39:50	dminuoso	merijn: Heh really, because I would have used a TChan instead to solve it.
2019-01-25 09:39:54	dminuoso	Let's have it =)
2019-01-25 09:40:11	merijn	dminuoso: https://hackage.haskell.org/package/broadcast-chan
2019-01-25 09:40:30	merijn	dminuoso: Benchmarks are a bit out of date, but last time it was basically as fast/slightly faster than Control.Concurrent.Chan
2019-01-25 09:41:05	merijn	dminuoso: Initially I wanted to add more "batteries included" to Chan, but that got shut down without a proof of concept, so I ended up just moving it into a library
2019-01-25 09:41:48	merijn	dminuoso: And then I figured "while I'm at it, why not make it closable?" because that always annoyed me about Chan, that you couldn't "stop" when you were done :)
2019-01-25 09:42:53	phadej	for logging you don't need Chan, do you? TQueue/TBQueue is enough (you don't need broadcast, do you?)
2019-01-25 09:43:16	dminuoso	merijn: Yeah, at this point I would "stop" by contract. There's going to be an `TMVar QuitToken` that I'd put into to notify a graceful shutdown. The workers would finish off, the dispatcher dying - and the logger would stop reading off the TChan..
2019-01-25 09:43:17	merijn	phadej: broadcast-chan is, perhaps, a bit of a misnomer carried forward from the initial design goal
2019-01-25 09:43:27	merijn	phadej: Nothing limits it to broadcast style use
2019-01-25 09:44:10	merijn	phadej: With TQueue/TBQueue you still need to handroll all sorts of things
2019-01-25 09:44:15	phadej	it's still too powerful, if you have only one reader?
2019-01-25 09:44:15	dminuoso	phadej: Well Chan is nice because it allows you to attach multiple log endpoints. :)
2019-01-25 09:44:41	phadej	dminuoso: ok, so you have multiple log endpoints; that makes sense then.
2019-01-25 09:44:47	merijn	phadej: Not sure what "too powerful" means?
2019-01-25 09:45:08	phadej	"Using Monad when Applicative is enough"
2019-01-25 09:45:15	merijn	phadej: It's basically strictly better than Chan. It has more functionality and in all my benchmarks it's more performant
2019-01-25 09:45:32	dminuoso	merijn: I think the point is rather "Chan vs Queue" rather than "Chan vs broadcast-chan"
2019-01-25 09:45:37	phadej	dminuoso: yes
2019-01-25 09:45:38	merijn	Sure
2019-01-25 09:46:01	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-25 09:46:07	merijn	But then you have to handroll logic for determining the end of the queue via an extra TVar to signal closing, etc.
2019-01-25 09:46:17	merijn	And I got tired of redoing that :p
2019-01-25 09:46:25	phadej	logging queue doesn't end. does it?
2019-01-25 09:46:32	merijn	phadej: Says who?
2019-01-25 09:46:45	phadej	ok, this debate is pointless ->
2019-01-25 09:46:51	merijn	phadej: If you have logging in a regular, non-server process why would it be endless?
2019-01-25 09:47:07	merijn	phadej: Most of my code is "do a bunch of stuff and do some logging, then terminate"
2019-01-25 09:47:18	merijn	I would like to ensure my log channel is flushed before exiting
2019-01-25 09:47:27	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 268 seconds)
2019-01-25 09:47:32	<--	mounty (~mounty@n106-71-211-213.rdl2.qld.optusnet.com.au) has quit (Ping timeout: 250 seconds)
2019-01-25 09:47:50	<--	karq20 (~karq20@125.19.48.58) has quit (Remote host closed the connection)
2019-01-25 09:47:51	-->	mounty (~mounty@n106-71-211-213.rdl2.qld.optusnet.com.au) has joined #haskell
2019-01-25 09:47:55	-->	nan` (~nan`@cpe-75-86-97-30.wi.res.rr.com) has joined #haskell
2019-01-25 09:47:57	merijn	Most programs shut down *at some point* and you presumably wanna flush any last log bits before doing so
2019-01-25 09:48:53	<--	ar1a (~ar1a@cr-27.54.142.23.45ru.net.au) has left #haskell ("WeeChat 2.3")
2019-01-25 09:49:45	-->	marco_t (~marco_t@181.231.118.54) has joined #haskell
2019-01-25 09:50:28	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 245 seconds)
2019-01-25 09:50:28	<--	MoarSpaceFi (~Forgot_my@65.126.126.193) has quit (Ping timeout: 245 seconds)
2019-01-25 09:51:56	<--	nan` (~nan`@cpe-75-86-97-30.wi.res.rr.com) has quit (Ping timeout: 240 seconds)
2019-01-25 09:52:33	<--	agander (~agander@185.128.27.100) has quit (Ping timeout: 245 seconds)
2019-01-25 09:52:56	<--	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has quit (Ping timeout: 240 seconds)
2019-01-25 09:53:00	<--	Guest16207 (~amar@217.138.122.53) has quit (Remote host closed the connection)
2019-01-25 09:53:26	-->	oo_miguel (~miguel@89-75-127-111.dynamic.chello.pl) has joined #haskell
2019-01-25 09:54:03	<--	marco_t (~marco_t@181.231.118.54) has quit (Ping timeout: 246 seconds)
2019-01-25 09:54:31	<--	doyougnu (~doyougnu@c-73-11-11-86.hsd1.or.comcast.net) has quit (Ping timeout: 246 seconds)
2019-01-25 09:57:22	<--	byte8421 (~byte8421_@36.157.119.28) has quit (Remote host closed the connection)
2019-01-25 09:57:33	<--	pie__ (~pie_@unaffiliated/pie-/x-0787662) has quit (Ping timeout: 245 seconds)
2019-01-25 10:01:08	<--	eiGHttt (~eiGHttt@m85-64.yeah.net) has quit (Quit: WeeChat 2.3)
2019-01-25 10:01:22	<--	ltchen (~ltchen@host-92-30-204-54.as13285.net) has quit (Remote host closed the connection)
2019-01-25 10:01:41	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 10:01:58	-->	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has joined #haskell
2019-01-25 10:02:08	<--	davr0s (~textual@host109-155-92-146.range109-155.btcentralplus.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2019-01-25 10:02:33	<--	revtintin (~revtintin@101.100.177.178) has quit (Quit: WeeChat 2.3)
2019-01-25 10:02:35	<--	ARMEWT (~ARMer@ip-184-209-5-86.spfdma.spcsdns.net) has quit (Remote host closed the connection)
2019-01-25 10:02:50	-->	karq20_ (~karq20@125.19.48.58) has joined #haskell
2019-01-25 10:04:00	<--	chaosmasttter (~chaosmast@p2E50E0EF.dip0.t-ipconnect.de) has quit (Ping timeout: 250 seconds)
2019-01-25 10:04:43	<--	ashirase (~ashirase@modemcable098.166-22-96.mc.videotron.ca) has quit (Ping timeout: 268 seconds)
2019-01-25 10:05:22	-->	Johannes13 (~Johannes1@unaffiliated/johannes13) has joined #haskell
2019-01-25 10:05:28	-->	oish (~charlie@host81-130-206-144.in-addr.btopenworld.com) has joined #haskell
2019-01-25 10:06:26	<--	mountaingoat (mountaingo@gateway/vpn/privateinternetaccess/mountaingoat) has quit (Ping timeout: 240 seconds)
2019-01-25 10:07:02	<--	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has quit (Ping timeout: 250 seconds)
2019-01-25 10:07:04	-->	ashirase (~ashirase@modemcable098.166-22-96.mc.videotron.ca) has joined #haskell
2019-01-25 10:07:26	<--	karq20_ (~karq20@125.19.48.58) has quit (Ping timeout: 240 seconds)
2019-01-25 10:08:26	<--	DasBrain (~Johannes1@unaffiliated/johannes13) has quit (Ping timeout: 240 seconds)
2019-01-25 10:09:11	-->	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has joined #haskell
2019-01-25 10:10:28	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 245 seconds)
2019-01-25 10:10:59	-->	nocm (~chatzilla@178.141.224.208) has joined #haskell
2019-01-25 10:11:46	-->	karq20_ (~karq20@125.19.48.58) has joined #haskell
2019-01-25 10:13:00	<--	karq20_ (~karq20@125.19.48.58) has quit (Remote host closed the connection)
2019-01-25 10:14:03	-->	cwil1 (~chris@203-214-126-65.dyn.iinet.net.au) has joined #haskell
2019-01-25 10:14:13	<--	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has quit (Ping timeout: 245 seconds)
2019-01-25 10:14:26	<--	cwil (~chris@203-214-126-65.dyn.iinet.net.au) has quit (Ping timeout: 240 seconds)
2019-01-25 10:14:27	<--	cwil1 (~chris@203-214-126-65.dyn.iinet.net.au) has left #haskell
2019-01-25 10:16:01	-->	bo (~Bo@195.39.233.28) has joined #haskell
2019-01-25 10:17:21	<--	catsup (d@ps38852.dreamhost.com) has quit (Remote host closed the connection)
2019-01-25 10:17:32	-->	catsup (~d@ps38852.dreamhost.com) has joined #haskell
2019-01-25 10:18:31	<--	catsup (~d@ps38852.dreamhost.com) has quit (Remote host closed the connection)
2019-01-25 10:19:25	-->	catsup (d@ps38852.dreamhost.com) has joined #haskell
2019-01-25 10:20:19	-->	chaosmasttter (~chaosmast@p2E50E0EF.dip0.t-ipconnect.de) has joined #haskell
2019-01-25 10:20:39	<--	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has quit (Ping timeout: 256 seconds)
2019-01-25 10:21:36	-->	ikucheryavenkov (2ef20e31@gateway/web/freenode/ip.46.242.14.49) has joined #haskell
2019-01-25 10:22:26	<--	mighty_mosquito (~chadhaa@103.19.212.1) has quit (Ping timeout: 240 seconds)
2019-01-25 10:22:51	--	ikucheryavenkov is now known as alar
2019-01-25 10:23:19	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 10:23:36	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 10:24:20	-->	mountaingoat (~mountaing@unaffiliated/mountaingoat) has joined #haskell
2019-01-25 10:25:25	<--	sQVe (~sQVe@unaffiliated/sqve) has quit (Quit: Bye!)
2019-01-25 10:25:29	-->	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has joined #haskell
2019-01-25 10:25:43	-->	sQVe (~sQVe@unaffiliated/sqve) has joined #haskell
2019-01-25 10:26:10	--	alar is now known as ikucheryavenkov
2019-01-25 10:26:34	--	ikucheryavenkov is now known as alar
2019-01-25 10:27:45	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-25 10:27:51	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-25 10:28:05	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 10:31:56	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 240 seconds)
2019-01-25 10:33:00	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 10:33:46	-->	mmhat (~mmh@55d4f38b.access.ecotel.net) has joined #haskell
2019-01-25 10:37:29	-->	amar (~amar@217.138.122.53) has joined #haskell
2019-01-25 10:37:53	--	amar is now known as Guest56635
2019-01-25 10:38:22	-->	ltchen (~ltchen@host-92-30-204-54.as13285.net) has joined #haskell
2019-01-25 10:43:19	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 10:43:35	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 10:43:51	-->	TC` (~justas@gilvonauskas.lt) has joined #haskell
2019-01-25 10:44:03	-->	inkbottle (~inkbottle@154.126.87.230) has joined #haskell
2019-01-25 10:44:49	-->	Boomerang (~Boomerang@49.231.6.66) has joined #haskell
2019-01-25 10:45:11	-->	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has joined #haskell
2019-01-25 10:46:29	<--	carlosdagos (uid312197@gateway/web/irccloud.com/x-qdzemychyxwfwjjl) has quit (Quit: Connection closed for inactivity)
2019-01-25 10:46:40	-->	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has joined #haskell
2019-01-25 10:47:51	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-25 10:48:09	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 10:48:53	inkbottle	cocreature: Unfortunately, I am likely to have to read my code again: that's the tricky part ;)
2019-01-25 10:48:53	-->	karq20 (~karq20@125.19.48.58) has joined #haskell
2019-01-25 10:49:27	<--	oish (~charlie@host81-130-206-144.in-addr.btopenworld.com) has quit (Ping timeout: 240 seconds)
2019-01-25 10:50:02	<--	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has quit (Ping timeout: 272 seconds)
2019-01-25 10:50:39	-->	mighty_mosquito (~chadhaa@103.19.212.1) has joined #haskell
2019-01-25 10:51:04	-->	nullremains (~nullremai@49.229.138.119) has joined #haskell
2019-01-25 10:51:26	<--	Guest56635 (~amar@217.138.122.53) has quit (Ping timeout: 240 seconds)
2019-01-25 10:51:33	<--	bo (~Bo@195.39.233.28) has quit (Read error: Connection reset by peer)
2019-01-25 10:51:40	-->	oish (~charlie@host81-130-206-144.in-addr.btopenworld.com) has joined #haskell
2019-01-25 10:52:00	-->	bo (~Bo@195.39.233.28) has joined #haskell
2019-01-25 10:52:16	<--	Ariakenom (~Ariakenom@h-208-40.A163.corp.bahnhof.se) has quit (Ping timeout: 246 seconds)
2019-01-25 10:52:27	<--	mmhat (~mmh@55d4f38b.access.ecotel.net) has quit (Quit: WeeChat 2.3)
2019-01-25 10:52:30	-->	markus1189 (~markus118@82.206.29.233) has joined #haskell
2019-01-25 10:52:59	-->	jhrcek (jhrcek@nat/redhat/x-itiqveijeyyeawpw) has joined #haskell
2019-01-25 10:53:20	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 10:53:24	<--	karq20 (~karq20@125.19.48.58) has quit (Ping timeout: 250 seconds)
2019-01-25 10:53:26	<--	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has quit (Ping timeout: 268 seconds)
2019-01-25 10:53:36	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 10:55:11	-->	karq20_ (~karq20@125.19.48.58) has joined #haskell
2019-01-25 10:56:28	-->	andreabedini (~andreabed@ip-103-106-91-22.per.xi.com.au) has joined #haskell
2019-01-25 10:56:42	-->	reactormonk (~tass@p2E5E9A8C.dip0.t-ipconnect.de) has joined #haskell
2019-01-25 10:57:51	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-25 10:58:04	WilliamHamilton[	is it possible to export only `some` methods of a typeclass?
2019-01-25 10:58:05	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 10:58:47	-->	SijmenSchoon[m] (sijmenscho@gateway/shell/matrix.org/x-fatdxxlnjatetgos) has joined #haskell
2019-01-25 10:58:49	<--	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has quit (Remote host closed the connection)
2019-01-25 10:59:15	-->	unlink__ (~unlink2@dslc-082-082-094-065.pools.arcor-ip.net) has joined #haskell
2019-01-25 11:00:13	<--	andreabedini (~andreabed@ip-103-106-91-22.per.xi.com.au) has quit (Client Quit)
2019-01-25 11:00:18	merijn	WilliamHamilton[: I think so, but then no one could implement those
2019-01-25 11:00:54	gentauro	WilliamHamilton[: why would you do that?
2019-01-25 11:00:58	gentauro	if I might ask?
2019-01-25 11:01:51	Saizan	WilliamHamilton[: iirc you can have "ClassFoo(method1,method2)" in your export list, to avoid exporting method3 and so on
2019-01-25 11:01:57	<--	mighty_mosquito (~chadhaa@103.19.212.1) has quit (Ping timeout: 246 seconds)
2019-01-25 11:02:13	-->	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has joined #haskell
2019-01-25 11:02:46	<--	LKoen (~LKoen@176-151-31-205.abo.bbox.fr) has quit (Quit: “It’s only logical. First you learn to talk, then you learn to think. Too bad it’s not the other way round.”)
2019-01-25 11:02:52	<--	nowhere_man (~pierre@2a01:e0a:16:29e0:f288:fb82:e8a1:9337) has quit (Ping timeout: 252 seconds)
2019-01-25 11:03:05	-->	Essadon (~Essadon@81-225-32-185-no249.tbcn.telia.com) has joined #haskell
2019-01-25 11:03:19	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 11:03:21	<--	Essadon (~Essadon@81-225-32-185-no249.tbcn.telia.com) has quit (Max SendQ exceeded)
2019-01-25 11:03:33	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 11:03:46	-->	Essadon (~Essadon@81-225-32-185-no249.tbcn.telia.com) has joined #haskell
2019-01-25 11:04:02	<--	sonofentropy (~k@84-10-10-170.static.chello.pl) has quit (Quit: sonofentropy)
2019-01-25 11:04:46	<--	Essadon (~Essadon@81-225-32-185-no249.tbcn.telia.com) has quit (Client Quit)
2019-01-25 11:04:55	<--	ltchen (~ltchen@host-92-30-204-54.as13285.net) has quit (Remote host closed the connection)
2019-01-25 11:05:11	-->	ltchen (~ltchen@host-92-30-204-54.as13285.net) has joined #haskell
2019-01-25 11:05:38	dminuoso	Why would you do that? :|
2019-01-25 11:05:56	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 240 seconds)
2019-01-25 11:06:02	dminuoso	If you have that desire, I feel typeclasses are the wrong tool to begin with. 
2019-01-25 11:06:46	opqdonut	I think it's a reasonable question
2019-01-25 11:06:56	opqdonut	I might split the class into "public" and "private" parts though
2019-01-25 11:07:21	opqdonut	but if there's cross-dependencies between the public and private methods that might not work
2019-01-25 11:07:42	-->	simukis (~simukis_@78-63-88-48.static.zebra.lt) has joined #haskell
2019-01-25 11:07:51	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-25 11:08:07	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 11:09:30	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-25 11:11:41	-->	__monty__ (~toonn@unaffiliated/toonn) has joined #haskell
2019-01-25 11:12:06	-->	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has joined #haskell
2019-01-25 11:14:24	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 268 seconds)
2019-01-25 11:16:39	<--	sw1nn (~sw1nn@ec2-35-178-73-242.eu-west-2.compute.amazonaws.com) has quit (Ping timeout: 246 seconds)
2019-01-25 11:17:08	<--	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has quit (Ping timeout: 245 seconds)
2019-01-25 11:18:44	-->	Gurkenglas (~Gurkengla@unaffiliated/gurkenglas) has joined #haskell
2019-01-25 11:18:57	<--	kvda (~kvda@unaffiliated/kvda) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-25 11:19:01	<--	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has quit (Ping timeout: 256 seconds)
2019-01-25 11:20:06	WilliamHamilton[	gentauro, dminuoso: I want to do it because there is a method in a typeclass that should morally be hidden, but due to the vast amount of overlapping type classes that I'm using, I cannot really factor it out. I'd like it to be hidden for usability reasons, and the user is not supposed to write instances of this class
2019-01-25 11:20:26	-->	sw1nn (~sw1nn@ec2-35-178-73-242.eu-west-2.compute.amazonaws.com) has joined #haskell
2019-01-25 11:20:30	dminuoso	WilliamHamilton[: "morally hidden" why?
2019-01-25 11:20:56	-->	sonofentropy (~k@84-10-10-170.static.chello.pl) has joined #haskell
2019-01-25 11:21:50	WilliamHamilton[	dminuoso, because I don't want it to confuse the user of the library. It's never supposed to be called by the user, as I provide another function in the same class that I expect to be used
2019-01-25 11:22:07	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 11:22:40	WilliamHamilton[	Saizan: thanks, I'll try that
2019-01-25 11:22:41	-->	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has joined #haskell
2019-01-25 11:22:43	-->	olligobber (olligobber@gateway/vpn/privateinternetaccess/olligobber) has joined #haskell
2019-01-25 11:23:04	WilliamHamilton[	diminuoso: mostly, I don't want that function to appear in the generated haddocks, if I can prevent that
2019-01-25 11:25:13	-->	p0lyph3m (~p0lyph3m@2a02:810d:640:776c:76d7:55f6:f85b:c889) has joined #haskell
2019-01-25 11:25:19	<--	keepLearning512 (~keepLearn@106.51.72.155) has quit (Remote host closed the connection)
2019-01-25 11:25:27	inkbottle	f :: monad m => a -> m b -> m a -> m b -- like with only <$> and <*>
2019-01-25 11:25:55	mniip	do you mean (a -> m b) -> m a -> m b
2019-01-25 11:26:08	inkbottle	yes
2019-01-25 11:26:12	mniip	not possible
2019-01-25 11:26:22	inkbottle	What!!?
2019-01-25 11:26:27	<--	chaosmasttter (~chaosmast@p2E50E0EF.dip0.t-ipconnect.de) has quit (Ping timeout: 246 seconds)
2019-01-25 11:26:30	mniip	there are some applicatives that aren't lawful monads
2019-01-25 11:26:44	inkbottle	OK
2019-01-25 11:27:02	<--	sw1nn (~sw1nn@ec2-35-178-73-242.eu-west-2.compute.amazonaws.com) has quit (Read error: Connection reset by peer)
2019-01-25 11:27:09	inkbottle	because, you can easily do that with do-return...
2019-01-25 11:27:35	<--	alar (2ef20e31@gateway/web/freenode/ip.46.242.14.49) has quit (Ping timeout: 256 seconds)
2019-01-25 11:27:48	dminuoso	WilliamHamilton[: I dont see the value in either partially hiding a class method, nor in trying to simulate closed typeclasses.
2019-01-25 11:28:47	-->	fhdhsni (c3b5a986@gateway/web/cgi-irc/kiwiirc.com/ip.195.181.169.134) has joined #haskell
2019-01-25 11:29:15	<--	trcc (~trcc@85.191.91.108) has quit (Remote host closed the connection)
2019-01-25 11:29:43	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 246 seconds)
2019-01-25 11:29:54	-->	trcc (~trcc@85.191.91.108) has joined #haskell
2019-01-25 11:30:04	dminuoso	WilliamHamilton[: Are you sure passing a dict of functions is not better for your usecase?
2019-01-25 11:30:18	<--	aabac (~aabac@unaffiliated/aabac) has quit (Quit: Leaving)
2019-01-25 11:30:19	inkbottle	mniip: I will put that in my applicative limitation list ;) [but, how did you know for sure that wasn't possible? You probably have an example that doesn't work?]
2019-01-25 11:30:26	ski	inkbottle : `do'-notation is syntactic sugar, that expands to uses of `(>>=)'
2019-01-25 11:30:56	inkbottle	yes, but why not possible with <$> <*>?
2019-01-25 11:30:59	-->	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has joined #haskell
2019-01-25 11:31:08	inkbottle	looking for a counter example
2019-01-25 11:31:08	mniip	inkbottle, consider the Const r applicative
2019-01-25 11:31:17	inkbottle	OK
2019-01-25 11:31:18	mniip	data Const r a = Const r
2019-01-25 11:31:26	-->	TipsyMe (~TipsyMe@50-50-239-253.waus.wi.frontiernet.net) has joined #haskell
2019-01-25 11:31:37	-->	kuribas (~user@ip-188-118-57-242.reverse.destiny.be) has joined #haskell
2019-01-25 11:31:48	inkbottle	OK, I'll try to do the math myself...
2019-01-25 11:32:58	ski	think about what would be required to write `(=<<) :: (a -> Const r b) -> Const r a -> Const r b' (satisfying the monad laws)
2019-01-25 11:33:25	WilliamHamilton[	dminuoso that translation is always possible, right? In this case though I think that typeclasses are clearer, although I will probably try a rewrite with the explicit dictionary, and ping you as soon as I package up polished code, so we can discuss it concretely
2019-01-25 11:33:37	<--	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has quit (Ping timeout: 244 seconds)
2019-01-25 11:33:46	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 11:34:08	<--	trcc (~trcc@85.191.91.108) has quit (Ping timeout: 250 seconds)
2019-01-25 11:34:46	<--	karq20_ (~karq20@125.19.48.58) has quit (Remote host closed the connection)
2019-01-25 11:35:04	-->	karq20 (~karq20@125.19.48.58) has joined #haskell
2019-01-25 11:35:42	-->	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has joined #haskell
2019-01-25 11:38:02	-->	Ariakenom (~Ariakenom@h-208-40.A163.corp.bahnhof.se) has joined #haskell
2019-01-25 11:38:23	<--	merijn (~merijn@145.100.116.5) has quit (Ping timeout: 245 seconds)
2019-01-25 11:39:12	<--	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has quit (Remote host closed the connection)
2019-01-25 11:40:15	-->	keepLearning512 (~keepLearn@106.51.72.155) has joined #haskell
2019-01-25 11:40:21	-->	OnkelTem (~onkeltem@unaffiliated/fantomas) has joined #haskell
2019-01-25 11:42:06	-->	M5hadow_w1n5ton[ (w1n5tonmat@gateway/shell/matrix.org/x-seukkloutyzlgluf) has joined #haskell
2019-01-25 11:43:32	<--	milanj (~milan@87.116.183.185) has quit (Quit: This computer has gone to sleep)
2019-01-25 11:44:05	-->	ubert (~ub@ip5b40e0e2.dynamic.kabel-deutschland.de) has joined #haskell
2019-01-25 11:44:06	<--	YongJoon (~Thunderbi@121.67.187.140) has quit (Read error: Connection reset by peer)
2019-01-25 11:45:47	<--	yyt16384 (~yyt16384@unaffiliated/yyt16384) has quit (Ping timeout: 240 seconds)
2019-01-25 11:45:58	-->	marco_t (~marco_t@181.231.118.54) has joined #haskell
2019-01-25 11:46:33	-->	merijn (~merijn@145.100.116.5) has joined #haskell
2019-01-25 11:47:46	-->	xkapastel (uid17782@gateway/web/irccloud.com/x-rmwvtttwzqqkzynh) has joined #haskell
2019-01-25 11:48:15	-->	nan` (~nan`@cpe-75-86-97-30.wi.res.rr.com) has joined #haskell
2019-01-25 11:48:31	-->	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has joined #haskell
2019-01-25 11:48:37	<--	marco_t (~marco_t@181.231.118.54) has quit (Remote host closed the connection)
2019-01-25 11:49:16	-->	silver (~silver@37.214.86.43) has joined #haskell
2019-01-25 11:52:26	<--	nan` (~nan`@cpe-75-86-97-30.wi.res.rr.com) has quit (Ping timeout: 240 seconds)
2019-01-25 11:52:41	-->	HarveyPwca (~HarveyPwc@99-89-221-139.lightspeed.cicril.sbcglobal.net) has joined #haskell
2019-01-25 11:53:23	<--	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has quit (Ping timeout: 245 seconds)
2019-01-25 11:53:27	<--	lnostdal (~lnostdal@77.70.119.51) has quit (Read error: Connection reset by peer)
2019-01-25 11:53:53	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 268 seconds)
2019-01-25 11:54:28	-->	lnostdal (~lnostdal@77.70.119.51) has joined #haskell
2019-01-25 11:56:06	<--	keepLearning512 (~keepLearn@106.51.72.155) has quit (Read error: Connection reset by peer)
2019-01-25 11:57:56	-->	fendor (~fendor@e252-084.eduroam.tuwien.ac.at) has joined #haskell
2019-01-25 11:58:52	-->	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has joined #haskell
2019-01-25 11:59:16	-->	keepLearning512 (~keepLearn@106.51.72.155) has joined #haskell
2019-01-25 11:59:50	<--	keepLearning512 (~keepLearn@106.51.72.155) has quit (Remote host closed the connection)
2019-01-25 12:00:02	<--	inkbottle (~inkbottle@154.126.87.230) has quit (Ping timeout: 268 seconds)
2019-01-25 12:01:11	-->	trcc (~trcc@85.191.91.108) has joined #haskell
2019-01-25 12:02:31	-->	_bo (~Bo@195.39.233.28) has joined #haskell
2019-01-25 12:03:11	<--	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has quit (Ping timeout: 250 seconds)
2019-01-25 12:03:20	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 12:03:33	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 12:03:54	<--	howdoi (uid224@gateway/web/irccloud.com/x-kjegvkfcsyoqatwf) has quit (Quit: Connection closed for inactivity)
2019-01-25 12:04:30	-->	keepLearning512 (~keepLearn@106.51.72.155) has joined #haskell
2019-01-25 12:04:47	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-25 12:04:52	<--	gxt (~gxt@2a02:908:e851:4020:567:4420:3bb5:65db) has quit (Ping timeout: 264 seconds)
2019-01-25 12:04:58	-->	powerbit (~powerbit@5-15-17-196.residential.rdsnet.ro) has joined #haskell
2019-01-25 12:05:46	<--	bo (~Bo@195.39.233.28) has quit (Ping timeout: 250 seconds)
2019-01-25 12:08:58	-->	dddddd (~dddddd@unaffiliated/dddddd) has joined #haskell
2019-01-25 12:09:16	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 246 seconds)
2019-01-25 12:09:30	-->	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has joined #haskell
2019-01-25 12:10:45	<--	encod3 (~encod3@89.20.162.146.static.ef-service.nl) has quit (Remote host closed the connection)
2019-01-25 12:11:12	-->	encod3 (~encod3@89.20.162.146.static.ef-service.nl) has joined #haskell
2019-01-25 12:11:28	-->	marco_t (~marco_t@181.231.118.54) has joined #haskell
2019-01-25 12:12:23	<--	Boomerang (~Boomerang@49.231.6.66) has quit (Ping timeout: 272 seconds)
2019-01-25 12:12:41	-->	bs_ (bs@hellomouse/member/bs) has joined #haskell
2019-01-25 12:12:41	<--	bs (bs@hellomouse/member/bs) has quit (Killed (rajaniemi.freenode.net (Nickname regained by services)))
2019-01-25 12:12:41	--	bs_ is now known as bs
2019-01-25 12:12:51	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 12:13:05	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 12:13:47	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 12:14:26	<--	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has quit (Ping timeout: 240 seconds)
2019-01-25 12:15:26	-->	chaosmasttter (~chaosmast@p2E50E0EF.dip0.t-ipconnect.de) has joined #haskell
2019-01-25 12:16:27	<--	encod3 (~encod3@89.20.162.146.static.ef-service.nl) has quit (Ping timeout: 240 seconds)
2019-01-25 12:16:30	<--	fhdhsni (c3b5a986@gateway/web/cgi-irc/kiwiirc.com/ip.195.181.169.134) has quit (Ping timeout: 246 seconds)
2019-01-25 12:16:53	<--	moose_ (81167c2b@gateway/web/freenode/ip.129.22.124.43) has quit (Ping timeout: 256 seconds)
2019-01-25 12:18:03	<--	Ranhir (~Ranhir@157.97.53.139) has quit (Ping timeout: 244 seconds)
2019-01-25 12:18:22	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 246 seconds)
2019-01-25 12:18:32	<--	marco_t (~marco_t@181.231.118.54) has quit (Remote host closed the connection)
2019-01-25 12:18:47	-->	marco_t (~marco_t@181.231.118.54) has joined #haskell
2019-01-25 12:18:59	-->	milanj (~milan@cable-89-216-113-198.static.sbb.rs) has joined #haskell
2019-01-25 12:19:19	<--	marco_t (~marco_t@181.231.118.54) has quit (Remote host closed the connection)
2019-01-25 12:19:37	-->	marco_t (~marco_t@181.231.118.54) has joined #haskell
2019-01-25 12:20:07	<--	marco_t (~marco_t@181.231.118.54) has quit (Remote host closed the connection)
2019-01-25 12:20:28	-->	marco_t (~marco_t@181.231.118.54) has joined #haskell
2019-01-25 12:20:57	<--	marco_t (~marco_t@181.231.118.54) has quit (Remote host closed the connection)
2019-01-25 12:21:06	merijn	Any recommendations for libraries for PCA in Haskell?
2019-01-25 12:21:07	-->	jhaj (~jhaj@193.108.177.207.dyn.southslope.net) has joined #haskell
2019-01-25 12:21:14	-->	marco_t (~marco_t@181.231.118.54) has joined #haskell
2019-01-25 12:21:24	-->	ph88 (~ph88@a79-169-57-95.cpe.netcabo.pt) has joined #haskell
2019-01-25 12:21:46	<--	marco_t (~marco_t@181.231.118.54) has quit (Remote host closed the connection)
2019-01-25 12:22:03	-->	marco_t (~marco_t@181.231.118.54) has joined #haskell
2019-01-25 12:22:33	<--	marco_t (~marco_t@181.231.118.54) has quit (Remote host closed the connection)
2019-01-25 12:23:55	-->	Ranhir (~Ranhir@157.97.53.139) has joined #haskell
2019-01-25 12:25:16	-->	arpl (~ARPL@546BABEF.cm-12-4c.dynamic.ziggo.nl) has joined #haskell
2019-01-25 12:25:25	<--	yaroot (~yaroot@softbank126103172251.bbtec.net) has quit (Quit: The Lounge - https://thelounge.github.io)
2019-01-25 12:27:56	<--	rprije (~rprije@ppp118-209-115-8.bras1.mel11.internode.on.net) has quit (Ping timeout: 240 seconds)
2019-01-25 12:29:23	-->	acarrico (~acarrico@dhcp-68-142-35-239.greenmountainaccess.net) has joined #haskell
2019-01-25 12:30:10	-->	gxt (~gxt@b2b-78-94-156-186.unitymedia.biz) has joined #haskell
2019-01-25 12:31:00	-->	Snircle (~textual@ip174-68-86-201.sd.sd.cox.net) has joined #haskell
2019-01-25 12:32:56	<--	lastmanstanding (~arjoonn@103.79.223.74) has quit (Ping timeout: 240 seconds)
2019-01-25 12:33:20	-->	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has joined #haskell
2019-01-25 12:33:21	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 12:33:24	<--	gentauro (~gentauro@185.107.12.141) has quit (Quit: leaving)
2019-01-25 12:33:44	-->	gentauro (~gentauro@185.107.12.141) has joined #haskell
2019-01-25 12:34:45	-->	Lears (~leary@125-238-191-209-vdsl.sparkbb.co.nz) has joined #haskell
2019-01-25 12:34:55	<--	[Leary] (~leary@125-238-191-209-vdsl.sparkbb.co.nz) has quit (Read error: Connection reset by peer)
2019-01-25 12:36:52	-->	encod3 (~encod3@89.20.162.146.static.ef-service.nl) has joined #haskell
2019-01-25 12:38:56	<--	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has quit (Ping timeout: 240 seconds)
2019-01-25 12:39:52	<--	karq20 (~karq20@125.19.48.58) has quit (Remote host closed the connection)
2019-01-25 12:41:56	<--	novum (~novumsens@unaffiliated/novumsensum) has quit (Ping timeout: 240 seconds)
2019-01-25 12:42:26	<--	p0lyph3m (~p0lyph3m@2a02:810d:640:776c:76d7:55f6:f85b:c889) has quit (Ping timeout: 240 seconds)
2019-01-25 12:43:56	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 240 seconds)
2019-01-25 12:46:34	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-25 12:46:46	<--	ltchen (~ltchen@host-92-30-204-54.as13285.net) has quit (Remote host closed the connection)
2019-01-25 12:48:04	-->	DavidEichmann (~david@bgiggle.plus.com) has joined #haskell
2019-01-25 12:48:11	arianvp	hey
2019-01-25 12:48:16	arianvp	anybody here use cabal new-build on NixOS?
2019-01-25 12:48:21	arianvp	I mean,  cabal v2*
2019-01-25 12:48:25	arianvp	I can't get cabal new-repl to work
2019-01-25 12:48:35	arianvp	it crashes with  "can't load .so/.DLL for libz.so"
2019-01-25 12:48:47	arianvp	cabal new-build works fine though.  and   zlib is in my shell.nix
2019-01-25 12:48:48	arianvp	:/
2019-01-25 12:49:36	<--	arpl (~ARPL@546BABEF.cm-12-4c.dynamic.ziggo.nl) has left #haskell
2019-01-25 12:49:37	<--	HarveyPwca (~HarveyPwc@99-89-221-139.lightspeed.cicril.sbcglobal.net) has quit (Read error: Connection reset by peer)
2019-01-25 12:50:00	Lears	arianvp: No, but I have the same problem with X11. Let me know if you figure it out.
2019-01-25 12:50:34	arianvp	seems like a cabal bug to me or something
2019-01-25 12:50:48	arianvp	Lears: oh then im gonna run into that soon as well. I'm trying to build a gtk project :P
2019-01-25 12:50:48	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 246 seconds)
2019-01-25 12:51:18	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 12:56:38	-->	DickMcLargeHuge (~Sornaensi@79.142.232.102.static.router4.bolignet.dk) has joined #haskell
2019-01-25 12:57:04	 *	M5hadow_w1n5ton[ sent a long message:  < https://matrix.org/_matrix/media/v1/download/matrix.org/xiSJhtltBcgXMSGaeCMOlWDR >
2019-01-25 12:57:49	arianvp	Lears: I found it I think
2019-01-25 12:57:54	arianvp	https://www.mail-archive.com/search?l=nix-dev@lists.science.uu.nl&q=subject:%22%5C%5BNix%5C-dev%5C%5D+problem+using+Haskell+libraries+that+depend+on+C+libraries%22&o=newest&f=1
2019-01-25 12:58:19	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 12:58:27	<--	aarvar (~foewfoiew@50.35.43.250) has quit (Ping timeout: 240 seconds)
2019-01-25 12:58:33	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 13:00:28	<--	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has quit (Ping timeout: 256 seconds)
2019-01-25 13:00:35	-->	kish\ (~oracle@unaffiliated/oracle) has joined #haskell
2019-01-25 13:02:23	-->	Aquazi (uid312403@gateway/web/irccloud.com/x-nobbkztstgjmlxrg) has joined #haskell
2019-01-25 13:02:31	-->	o1lo01ol1o (~o1lo01ol1@cpe-74-72-45-166.nyc.res.rr.com) has joined #haskell
2019-01-25 13:02:52	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-25 13:03:05	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 13:05:19	-->	davr0s (~textual@host109-155-92-146.range109-155.btcentralplus.com) has joined #haskell
2019-01-25 13:05:27	-->	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has joined #haskell
2019-01-25 13:05:56	-->	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has joined #haskell
2019-01-25 13:06:03	-->	p0lyph3m (~p0lyph3m@2a02:810d:640:776c:76d7:55f6:f85b:c889) has joined #haskell
2019-01-25 13:06:43	-->	agander (~agander@185.128.27.100) has joined #haskell
2019-01-25 13:06:52	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 250 seconds)
2019-01-25 13:08:20	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 13:08:36	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 13:08:54	-->	pavonia (~user@unaffiliated/siracusa) has joined #haskell
2019-01-25 13:10:15	-->	antsmartian (~antsmarti@171.60.232.18) has joined #haskell
2019-01-25 13:10:53	<--	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has quit (Ping timeout: 245 seconds)
2019-01-25 13:12:29	--	Claudius1aximus is now known as ClaudiusMaximus
2019-01-25 13:12:51	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-25 13:13:05	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 13:13:13	-->	HarveyPwca (~HarveyPwc@99-89-221-139.lightspeed.cicril.sbcglobal.net) has joined #haskell
2019-01-25 13:14:35	-->	Solonarv (~Thunderbi@astrasbourg-653-1-100-90.w90-13.abo.wanadoo.fr) has joined #haskell
2019-01-25 13:16:07	<--	efskap_ (~dmitry@carmd-fwm01.sierrawireless.com) has quit (Ping timeout: 246 seconds)
2019-01-25 13:17:31	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 13:17:35	Lears	arianvp: Thanks, I had to cut a bit out of $NIX_LDFLAGS but that workaround has v2-repl running.
2019-01-25 13:18:01	Lears	I'm surprised we still have this 4+ years onwards.
2019-01-25 13:18:23	arianvp	Yeh I think the suggested way to handle this is  ghc.withPackages
2019-01-25 13:18:29	arianvp	but that uses the packages from Nix
2019-01-25 13:19:47	-->	nowhere_man (~pierre@ede67-3-82-235-52-53.fbx.proxad.net) has joined #haskell
2019-01-25 13:23:42	-->	efskap_ (~dmitry@carmd-fwm01.sierrawireless.com) has joined #haskell
2019-01-25 13:23:54	-->	ym555 (~ym@156.199.213.34) has joined #haskell
2019-01-25 13:24:29	arianvp	Lears: it didnt work for me :(
2019-01-25 13:25:04	-->	jao (~jao@pdpc/supporter/professional/jao) has joined #haskell
2019-01-25 13:25:56	-->	cynapse (~chris@185.217.69.133) has joined #haskell
2019-01-25 13:26:17	Lears	Are you running the command from a nix-shell that can build the project? If you're not then $NIX_LDFLAGS is probably empty; I'd check that it has the lib dir/s you need.
2019-01-25 13:27:09	-->	ltchen (~ltchen@host-92-30-204-54.as13285.net) has joined #haskell
2019-01-25 13:28:20	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 13:28:23	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-25 13:28:32	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 13:28:40	-->	hellozee (~hellozee@150.242.72.222) has joined #haskell
2019-01-25 13:29:07	-->	Synthetica (uid199651@gateway/web/irccloud.com/x-hiucjxggnalzoypx) has joined #haskell
2019-01-25 13:29:38	-->	asheshambasta (~user@217.111.215.151) has joined #haskell
2019-01-25 13:29:59	asheshambasta	https://gist.github.com/asheshambasta/077b15362bca01e7c33418a9cdd85c2b <- is there a known "pattern" to implement things like these? 
2019-01-25 13:32:33	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 245 seconds)
2019-01-25 13:32:54	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-25 13:33:02	merijn	asheshambasta: I'm not quite sure what "things like these" is supposed to be?
2019-01-25 13:33:08	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 13:33:09	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 268 seconds)
2019-01-25 13:33:19	wildtrees[m]	Perhaps a dependent map not totally sure though
2019-01-25 13:34:28	asheshambasta	I see, this http://hackage.haskell.org/package/HMap-1.3.0/docs/Data-HMap.html is what I've just stumbled upon 
2019-01-25 13:34:41	__monty__	asheshambasta: Is it the "forgetting" of the type parameter so you can have a somewhat heterogeneous Map?
2019-01-25 13:34:53	-->	lastmanstanding (~arjoonn@111.92.50.159) has joined #haskell
2019-01-25 13:35:05	-->	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has joined #haskell
2019-01-25 13:35:35	asheshambasta	__monty__: yes but also being able to drill down to the specific type when I'm doing a lookup 
2019-01-25 13:35:44	<--	Unhammer (~Unhammer@gateway/tor-sasl/unhammer) has quit (Quit: WeeChat 1.0.1)
2019-01-25 13:38:20	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 13:38:33	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 13:39:08	-->	inkbottle (~inkbottle@154.126.64.179) has joined #haskell
2019-01-25 13:39:56	<--	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has quit (Ping timeout: 240 seconds)
2019-01-25 13:40:46	-->	yyt16384 (~yyt16384@unaffiliated/yyt16384) has joined #haskell
2019-01-25 13:41:09	-->	jabbslad_ (uid25161@gateway/web/irccloud.com/x-rgmrkfppvwcsxmye) has joined #haskell
2019-01-25 13:41:18	<--	errst (~errst@5.24.215.113) has quit (Ping timeout: 245 seconds)
2019-01-25 13:41:36	-->	patrl (~patrl@unaffiliated/patrl) has joined #haskell
2019-01-25 13:42:51	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-25 13:42:56	<--	nullremains (~nullremai@49.229.138.119) has quit (Ping timeout: 240 seconds)
2019-01-25 13:43:04	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 13:43:11	-->	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has joined #haskell
2019-01-25 13:44:49	<--	quicksilver (~jules@roobarb.crazydogs.org) has quit (Ping timeout: 246 seconds)
2019-01-25 13:45:14	<--	trcc (~trcc@85.191.91.108) has quit (Remote host closed the connection)
2019-01-25 13:45:37	-->	smitop (uid328768@gateway/web/irccloud.com/x-untkmdueudbhpumu) has joined #haskell
2019-01-25 13:45:46	-->	quicksilver (~jules@roobarb.crazydogs.org) has joined #haskell
2019-01-25 13:45:53	-->	trcc (~trcc@85.191.91.108) has joined #haskell
2019-01-25 13:47:58	<--	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has quit (Ping timeout: 245 seconds)
2019-01-25 13:48:30	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 13:48:35	-->	nan` (~nan`@cpe-75-86-97-30.wi.res.rr.com) has joined #haskell
2019-01-25 13:48:42	-->	luite_ (~luite@jabberwock.xs4all.nl) has joined #haskell
2019-01-25 13:49:38	-->	comstar (~comstar@unaffiliated/comstar) has joined #haskell
2019-01-25 13:49:43	-->	deviantfero (~deviantfe@ip168-243-230-189.intercom.com.sv) has joined #haskell
2019-01-25 13:50:13	<--	trcc (~trcc@85.191.91.108) has quit (Ping timeout: 250 seconds)
2019-01-25 13:50:44	-->	natrys (~natrys@116.206.252.68) has joined #haskell
2019-01-25 13:51:21	-->	lawlesseel (~lawlessee@gateway/tor-sasl/lawlesseel) has joined #haskell
2019-01-25 13:52:56	<--	nan` (~nan`@cpe-75-86-97-30.wi.res.rr.com) has quit (Ping timeout: 240 seconds)
2019-01-25 13:53:17	-->	wei2912 (~wei2912@unaffiliated/wei2912) has joined #haskell
2019-01-25 13:55:27	<--	jneira (d451b273@gateway/web/freenode/ip.212.81.178.115) has quit (Quit: Page closed)
2019-01-25 13:55:50	-->	hellozee_ (~hellozee@150.242.65.73) has joined #haskell
2019-01-25 13:56:24	-->	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has joined #haskell
2019-01-25 13:56:56	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 240 seconds)
2019-01-25 13:57:19	<--	xkapastel (uid17782@gateway/web/irccloud.com/x-rmwvtttwzqqkzynh) has quit (Quit: Connection closed for inactivity)
2019-01-25 13:57:51	<--	Lowl3v3l (~Lowl3v3l@ulbp2362.ulb.uni-jena.de) has quit (Remote host closed the connection)
2019-01-25 13:58:02	<--	jhaj (~jhaj@193.108.177.207.dyn.southslope.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-25 13:58:17	-->	nbloomf (~nbloomf@2600:1700:83e0:1f40:6d74:a91e:18fc:6759) has joined #haskell
2019-01-25 13:58:26	<--	hellozee (~hellozee@150.242.72.222) has quit (Ping timeout: 250 seconds)
2019-01-25 13:58:37	 *	hackage graph-wrapper 0.2.6.0 - A wrapper around the standard Data.Graph with a less awkward interface  https://hackage.haskell.org/package/graph-wrapper-0.2.6.0 (SoenkeHahn)
2019-01-25 13:59:53	lortabac	asheshambasta: do you have at most one element for each type?
2019-01-25 14:00:07	<--	hellozee_ (~hellozee@150.242.65.73) has quit (Ping timeout: 240 seconds)
2019-01-25 14:00:33	-->	FreeBirdLjj (~freebirdl@114.91.21.224) has joined #haskell
2019-01-25 14:00:56	<--	Gurkenglas (~Gurkengla@unaffiliated/gurkenglas) has quit (Ping timeout: 240 seconds)
2019-01-25 14:01:09	-->	JimmyRcom (~JimmyRcom@71-11-240-211.dhcp.dntn.tx.charter.com) has joined #haskell
2019-01-25 14:01:35	-->	xkapastel (uid17782@gateway/web/irccloud.com/x-lzopamngvwdoyvez) has joined #haskell
2019-01-25 14:01:48	asheshambasta	lortabac: yes
2019-01-25 14:02:11	asheshambasta	lortabac: from the HMap package solves my problem, from what I see 
2019-01-25 14:02:15	asheshambasta	its quite neat 
2019-01-25 14:02:25	lortabac	in that case maybe you can avoid the map completely and just use a type class
2019-01-25 14:02:29	<--	turbo_MaCk (~turbo_MaC@ip-78-102-113-18.net.upcbroadband.cz) has quit (Quit: WeeChat 2.2)
2019-01-25 14:02:39	lortabac	something like: class LookupFieldConf a where lookupFieldConf :: Proxy a -> FieldConf a
2019-01-25 14:03:00	lortabac	and then define an instance for each element
2019-01-25 14:03:11	asheshambasta	lortabac: yeah: 
2019-01-25 14:03:12	asheshambasta	-- | An environment within which `FieldConf` for some types can be read
2019-01-25 14:03:12	asheshambasta	class Monad m => MonadField (m :: * -> *) where
2019-01-25 14:03:12	asheshambasta	  fieldConf :: DataField a => Proxy a -> m (Maybe (FieldConf a))
2019-01-25 14:03:19	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 14:03:31	asheshambasta	(on similar lines)
2019-01-25 14:03:36	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 14:03:39	<--	lightandlight (uid135476@gateway/web/irccloud.com/x-qqllgbycwdyfudhj) has quit (Quit: Connection closed for inactivity)
2019-01-25 14:04:04	asheshambasta	and then I'm going to delegate this problem to the person implementing an instance of this environment 
2019-01-25 14:04:32	lortabac	it looks simpler than a full-fledged hmap
2019-01-25 14:04:39	<--	FreeBirdLjj (~freebirdl@114.91.21.224) has quit (Ping timeout: 246 seconds)
2019-01-25 14:05:07	 *	hackage ngx-export 1.6.4 - Helper module for Nginx haskell module  https://hackage.haskell.org/package/ngx-export-1.6.4 (lyokha)
2019-01-25 14:06:58	asheshambasta	lortabac: besides, I'd like the implementation of "getting" the right type to be flexible and up to the implementing party 
2019-01-25 14:07:29	asheshambasta	should they be in some sort of MonadReader HMap environment, they can chose to use that
2019-01-25 14:07:50	lyxia	have you seen typerep-map
2019-01-25 14:07:54	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-25 14:08:00	asheshambasta	lyxia: no
2019-01-25 14:08:08	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 14:08:31	-->	fmixing (~fmixing@host-236-157-66-217.spbmts.ru) has joined #haskell
2019-01-25 14:08:43	asheshambasta	lyxia: I see now, nice 
2019-01-25 14:09:34	<--	davr0s (~textual@host109-155-92-146.range109-155.btcentralplus.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2019-01-25 14:10:02	asheshambasta	yeah this is nicer
2019-01-25 14:10:05	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-25 14:10:30	<--	jhrcek (jhrcek@nat/redhat/x-itiqveijeyyeawpw) has quit (Remote host closed the connection)
2019-01-25 14:10:44	-->	SpinTensor (~SpinTenso@200116b804189a00be954201fda5bb05.dip.versatel-1u1.de) has joined #haskell
2019-01-25 14:12:12	<--	fmixing (~fmixing@host-236-157-66-217.spbmts.ru) has quit (Remote host closed the connection)
2019-01-25 14:13:05	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 14:15:06	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 268 seconds)
2019-01-25 14:15:14	-->	oish_ (~charlie@94.117.31.66) has joined #haskell
2019-01-25 14:16:50	-->	ystael (~ystael@50-199-243-61-static.hfc.comcastbusiness.net) has joined #haskell
2019-01-25 14:16:50	-->	Unhammer (~Unhammer@gateway/tor-sasl/unhammer) has joined #haskell
2019-01-25 14:17:39	-->	xrexeon (~xrexeon@41.237.99.188) has joined #haskell
2019-01-25 14:17:48	<--	xrexeon (~xrexeon@41.237.99.188) has quit (Max SendQ exceeded)
2019-01-25 14:18:21	-->	Signorina (~Tunisie@41.230.0.232) has joined #haskell
2019-01-25 14:18:34	<--	Signorina (~Tunisie@41.230.0.232) has left #haskell
2019-01-25 14:18:41	-->	nullremains (~nullremai@49.230.85.110) has joined #haskell
2019-01-25 14:19:55	inkbottle	ski [sorry we've been cut off, I'll come back to that later]: It is not yet crystal clear, as I don't even need a functional type as the second parameter of the type constructor Const; However, I understand I'll have some hard time finding some value of type a to bind at the issue of Const 3 :: Const Int a [I wish I had some mind boggling exercise sheet about that]
2019-01-25 14:20:03	<--	harfangk (~harfangk_@114.200.205.130) has quit (Ping timeout: 245 seconds)
2019-01-25 14:21:05	<--	HarveyPwca (~HarveyPwc@99-89-221-139.lightspeed.cicril.sbcglobal.net) has quit (Quit: Leaving)
2019-01-25 14:21:08	 *	hackage ngx-export-tools 0.4.4.0 - Extra tools for Nginx haskell module  https://hackage.haskell.org/package/ngx-export-tools-0.4.4.0 (lyokha)
2019-01-25 14:21:21	-->	nowhereman (~pierre@2a01:e35:2eb3:4350:3fcb:8255:8d52:d188) has joined #haskell
2019-01-25 14:21:27	<--	nowhere_man (~pierre@ede67-3-82-235-52-53.fbx.proxad.net) has quit (Read error: Connection reset by peer)
2019-01-25 14:21:41	-->	davr0s (~textual@host109-155-92-146.range109-155.btcentralplus.com) has joined #haskell
2019-01-25 14:22:27	-->	amar (~amar@217.138.122.50) has joined #haskell
2019-01-25 14:22:51	--	amar is now known as Guest41781
2019-01-25 14:23:42	inkbottle	I took thorough notes of the specifics, so I'll be able to come back to it later :)
2019-01-25 14:25:07	<--	ym555 (~ym@156.199.213.34) has quit (Quit: WeeChat 2.3)
2019-01-25 14:25:22	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 272 seconds)
2019-01-25 14:25:48	<--	o1lo01ol1o (~o1lo01ol1@cpe-74-72-45-166.nyc.res.rr.com) has quit (Remote host closed the connection)
2019-01-25 14:26:25	<--	Guest41781 (~amar@217.138.122.50) has quit (Read error: Connection reset by peer)
2019-01-25 14:26:41	-->	o1lo01ol1o (~o1lo01ol1@cpe-74-72-45-166.nyc.res.rr.com) has joined #haskell
2019-01-25 14:26:56	<--	jao (~jao@pdpc/supporter/professional/jao) has quit (Ping timeout: 240 seconds)
2019-01-25 14:28:43	-->	carlomagno1 (~carlomagn@inet-hqmc05-o.oracle.com) has joined #haskell
2019-01-25 14:28:43	<--	carlomagno (~carlomagn@inet-hqmc01-o.oracle.com) has quit (Remote host closed the connection)
2019-01-25 14:28:46	<--	antsmartian (~antsmarti@171.60.232.18) has quit (Remote host closed the connection)
2019-01-25 14:29:11	<--	nowhereman (~pierre@2a01:e35:2eb3:4350:3fcb:8255:8d52:d188) has quit (Ping timeout: 268 seconds)
2019-01-25 14:30:26	<--	ltchen (~ltchen@host-92-30-204-54.as13285.net) has quit (Ping timeout: 240 seconds)
2019-01-25 14:31:28	iqubic	ski: There's one major flaw with the binOp parser you helped me create.
2019-01-25 14:32:25	iqubic	"(1 + 3) + 4" fails to parse properly. Even though it really should.
2019-01-25 14:32:34	-->	sw1nn (~sw1nn@ec2-35-178-73-242.eu-west-2.compute.amazonaws.com) has joined #haskell
2019-01-25 14:33:10	iqubic	that's because `(1 + 3)' is an expr, and our parser needs to start with a number first.
2019-01-25 14:33:50	<--	TipsyMe (~TipsyMe@50-50-239-253.waus.wi.frontiernet.net) has quit (Quit: TipsyMe)
2019-01-25 14:34:46	 *	M5hadow_w1n5ton[ sent a long message:  < https://matrix.org/_matrix/media/v1/download/matrix.org/qDWxOcpSoQnJWoeEILXuUoNj >
2019-01-25 14:34:56	-->	supercoven_ (~quassel@dsl-hkibng42-5673cf-252.dhcp.inet.fi) has joined #haskell
2019-01-25 14:35:11	sm	nifty. Auto paste bin
2019-01-25 14:35:27	<--	sw1nn (~sw1nn@ec2-35-178-73-242.eu-west-2.compute.amazonaws.com) has quit (Read error: Connection reset by peer)
2019-01-25 14:35:37	-->	bbrodriguez (~Bender_Be@189.217.96.119) has joined #haskell
2019-01-25 14:35:43	sm	I wish irc clients did that
2019-01-25 14:36:04	<--	supercoven (~quassel@dsl-hkibng42-5673cf-252.dhcp.inet.fi) has quit (Ping timeout: 264 seconds)
2019-01-25 14:36:08	<--	o1lo01ol1o (~o1lo01ol1@cpe-74-72-45-166.nyc.res.rr.com) has quit (Ping timeout: 250 seconds)
2019-01-25 14:36:33	__monty__	sm: If only the url wasn't so terrible : ) Pretty sure you can use the "long message do you really want to send" hook in irssi to pastebin for you.
2019-01-25 14:36:36	byorgey	iqubic: writing a proper parser for expressions with parentheses and infix binary operators is tricky to get right.
2019-01-25 14:36:49	-->	sw1nn (~sw1nn@ec2-35-178-73-242.eu-west-2.compute.amazonaws.com) has joined #haskell
2019-01-25 14:36:59	byorgey	iqubic: if you want to learn how to do it yourself, Google "shunting yard algorithm".  If you just want to make one that works, use https://hackage.haskell.org/package/parser-combinators-1.0.1/docs/Control-Monad-Combinators-Expr.html
2019-01-25 14:37:24	<--	lnostdal (~lnostdal@77.70.119.51) has quit (Read error: Connection reset by peer)
2019-01-25 14:37:37	iqubic	byorgeyL I have one that nearly works to be honest.
2019-01-25 14:37:53	byorgey	great
2019-01-25 14:38:28	iqubic	Me and Ski worked it out last night.
2019-01-25 14:38:46	-->	o1lo01ol1o (~o1lo01ol1@cpe-74-72-45-166.nyc.res.rr.com) has joined #haskell
2019-01-25 14:38:48	-->	lnostdal (~lnostdal@77.70.119.51) has joined #haskell
2019-01-25 14:39:06	ski	iqubic : right. so it should not have been `expr ::= expr + num | num', but `expr ::= expr + atomic | atomic', where `atomic ::= '(' expr ')' | num', i think
2019-01-25 14:39:26	iqubic	Well, I have a few more atomic things.
2019-01-25 14:39:37	iqubic	but yes, basically that.
2019-01-25 14:39:37	 *	hackage tonatona 0.1.0.0 - meta application framework  https://hackage.haskell.org/package/tonatona-0.1.0.0 (arowM)
2019-01-25 14:39:40	ski	yea :)
2019-01-25 14:40:05	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 14:40:39	-->	hyperisco (~hyperisco@d192-186-117-226.home4.cgocable.net) has joined #haskell
2019-01-25 14:41:37	 *	hackage tonatona-persistent-postgresql 0.1.0.0, tonatona-logger 0.2.0.0, tonaparser 0.1.0.0, tonalude 0.1.0.0, tonatona-servant 0.1.0.0, tonatona-persistent-sqlite 0.1.0.0 (arowM)
2019-01-25 14:42:34	<--	patrl (~patrl@unaffiliated/patrl) has quit (Ping timeout: 246 seconds)
2019-01-25 14:43:14	<--	o1lo01ol1o (~o1lo01ol1@cpe-74-72-45-166.nyc.res.rr.com) has quit (Ping timeout: 244 seconds)
2019-01-25 14:43:40	-->	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has joined #haskell
2019-01-25 14:45:14	<--	oish_ (~charlie@94.117.31.66) has quit (Ping timeout: 250 seconds)
2019-01-25 14:46:08	-->	ltchen (~ltchen@host-92-30-204-54.as13285.net) has joined #haskell
2019-01-25 14:46:32	<--	cpup (~cpup@24-151-32-148.dhcp.nwtn.ct.charter.com) has quit (Ping timeout: 268 seconds)
2019-01-25 14:47:24	byorgey	yeah, this idea of having mutually recursive expression and atomic parsers seems common but I don't remember ever learning about it explicitly, I kind of just figured it out.
2019-01-25 14:47:35	byorgey	how come + is required to have an 'atomic' on its RHS?
2019-01-25 14:47:55	byorgey	you're not allowed to write   2 + (1 + 3) ?
2019-01-25 14:48:17	ski	well, it's more that presumably that would be allowed
2019-01-25 14:48:19	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 14:48:26	<--	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has quit (Ping timeout: 240 seconds)
2019-01-25 14:48:36	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 14:48:45	ski	with just `expr ::= expr + num | atomic', that'd be fine, but then to the right of any `+' must be only a numeral
2019-01-25 14:48:56	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 240 seconds)
2019-01-25 14:49:04	<--	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has quit (Remote host closed the connection)
2019-01-25 14:49:05	ski	replacing that `num' with `atomic', we also allow a bracketed expression to the right of `+'
2019-01-25 14:49:05	byorgey	oh, right, never mind!
2019-01-25 14:50:00	-->	o1lo01ol1o (~o1lo01ol1@cpe-74-72-45-166.nyc.res.rr.com) has joined #haskell
2019-01-25 14:50:07	ski	(we started with `expr ::= expr + num | num', rather than `expr ::= expr + expr | num', in order not to complicate issues with ambiguous grammar, and with yet another recursion, on top of left recursion)
2019-01-25 14:50:19	byorgey	yes, that makes sense.
2019-01-25 14:51:07	ski	(that recursion turns out to not be problematic. but i figured it's easier to just get rid of it, while we're running into problems caused by (some) recursions)
2019-01-25 14:51:30	byorgey	OK, if you only have one binary operator it's not too bad to write it manually I guess.  I was thinking of the difficulties that arise when you want to parse things like  2 + 3 * 4 - 6 ^ 2 ^ 2
2019-01-25 14:51:52	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-25 14:52:07	ski	you can still separate the precedences manually, and then transform away the left recursion
2019-01-25 14:52:50	ski	but if one wants to be able to feed in an arbitrary operator spec table, or even want to allow dynamically declaring operators, it gets more complicated
2019-01-25 14:52:51	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-25 14:53:07	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 14:53:20	<--	wei2912 (~wei2912@unaffiliated/wei2912) has quit (Quit: Lost terminal)
2019-01-25 14:53:25	ski	(i had some ideas where i thought shift/reset could help with the latter ..)
2019-01-25 14:54:52	byorgey	right
2019-01-25 14:55:52	byorgey	once upon a time someone had a problem. "I know," they thought, "I'll use delimited continuations."  Now they have two problems.
2019-01-25 14:56:30	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 250 seconds)
2019-01-25 14:56:38	 *	ski grins
2019-01-25 14:56:52	-->	antsmartian (~antsmarti@171.60.232.18) has joined #haskell
2019-01-25 14:57:28	<--	encod3 (~encod3@89.20.162.146.static.ef-service.nl) has quit (Remote host closed the connection)
2019-01-25 14:57:41	-->	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has joined #haskell
2019-01-25 14:57:54	ski	@quote get.a.link
2019-01-25 14:57:55	lambdabot	shachaf says: Some people, when asking about a problem in #haskell, get a link to okmij.org. Now they have two problems.
2019-01-25 14:59:11	--	simonmic[m] is now known as sm[m]
2019-01-25 14:59:21	<--	ltchen (~ltchen@host-92-30-204-54.as13285.net) has quit (Remote host closed the connection)
2019-01-25 14:59:36	-->	ltchen (~ltchen@host-92-30-204-54.as13285.net) has joined #haskell
2019-01-25 14:59:39	<--	ltchen (~ltchen@host-92-30-204-54.as13285.net) has quit (Remote host closed the connection)
2019-01-25 14:59:56	-->	ltchen (~ltchen@host-92-30-204-54.as13285.net) has joined #haskell
2019-01-25 15:00:01	<--	davr0s (~textual@host109-155-92-146.range109-155.btcentralplus.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2019-01-25 15:00:06	-->	bgamari (~bgamari@pool-72-65-102-167.ptldme.east.myfairpoint.net) has joined #haskell
2019-01-25 15:00:25	<--	ltchen (~ltchen@host-92-30-204-54.as13285.net) has quit (Remote host closed the connection)
2019-01-25 15:00:43	byorgey	hehe
2019-01-25 15:01:03	iqubic	ski: So I just realized that the stuff we hammered out yesterday has a major flaw.
2019-01-25 15:01:18	__monty__	What is thisk okmij.org?
2019-01-25 15:01:24	iqubic	Ski: I have no way to parse "1 + 2 * 3" at all.
2019-01-25 15:01:55	ski	@quote give.a.man
2019-01-25 15:01:55	lambdabot	mrd says: give a man a fire and you warm him for one day; point a man to oleg's web site, and he will create fire for himself -- in the type system
2019-01-25 15:02:07	iqubic	My function only works for the one operator type.
2019-01-25 15:02:29	-->	doyougnu (~doyougnu@c-73-11-11-86.hsd1.or.comcast.net) has joined #haskell
2019-01-25 15:02:34	<--	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has quit (Ping timeout: 250 seconds)
2019-01-25 15:02:41	iqubic	So I think I need to do something clever, but I'm not sure what.
2019-01-25 15:03:22	<--	o1lo01ol1o (~o1lo01ol1@cpe-74-72-45-166.nyc.res.rr.com) has quit (Ping timeout: 272 seconds)
2019-01-25 15:03:32	ski	@quote cornered.me
2019-01-25 15:03:33	lambdabot	edwinb says: where does 'Oleg cornered me in a pub and explained delimited continuations to me' fit in?
2019-01-25 15:03:35	srhb	__monty__: Oleg Kiselyov's (ok) homepage
2019-01-25 15:03:36	ski	@quote standard.operating.procedure
2019-01-25 15:03:37	lambdabot	Pseudonym says: What was considered 100 milli-Olegs of type hackery five years ago is standard operating procedure these days
2019-01-25 15:04:20	ski	iqubic : well, you need to, somehow, represent the different precedences of operators
2019-01-25 15:04:33	iqubic	I know. I'm not sure how.
2019-01-25 15:05:00	ski	<ski> you can still separate the precedences manually, and then transform away the left recursion
2019-01-25 15:05:03	<--	lastmanstanding (~arjoonn@111.92.50.159) has quit (Ping timeout: 245 seconds)
2019-01-25 15:05:04	ski	(in that order)
2019-01-25 15:05:06	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 15:05:39	iqubic	But how will I deal with something like "1 + 2 * 3"?
2019-01-25 15:05:56	<--	bbrodriguez (~Bender_Be@189.217.96.119) has quit (Ping timeout: 240 seconds)
2019-01-25 15:05:57	ski	how do you want the parser to (implicitly) bracket that ?
2019-01-25 15:06:07	iqubic	1 + (2 * 4)
2019-01-25 15:06:12	iqubic	err... 3
2019-01-25 15:06:18	iqubic	But you get the idea.
2019-01-25 15:06:20	ski	so, you want a sum of products, of numerals ?
2019-01-25 15:06:31	iqubic	Well, yes.
2019-01-25 15:06:36	ski	(that's a hint)
2019-01-25 15:07:24	iqubic	But for something like `1 + 2 - 3 + 4' I want `((1 + 2) - 3) + 4'
2019-01-25 15:07:30	<--	doyougnu (~doyougnu@c-73-11-11-86.hsd1.or.comcast.net) has quit (Ping timeout: 268 seconds)
2019-01-25 15:07:46	ski	well, addition and subtraction are sortof the same thing
2019-01-25 15:07:49	<--	lnostdal (~lnostdal@77.70.119.51) has quit (Ping timeout: 272 seconds)
2019-01-25 15:08:04	iqubic	Right. What I need is a way to do a sum of products.
2019-01-25 15:08:09	iqubic	Which IDK how to do.
2019-01-25 15:08:14	-->	FreeBirdLjj (~freebirdl@114.91.21.224) has joined #haskell
2019-01-25 15:08:19	ski	you could define "sum" to be "a sequence of terms, interspersed with `+'s and `-'s"
2019-01-25 15:08:26	iqubic	I will.
2019-01-25 15:08:26	<--	inkbottle (~inkbottle@154.126.64.179) has quit (Ping timeout: 240 seconds)
2019-01-25 15:08:38	ski	(then you'd need to define "term")
2019-01-25 15:08:47	iqubic	Oh. I see.
2019-01-25 15:08:54	 *	ski smiles
2019-01-25 15:09:42	iqubic	A term is "a sequence of atomic tokens interspersed with `*'s and `/'s"
2019-01-25 15:09:55	iqubic	Is that the trick to this?
2019-01-25 15:09:58	ski	well, atomic expressions, but sure
2019-01-25 15:10:27	iqubic	I have to go, but I'll work from there. Starting with a grammar of course.
2019-01-25 15:10:29	-->	Sheilong (uid293653@gateway/web/irccloud.com/x-assycxrbdfpuwdhe) has joined #haskell
2019-01-25 15:10:32	ski	(or, you could say "factors", if you want one more indirection)
2019-01-25 15:10:33	<--	iqubic (~user@98.232.18.124) has left #haskell ("ERC (IRC client for Emacs 26.1)")
2019-01-25 15:10:46	<--	yoneda (~mike@193.206.102.122) has quit (Quit: leaving)
2019-01-25 15:12:07	 *	hackage aeson-value-parser 0.14 - An API for parsing "aeson" JSON tree into Haskell types  https://hackage.haskell.org/package/aeson-value-parser-0.14 (NikitaVolkov)
2019-01-25 15:13:37	-->	oisdk (~textual@86-45-6-241-dynamic.agg2.dyx.chf-qkr.eircom.net) has joined #haskell
2019-01-25 15:15:12	-->	o1lo01ol1o (~o1lo01ol1@cpe-74-72-45-166.nyc.res.rr.com) has joined #haskell
2019-01-25 15:17:59	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 268 seconds)
2019-01-25 15:19:23	-->	HarveyPwca (~HarveyPwc@ip-64-134-172-208.public.wayport.net) has joined #haskell
2019-01-25 15:19:33	<--	o1lo01ol1o (~o1lo01ol1@cpe-74-72-45-166.nyc.res.rr.com) has quit (Ping timeout: 246 seconds)
2019-01-25 15:19:42	-->	dale (~dale@unaffiliated/dale) has joined #haskell
2019-01-25 15:22:04	<--	aplainzetakind (~dk@2E8BD6FE.catv.pool.telekom.hu) has quit (Ping timeout: 250 seconds)
2019-01-25 15:22:35	<--	HarveyPwca (~HarveyPwc@ip-64-134-172-208.public.wayport.net) has quit (Max SendQ exceeded)
2019-01-25 15:23:19	-->	lnostdal (~lnostdal@77.70.119.51) has joined #haskell
2019-01-25 15:23:49	-->	HarveyPwca (~HarveyPwc@ip-64-134-172-208.public.wayport.net) has joined #haskell
2019-01-25 15:24:44	<--	sQVe (~sQVe@unaffiliated/sqve) has quit (Quit: Bye!)
2019-01-25 15:25:02	-->	jhaj (~jhaj@2620:0:e50:1401:2ca1:395c:5680:c7e) has joined #haskell
2019-01-25 15:25:04	-->	Welkin (~Welkin@047-227-169-219.res.spectrum.com) has joined #haskell
2019-01-25 15:25:56	-->	o1lo01ol1o (~o1lo01ol1@cpe-74-72-45-166.nyc.res.rr.com) has joined #haskell
2019-01-25 15:27:13	-->	eschnett_ (~eschnett@66.97.27.10) has joined #haskell
2019-01-25 15:28:08	<--	bgamari (~bgamari@pool-72-65-102-167.ptldme.east.myfairpoint.net) has quit (Ping timeout: 250 seconds)
2019-01-25 15:28:21	-->	bgamari (~bgamari@2001:470:e438::1) has joined #haskell
2019-01-25 15:29:48	<--	Welkin (~Welkin@047-227-169-219.res.spectrum.com) has quit (Client Quit)
2019-01-25 15:30:03	<--	o1lo01ol1o (~o1lo01ol1@cpe-74-72-45-166.nyc.res.rr.com) has quit (Ping timeout: 245 seconds)
2019-01-25 15:30:54	<--	keepLearning512 (~keepLearn@106.51.72.155) has quit (Remote host closed the connection)
2019-01-25 15:32:15	-->	fen (518372ac@gateway/web/freenode/ip.81.131.114.172) has joined #haskell
2019-01-25 15:32:17	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 15:32:28	<--	rain1 (~My_user_n@unaffiliated/rain1) has quit (Ping timeout: 250 seconds)
2019-01-25 15:32:33	<--	p0lyph3m (~p0lyph3m@2a02:810d:640:776c:76d7:55f6:f85b:c889) has quit (Read error: Connection reset by peer)
2019-01-25 15:32:33	-->	Gurkenglas (~Gurkengla@unaffiliated/gurkenglas) has joined #haskell
2019-01-25 15:33:09	fen	% :t build
2019-01-25 15:33:09	yahb	fen: (forall b. (a -> b -> b) -> b -> b) -> [a]
2019-01-25 15:33:17	<--	ccomb (~ccomb@2a01:e35:8b61:a3b0:c624:b4cf:9b8c:7825) has quit (Quit: Leaving.)
2019-01-25 15:33:20	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 15:33:20	fen	is this the scott encoding for lists?
2019-01-25 15:33:25	-->	sternmull (~kringel@p5481C657.dip0.t-ipconnect.de) has joined #haskell
2019-01-25 15:33:33	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 15:33:36	-->	darithorn_test (~darithorn@75.174.234.76) has joined #haskell
2019-01-25 15:33:41	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-25 15:33:45	<--	ogradyda (~ogradyda@monad.informatik.uni-tuebingen.de) has quit
2019-01-25 15:33:49	fen	reading, https://kseo.github.io/posts/2016-12-13-scott-encoding.html on the "list" section gives a slightly different type
2019-01-25 15:33:58	-->	ltchen (~ltchen@host-92-30-204-54.as13285.net) has joined #haskell
2019-01-25 15:34:37	fen	hmm, scott encoding for foldable instances might be more accurate 
2019-01-25 15:35:13	fen	just wondering if they are compositional, like is there something like (++) ?
2019-01-25 15:35:16	-->	amar (~amar@217.138.122.50) has joined #haskell
2019-01-25 15:35:31	fen	the blog post gives cons, but not sure if this works on arbitrary foldables 
2019-01-25 15:35:40	--	amar is now known as Guest13227
2019-01-25 15:35:59	mniip	"scott encoding for foldable instances"
2019-01-25 15:36:02	mniip	that's not how that works
2019-01-25 15:36:10	mniip	and no, that is the *church* encoding
2019-01-25 15:36:32	-->	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has joined #haskell
2019-01-25 15:36:36	fen	oh no! thats bad? https://ifl2014.github.io/submissions/ifl2014_submission_13.pdf
2019-01-25 15:37:01	fen	mniip: well it needs something which is like foldr
2019-01-25 15:37:03	fen	:t foldr
2019-01-25 15:37:05	lambdabot	Foldable t => (a -> b -> b) -> b -> t a -> b
2019-01-25 15:37:11	-->	darithorn (~darithorn@75.174.234.76) has joined #haskell
2019-01-25 15:37:14	<--	oisdk (~textual@86-45-6-241-dynamic.agg2.dyx.chf-qkr.eircom.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-25 15:37:19	<--	PyroLagus (PyroLagus@i.have.ipv6.on.coding4coffee.org) has quit (Ping timeout: 252 seconds)
2019-01-25 15:37:37	-->	mico_ (~textual@bl12-225-167.dsl.telepac.pt) has joined #haskell
2019-01-25 15:37:40	merijn	fen: Church encoding
2019-01-25 15:37:49	fen	:t flip foldr
2019-01-25 15:37:51	lambdabot	Foldable t => b -> (a -> b -> b) -> t a -> b
2019-01-25 15:37:58	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 245 seconds)
2019-01-25 15:38:20	dmwit	Just for clarity: the first argument is the Church encoding.
2019-01-25 15:38:24	<--	darithorn_test (~darithorn@75.174.234.76) has quit (Remote host closed the connection)
2019-01-25 15:38:30	dmwit	The whole thing is not an encoding of lists at all.
2019-01-25 15:38:51	<--	nullremains (~nullremai@49.230.85.110) has quit (Ping timeout: 272 seconds)
2019-01-25 15:38:51	mniip	build is the inverse of foldr
2019-01-25 15:38:57	-->	crobbins (~crobbins@2601:2c7:780:416e:1d32:59b9:89f0:aa06) has joined #haskell
2019-01-25 15:39:03	fen	:t (\xs cons basecase -> foldr cons basecase xs )
2019-01-25 15:39:04	dmwit	(The thing taken as a whole is an encoding transformer, from Church encoding to the builtin encoding.)
2019-01-25 15:39:04	lambdabot	Foldable t => t a -> (a -> b -> b) -> b -> b
2019-01-25 15:39:09	fen	:t build
2019-01-25 15:39:11	lambdabot	error:
2019-01-25 15:39:11	lambdabot	    • Variable not in scope: build
2019-01-25 15:39:11	lambdabot	    • Perhaps you meant ‘buildG’ (imported from Data.Graph)
2019-01-25 15:39:14	fen	% :t build
2019-01-25 15:39:14	yahb	fen: (forall b. (a -> b -> b) -> b -> b) -> [a]
2019-01-25 15:39:32	fen	so build is like that rearangenemt of foldr partially applied to a foldable
2019-01-25 15:39:38	<--	Guest13227 (~amar@217.138.122.50) has quit (Ping timeout: 245 seconds)
2019-01-25 15:39:42	-->	PyroLagus (PyroLagus@i.have.ipv6.on.coding4coffee.org) has joined #haskell
2019-01-25 15:40:07	<--	yqt (~yqt@81.88.230.28) has quit (Ping timeout: 240 seconds)
2019-01-25 15:40:19	fen	no, it takes something of the same type as foldr partially applied to a foldable container as its first argument
2019-01-25 15:40:58	fen	that is "of church encoding" type
2019-01-25 15:41:00	ski	@type flip (flip . foldr)
2019-01-25 15:41:02	lambdabot	Foldable t => t a -> (a -> c -> c) -> c -> c
2019-01-25 15:41:26	fen	so it should be compositional right?
2019-01-25 15:41:37	fen	like, because list is, and foldable things are iso to lists
2019-01-25 15:41:37	-->	knupfer (~Thunderbi@200116b82cca3100f69634fffef0b45f.dip.versatel-1u1.de) has joined #haskell
2019-01-25 15:41:53	fen	:t (++)
2019-01-25 15:41:55	lambdabot	[a] -> [a] -> [a]
2019-01-25 15:41:56	fen	:t (:)
2019-01-25 15:41:57	lambdabot	a -> [a] -> [a]
2019-01-25 15:42:02	<--	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has quit (Ping timeout: 268 seconds)
2019-01-25 15:42:07	ski	@type GHC.Exts.build
2019-01-25 15:42:09	lambdabot	(forall b. (a -> b -> b) -> b -> b) -> [a]
2019-01-25 15:42:16	fen	it wants to refold to implement (++) in terms of (:)
2019-01-25 15:42:32	fen	but over these church encodings
2019-01-25 15:42:51	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 15:42:56	<--	Ariakenom (~Ariakenom@h-208-40.A163.corp.bahnhof.se) has quit (Ping timeout: 240 seconds)
2019-01-25 15:43:04	fen	compose :: (forall b. (a -> b -> b) -> b -> b)  -> (forall b. (a -> b -> b) -> b -> b)  -> (forall b. (a -> b -> b) -> b -> b) 
2019-01-25 15:43:05	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 15:43:06	fen	right?
2019-01-25 15:43:18	fen	and as there is a basecase, its a monoid?
2019-01-25 15:43:33	-->	dbmikus (~dbmikus@172.93.11.58) has joined #haskell
2019-01-25 15:44:02	fen	not all church encodings, just those of things with get and set, like Int with pred, succ
2019-01-25 15:44:09	fen	(Int is like [()])
2019-01-25 15:44:30	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 268 seconds)
2019-01-25 15:45:06	fen	its a ring? as it has additive untiy (generator) (multiplicative identity)
2019-01-25 15:45:15	fen	with inverse... 
2019-01-25 15:45:28	ski	@where free-monoids
2019-01-25 15:45:28	lambdabot	I know nothing about free-monoids.
2019-01-25 15:45:32	ski	@where+ free-monoids "Free Monoids in Haskell" by Dan Doel in 2015-02-21 at <http://comonad.com/reader/2015/free-monoids-in-haskell/>
2019-01-25 15:45:32	lambdabot	I will never forget.
2019-01-25 15:46:24	fen	but it has inverse of mappend
2019-01-25 15:46:37	ski	(that's for fen)
2019-01-25 15:46:37	fen	at least, for 1 anyway...
2019-01-25 15:46:46	fen	thanks ski
2019-01-25 15:47:03	fen	just confused about how to write (++) for church encoded lists
2019-01-25 15:47:34	fen	and also about what to call this thing, as its more general than church encoded lists
2019-01-25 15:47:44	<--	mico_ (~textual@bl12-225-167.dsl.telepac.pt) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-01-25 15:48:03	-->	twopoint718 (~cjw@173.229.8.61) has joined #haskell
2019-01-25 15:48:03	<--	twopoint718 (~cjw@173.229.8.61) has quit (Changing host)
2019-01-25 15:48:03	-->	twopoint718 (~cjw@fsf/member/twopoint718) has joined #haskell
2019-01-25 15:48:31	-->	michaelsdunn1 (~michaelsd@unaffiliated/michaelsdunn1) has joined #haskell
2019-01-25 15:48:35	ski	fen : next thing you know, you'll write `zipWith' for church
2019-01-25 15:49:25	-->	fen_ (518372ac@gateway/web/freenode/ip.81.131.114.172) has joined #haskell
2019-01-25 15:50:11	fen_	its a group?
2019-01-25 15:50:44	fen_	it cant be as its not cloded under repeat tail
2019-01-25 15:50:52	fen_	:t iterate tail
2019-01-25 15:50:54	lambdabot	[a] -> [[a]]
2019-01-25 15:51:37	-->	keepLearning512 (~keepLearn@106.51.72.155) has joined #haskell
2019-01-25 15:51:40	fen_	just going to call them foldable containers for now
2019-01-25 15:52:03	fen_	mniip: it might be helpful if you can tell why thats not correct...
2019-01-25 15:52:13	<--	fen (518372ac@gateway/web/freenode/ip.81.131.114.172) has quit (Ping timeout: 256 seconds)
2019-01-25 15:52:30	-->	patrl (~patrl@unaffiliated/patrl) has joined #haskell
2019-01-25 15:54:00	-->	jbayardo (~jbayardo@2601:602:9802:93d6:1def:5762:3ec:6d51) has joined #haskell
2019-01-25 15:54:32	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-25 15:54:47	<--	jbayardo (~jbayardo@2601:602:9802:93d6:1def:5762:3ec:6d51) has quit (Client Quit)
2019-01-25 15:56:18	fen_	maybe the real question is what things when scott encoded are compositional like list
2019-01-25 15:56:18	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 15:57:20	<--	raichoo (~raichoo@office02.saltation.de) has quit (Remote host closed the connection)
2019-01-25 15:57:22	fen_	it seems like by deferring the specification of the (:) of build, that they dont even need to be get/set instances, just reqiering a foldr function...
2019-01-25 15:58:11	fen_	ski: not sure what lists not being free monoids has got to do with anything
2019-01-25 15:58:51	-->	pera (~pera@unaffiliated/pera) has joined #haskell
2019-01-25 15:59:13	ski	"foldable things are iso to lists"
2019-01-25 15:59:18	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 268 seconds)
2019-01-25 16:02:09	-->	bodisiw (~bodiskw@cpe-74-134-64-95.kya.res.rr.com) has joined #haskell
2019-01-25 16:02:18	fen_	ah
2019-01-25 16:02:18	<--	jhaj (~jhaj@2620:0:e50:1401:2ca1:395c:5680:c7e) has quit (Ping timeout: 268 seconds)
2019-01-25 16:02:41	-->	bbrodriguez (~Bender_Be@200.57.253.173) has joined #haskell
2019-01-25 16:03:14	fen_	well that just means list is defiantly not what the encoding is of
2019-01-25 16:03:19	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 16:03:36	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 16:03:38	<--	osa1 (~omer@haskell/developer/osa1) has quit (Remote host closed the connection)
2019-01-25 16:03:42	fen_	thought the toList function can be used to cast the foldable thing into a list 
2019-01-25 16:04:00	fen_	but the idea is that it should be independent of the actual container
2019-01-25 16:04:10	fen_	like, thats the point of encoding it in the first place
2019-01-25 16:04:38	fen_	while encoded, its not sure what it is until eg build supplies the (:) and []
2019-01-25 16:04:58	fen_	so its not like its "an encoded list" its more like an encoded foldable thing
2019-01-25 16:05:10	fen_	but thats not clear from the types
2019-01-25 16:05:31	fen_	so there must be some extra information, which seems to be that it is compositional
2019-01-25 16:05:50	fen_	i.e. those encodings which form monoid 
2019-01-25 16:06:08	fen_	which then contains e.g. encoded lists
2019-01-25 16:06:28	fen_	and seems to be that foldable captures all possible instances with this property
2019-01-25 16:06:36	fen_	guess thats what we are trying to show
2019-01-25 16:07:51	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-25 16:08:07	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 16:08:24	-->	cpup (~cpup@24-151-32-148.dhcp.nwtn.ct.charter.com) has joined #haskell
2019-01-25 16:09:40	-->	nan` (~nan`@cpe-75-86-97-30.wi.res.rr.com) has joined #haskell
2019-01-25 16:09:57	-->	o1lo01ol1o (~o1lo01ol1@207.251.80.226) has joined #haskell
2019-01-25 16:10:04	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 246 seconds)
2019-01-25 16:10:07	 *	hackage aeson-value-parser 0.14.1 - An API for parsing "aeson" JSON tree into Haskell types  https://hackage.haskell.org/package/aeson-value-parser-0.14.1 (NikitaVolkov)
2019-01-25 16:10:24	-->	__bo (~Bo@195.39.233.28) has joined #haskell
2019-01-25 16:12:37	-->	novum (~novumsens@unaffiliated/novumsensum) has joined #haskell
2019-01-25 16:13:20	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 16:13:23	<--	_bo (~Bo@195.39.233.28) has quit (Ping timeout: 245 seconds)
2019-01-25 16:13:34	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 16:14:08	-->	aplainzetakind (~dk@05269776.dsl.pool.telekom.hu) has joined #haskell
2019-01-25 16:14:26	<--	nan` (~nan`@cpe-75-86-97-30.wi.res.rr.com) has quit (Ping timeout: 240 seconds)
2019-01-25 16:14:42	<--	oish (~charlie@host81-130-206-144.in-addr.btopenworld.com) has quit (Read error: Connection reset by peer)
2019-01-25 16:14:49	<--	kish\ (~oracle@unaffiliated/oracle) has quit (Quit: Leaving)
2019-01-25 16:15:42	<--	thunderrd (~thunderrd@159.192.198.202) has quit (Remote host closed the connection)
2019-01-25 16:15:59	-->	Muttsuri (~muttsuri@a95-94-222-57.cpe.netcabo.pt) has joined #haskell
2019-01-25 16:17:03	-->	lambdaman (~lambdaman@con08-vpn.calabrio.com) has joined #haskell
2019-01-25 16:17:35	<--	eschnett_ (~eschnett@66.97.27.10) has quit (Quit: eschnett_)
2019-01-25 16:17:38	-->	oisdk (~textual@2001:bb6:331c:dc58:7801:f862:7ff7:7767) has joined #haskell
2019-01-25 16:17:51	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-25 16:18:05	-->	marvin2 (~marvin@cpe-188-129-94-230.dynamic.amis.hr) has joined #haskell
2019-01-25 16:18:07	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 16:18:52	-->	jeltsch (~wolfgang@9b0c-573f-2dc9-c937-3e80-82b2-07d0-2001.dyn.estpak.ee) has joined #haskell
2019-01-25 16:18:56	<--	antsmartian (~antsmarti@171.60.232.18) has quit (Remote host closed the connection)
2019-01-25 16:19:11	dminuoso	fen_: Here's a way to think about the church encoding:
2019-01-25 16:20:05	<--	toovs (~toovs@c-98-238-150-172.hsd1.ca.comcast.net) has quit (Quit: WeeChat 2.3)
2019-01-25 16:20:47	dminuoso	https://wiki.haskell.org/wikiupload/3/3e/Right-fold-transformation.png
2019-01-25 16:21:20	-->	toovs (~toovs@c-98-238-150-172.hsd1.ca.comcast.net) has joined #haskell
2019-01-25 16:21:46	<--	toovs (~toovs@c-98-238-150-172.hsd1.ca.comcast.net) has quit (Client Quit)
2019-01-25 16:22:07	 *	hackage cgi 3001.4.0.0 - A library for writing CGI programs  https://hackage.haskell.org/package/cgi-3001.4.0.0 (PeterSimons)
2019-01-25 16:23:10	-->	toovs (~toovs@c-98-238-150-172.hsd1.ca.comcast.net) has joined #haskell
2019-01-25 16:23:18	-->	Big_G (~Big_G@50-46-197-243.evrt.wa.frontiernet.net) has joined #haskell
2019-01-25 16:25:39	-->	megaTherion (~therion@unix.io) has joined #haskell
2019-01-25 16:25:40	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 16:26:31	<--	zar (~zar@fw1.ciirc.cvut.cz) has quit (Ping timeout: 246 seconds)
2019-01-25 16:27:08	<--	Sk01 (~sky3@d131.wls.metu.edu.tr) has quit (Ping timeout: 245 seconds)
2019-01-25 16:27:56	-->	oish (~charlie@host81-130-206-144.in-addr.btopenworld.com) has joined #haskell
2019-01-25 16:28:47	__bo	I've been watching this video https://youtu.be/ZhuHCtR3xq8 and when Brian got to monoids all I could think of was 'Are monoids basically a partially applied functions?'
2019-01-25 16:29:30	dminuoso	__bo: That sounds... wrong.
2019-01-25 16:29:37	c_wraith	__bo, no.
2019-01-25 16:29:44	dminuoso	__bo: A monoid is just a 3-tuple.
2019-01-25 16:30:01	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-25 16:30:02	__bo	Brain_explode.jpg
2019-01-25 16:30:07	-->	gienah_ (~mwright@gentoo/developer/gienah) has joined #haskell
2019-01-25 16:30:13	c_wraith	monoids are data types that support being combined associatively and have a neutral element.
2019-01-25 16:30:22	dminuoso	__bo: In simple terms, a Monoid is just the *set* of `mempty` and `mappend` (plus laws)
2019-01-25 16:30:25	dminuoso	__bo: So you could say that
2019-01-25 16:30:30	dminuoso	:t (mappend, mempty)
2019-01-25 16:30:31	c_wraith	I mean, that's just the definition, so it probably isn't useful
2019-01-25 16:30:32	lambdabot	(Monoid b, Monoid a) => (a -> a -> a, b)
2019-01-25 16:30:44	dminuoso	Uhh, that's not right wait
2019-01-25 16:31:13	dminuoso	__bo: Anyway. Monoid is just an interface that generalizes "smashing together in a meaningful way"
2019-01-25 16:31:19	__bo	Hang on, I'm scrolling through the video to get to the exact point where I got this idea
2019-01-25 16:31:58	-->	kish` (~oracle@unaffiliated/oracle) has joined #haskell
2019-01-25 16:32:06	-->	carlomagno (~carlomagn@inet-hqmc05-o.oracle.com) has joined #haskell
2019-01-25 16:32:08	dminuoso	__bo: For example: (1 + 3 + 4), (10 * 2 * 4), ("foo" ++ "bar" ++ "quux"), ((10 `min` 3) `min` 1)
2019-01-25 16:32:49	<--	carlomagno1 (~carlomagn@inet-hqmc05-o.oracle.com) has quit (Ping timeout: 246 seconds)
2019-01-25 16:33:08	<--	gienah (~mwright@gentoo/developer/gienah) has quit (Ping timeout: 250 seconds)
2019-01-25 16:33:11	dminuoso	__bo: They are all somehow similar, and they are all associative, and they all have an identity (0 for sum, 1 for product, "" for string concatenation, and.. the last one is bad because you dont have an identity so it fails.
2019-01-25 16:33:23	__bo	14:25, can someone watch one minute from that point? Isn't what he explains is partially applied function?
2019-01-25 16:34:19	-->	Saukk (~Saukk@2001:99a:0:e640:40bd:b2f9:7a0f:dfca) has joined #haskell
2019-01-25 16:34:19	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 244 seconds)
2019-01-25 16:34:47	<--	niklasl (~niklasl@c83-253-14-109.bredband.comhem.se) has quit (Quit: Nettalk6 - www.ntalk.de)
2019-01-25 16:35:05	-->	jao (~jao@pdpc/supporter/professional/jao) has joined #haskell
2019-01-25 16:35:09	-->	raichoo (~raichoo@213.240.178.58) has joined #haskell
2019-01-25 16:36:42	bodisiw	dminuoso, can Infinity be the identity for min?
2019-01-25 16:37:13	c_wraith	only for types with an Infinity
2019-01-25 16:37:36	c_wraith	so for Double or Float, sure. but there is no largest Integer
2019-01-25 16:37:42	bodisiw	(10 `min` (1/0))
2019-01-25 16:37:49	bodisiw	i don't really know what i'm doing though
2019-01-25 16:37:59	<--	atbd (~atbd@lmontsouris-659-1-30-246.w81-250.abo.wanadoo.fr) has quit (Quit: leaving)
2019-01-25 16:38:01	bodisiw	i guess that's Fractional
2019-01-25 16:38:13	Taneb	Nope, would fail for Rational
2019-01-25 16:38:17	Taneb	> 1/0 :: Rational
2019-01-25 16:38:19	lambdabot	 *Exception: Ratio has zero denominator
2019-01-25 16:38:27	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 244 seconds)
2019-01-25 16:39:06	Taneb	There's not really a "Has Infinity" typeclass
2019-01-25 16:39:18	c_wraith	it's better to treat Min and Max as semigroups, though.
2019-01-25 16:39:27	c_wraith	then you don't need an identity
2019-01-25 16:39:59	__bo	dminuoso, I understand the 'smashing together' idea, but 'having an identity' lost me. Anyway, monoids and partially applied functions are different things, got it, thanks!
2019-01-25 16:40:43	-->	inkbottle (~inkbottle@154.126.64.179) has joined #haskell
2019-01-25 16:40:59	Solonarv	> maxBound :: Double
2019-01-25 16:41:01	lambdabot	 error:
2019-01-25 16:41:01	lambdabot	     • No instance for (Bounded Double) arising from a use of ‘maxBound’
2019-01-25 16:41:01	lambdabot	     • In the expression: maxBound :: Double
2019-01-25 16:41:07	Solonarv	Hm.
2019-01-25 16:41:26	-->	antsmartian (~antsmarti@171.60.232.18) has joined #haskell
2019-01-25 16:41:28	Lears	__bo: The guy is just giving one example of a monoid by showing how to combine two values of type `a -> a` (via composition). The identity is `\x -> x`.
2019-01-25 16:43:08	-->	binq (~binq@99.156.186.141) has joined #haskell
2019-01-25 16:43:13	-->	carlomagno1 (~carlomagn@inet-hqmc05-o.oracle.com) has joined #haskell
2019-01-25 16:43:20	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 16:43:34	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 16:45:23	<--	carlomagno (~carlomagn@inet-hqmc05-o.oracle.com) has quit (Remote host closed the connection)
2019-01-25 16:45:26	<--	inkbottle (~inkbottle@154.126.64.179) has quit (Ping timeout: 240 seconds)
2019-01-25 16:45:30	<--	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has quit (Read error: Connection reset by peer)
2019-01-25 16:45:54	M5hadow_w1n5ton[	yee
2019-01-25 16:46:11	-->	nikivi (~nikivi@nikivi.powered.by.lunarbnc.net) has joined #haskell
2019-01-25 16:47:27	__bo	Lears, but what is monoid at the end of the day? A function?
2019-01-25 16:47:35	-->	Ariakenom (~Ariakenom@h-155-4-222-251.NA.cust.bahnhof.se) has joined #haskell
2019-01-25 16:47:52	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-25 16:48:08	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 16:48:17	<--	DickMcLargeHuge (~Sornaensi@79.142.232.102.static.router4.bolignet.dk) has quit (Quit: KVIrc 4.2.0 Equilibrium http://www.kvirc.net/)
2019-01-25 16:48:21	__bo	Nvm, I'll go read some wikipedia first
2019-01-25 16:48:43	__monty__	__bo: It's a set with an associated operation that adheres to a couple simple laws.
2019-01-25 16:49:06	__monty__	The set of integers with addition for example form a monoid.
2019-01-25 16:49:13	-->	Welkin (~Welkin@047-227-169-219.res.spectrum.com) has joined #haskell
2019-01-25 16:49:18	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 16:49:44	<--	rts-sander (~rts-sande@185.60.252.150) has quit (Quit: winners don't quit)
2019-01-25 16:50:22	<--	twopoint718 (~cjw@fsf/member/twopoint718) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-25 16:51:04	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-25 16:51:46	<--	esp32_prog (~esp32_pro@178.18.54.206) has quit (Ping timeout: 250 seconds)
2019-01-25 16:52:07	-->	wroathe (~wroathe@23-30-253-203-static.hfc.comcastbusiness.net) has joined #haskell
2019-01-25 16:52:53	-->	codesoup (~codesoup@174.119.180.211) has joined #haskell
2019-01-25 16:53:06	-->	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has joined #haskell
2019-01-25 16:53:30	Welkin	is this a reasonable way to resolve this issue? https://bpaste.net/show/65d4a2e399c1
2019-01-25 16:53:45	Welkin	or is GHC just giving bad advice?
2019-01-25 16:53:58	patrl	Lears: "Having an identity" relative to an operation, just means that there's a value a, such that whenever you perform your binary operation on a and b, you always get back b
2019-01-25 16:54:07	 *	hackage forma 1.1.1 - Parse and validate forms in JSON format  https://hackage.haskell.org/package/forma-1.1.1 (mrkkrp)
2019-01-25 16:54:15	patrl	the identity for addition on the set of integers is 0
2019-01-25 16:54:15	Welkin	I've always stayed away from the dubious sounding ghc extensions like "UndeciableInstances" and "Ambiguous*"
2019-01-25 16:54:16	merijn	Welkin: UndecidableInstances is fine
2019-01-25 16:54:25	patrl	since adding 0 to any integer returns that integer
2019-01-25 16:54:43	merijn	Welkin: UndecidableInstances just means "can't guarantee this will terminate during compilation" (in practice it will, because GHC has a timeout)
2019-01-25 16:55:03	merijn	Welkin: With UndecidableInstances IFF it compiles, it's fine
2019-01-25 16:55:13	<--	oisdk (~textual@2001:bb6:331c:dc58:7801:f862:7ff7:7767) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-25 16:55:16	patrl	where the identity for multiplication on the set of integers is 1, since multiplying any integer by 1 returns that integer
2019-01-25 16:55:46	Solonarv	AllowAmbiguousTypes is also fine now that we have TypeApplications
2019-01-25 16:55:59	__bo	__monty__, so... Can I say that monoid is a set of objects of some type and some operation? Provided that the function takes objects of this some type and returns something of the same type?
2019-01-25 16:56:10	Lears	patrl: I'm aware, you should direct your line to __bo.
2019-01-25 16:56:19	patrl	__bo: whoop sorry
2019-01-25 16:56:23	merijn	Solonarv: I disagree, since now you've made something that almost no one considers part of the public interface to be part of the public interface
2019-01-25 16:56:29	patrl	Lears: yeh I just noticed!!! sorry
2019-01-25 16:56:35	Welkin	any idea why I would get this error when using this library in my application, but building the library by itself gives no such error?
2019-01-25 16:56:44	patrl	__bo: see my messages above about "having an identity" ^^^
2019-01-25 16:56:51	__bo	patrl, thanks, reading them now
2019-01-25 16:56:55	Welkin	is there some kind of interaction between different extensions that could cause this?
2019-01-25 16:56:56	merijn	Welkin: It's basically saying it can't prove the instance resolution terminates
2019-01-25 16:57:01	Solonarv	alright, s/is/can be/
2019-01-25 16:57:16	merijn	Welkin: It might just be that the library doesn't use a problematic instance lookup internally
2019-01-25 16:57:18	__monty__	__bo: Oh, yeah, forgot about mempty/identity, was mixing up monoid with semigroup I think.
2019-01-25 16:57:41	-->	oisdk (~textual@86-45-6-241-dynamic.agg2.dyx.chf-qkr.eircom.net) has joined #haskell
2019-01-25 16:57:58	<--	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has quit (Ping timeout: 245 seconds)
2019-01-25 16:57:59	<--	kritzefitz (~kritzefit@2003:5b:203b:100:6e0b:84ff:feb4:9eaf) has quit (Remote host closed the connection)
2019-01-25 16:58:03	merijn	Welkin: The default instance resolution mechanism is very constrained, but is guaranteed to terminate. UndecidableInstances uses a more flexible instance resolution algorithm, but that makes it impossible to guarantee termination
2019-01-25 16:58:19	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 16:58:36	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 16:59:21	<--	carlomagno1 (~carlomagn@inet-hqmc05-o.oracle.com) has quit (Remote host closed the connection)
2019-01-25 16:59:25	-->	carlomagno (~carlomagn@inet-hqmc05-o.oracle.com) has joined #haskell
2019-01-25 16:59:30	__monty__	__bo: And yes, your interpretation is reasonable. Set would concretely be all values of a certain type in haskell. The only thing you're sweeping under the rug is the laws, which are the most important part.
2019-01-25 16:59:48	__bo	patrl, I see... So if I have a function that, say, searches for substrings in string, the empty string will be it's identity?
2019-01-25 16:59:55	-->	doomslayer (d07a65ee@gateway/web/cgi-irc/kiwiirc.com/ip.208.122.101.238) has joined #haskell
2019-01-25 16:59:58	patrl	__bo: that's exactly right
2019-01-25 17:00:04	<--	bodisiw (~bodiskw@cpe-74-134-64-95.kya.res.rr.com) has quit (Quit: This computer has gone to sleep)
2019-01-25 17:00:11	__bo	__monty__, I'm trying to take it once at a time
2019-01-25 17:00:25	patrl	__bo: oh, uh hang on, the substring function...
2019-01-25 17:00:41	patrl	__bo: it's not a binary function, so not an example of a monoid
2019-01-25 17:01:14	patrl	__bo: the empty string is the identity for the string concatenation monoid
2019-01-25 17:01:19	patrl	__bo: for example
2019-01-25 17:01:19	-->	bodisiw (~bodiskw@cpe-74-134-64-95.kya.res.rr.com) has joined #haskell
2019-01-25 17:01:29	fen_	dmniuoso: yeah, its just like replacing the cons with f in fold but backwards right?
2019-01-25 17:01:43	__bo	patrl, oh, I see, indeed
2019-01-25 17:01:46	-->	amar (~amar@217.138.122.53) has joined #haskell
2019-01-25 17:01:48	__monty__	patrl: substring :: String -> String -> String seems like a binary operation to me.
2019-01-25 17:01:57	__monty__	Oh, right.
2019-01-25 17:01:58	<--	nocm (~chatzilla@178.141.224.208) has quit (Remote host closed the connection)
2019-01-25 17:02:10	--	amar is now known as Guest84333
2019-01-25 17:02:13	__monty__	String -> String -> Bool
2019-01-25 17:02:27	-->	ym555 (~ym@156.199.213.34) has joined #haskell
2019-01-25 17:02:29	<--	kuribas (~user@ip-188-118-57-242.reverse.destiny.be) has quit (Remote host closed the connection)
2019-01-25 17:02:34	__bo	Thank you gentlemen! Once again I leave this chat with more questions than I had when I came in :D
2019-01-25 17:02:50	fen_	probably the mappend is easy to see somehow
2019-01-25 17:02:51	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-25 17:02:56	-->	esp32_prog (~esp32_pro@178.18.54.206) has joined #haskell
2019-01-25 17:03:04	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 17:03:36	-->	comerijn (~merijn@145.100.116.162) has joined #haskell
2019-01-25 17:03:38	fen_	but yeah, its via folding with cons, and the cons is abstracted away...
2019-01-25 17:03:38	Ariakenom	A colleague linked this saying "oh that's cool" https://clojuredocs.org/clojure.core/as-%3E
2019-01-25 17:04:02	Ariakenom	which inspired me to this abomination. comments? https://gist.github.com/Ariakenom/42fab6eef945a502f921e0d340e1e897 
2019-01-25 17:04:15	patrl	__bo: so technically, a monoid is a triple consisting of a type a, a binary operation of type a -> a -> a, and a value (the identity) of type a 
2019-01-25 17:04:39	patrl	that obeys certain laws
2019-01-25 17:04:47	--	caa51h_ is now known as caa51h
2019-01-25 17:04:53	-->	hexfive (~hexfive@50-47-134-163.evrt.wa.frontiernet.net) has joined #haskell
2019-01-25 17:04:58	fen_	Ariakenom: its a difference list?
2019-01-25 17:05:05	patrl	so a given type can have multiple monoid instances
2019-01-25 17:05:15	<--	toovs (~toovs@c-98-238-150-172.hsd1.ca.comcast.net) has quit (Ping timeout: 246 seconds)
2019-01-25 17:05:20	fen_	no it cant
2019-01-25 17:05:27	fen_	the laws prevent that surely 
2019-01-25 17:05:33	fen_	or is that monads...
2019-01-25 17:05:41	__bo	patrl, that's what dminuoso said at the very beginning, but now I understand it :) 
2019-01-25 17:05:53	<--	Guest84333 (~amar@217.138.122.53) has quit (Ping timeout: 245 seconds)
2019-01-25 17:05:54	patrl	Int is a good example
2019-01-25 17:05:54	<--	merijn (~merijn@145.100.116.5) has quit (Ping timeout: 268 seconds)
2019-01-25 17:06:13	fen_	oh because its a ring?
2019-01-25 17:06:14	patrl	Both (Int, (+), 0) and (Int, (*), 1) are monoids
2019-01-25 17:06:16	Ariakenom	fen_: no
2019-01-25 17:06:24	-->	xenon- (~bc815ee6@h27.47.138.40.static.ip.windstream.net) has joined #haskell
2019-01-25 17:06:31	patrl	but (Int, (*), 0) isn't a monoid
2019-01-25 17:07:08	patrl	for technical reasons, each type in haskell actually has a unique monoid instance, but the choice is arbitrary, and additional instances are encoded using newtype wrappers
2019-01-25 17:07:10	__bo	patrl, But is it an actual tripple? As a structure in Haskell? Or do we just call this abstract collective entity a tripple to aid understanding?
2019-01-25 17:07:33	<--	esp32_prog (~esp32_pro@178.18.54.206) has quit (Ping timeout: 245 seconds)
2019-01-25 17:07:44	patrl	__bo: yeah, it's not actually implemented in haskell as a triple, as in the data structure
2019-01-25 17:07:48	Solonarv	it's a triple in the abstract sense ("three things")
2019-01-25 17:08:07	__monty__	__bo: Yeah, integers with addition are a monoid and integers with multiplication are a monoid too. Problem is type class resolution can't be ambiguous. So in haskell you're only allowed one.
2019-01-25 17:08:33	__monty__	I'll stop repeating what others already said now -.-
2019-01-25 17:08:33	Solonarv	To avoid ambiguity, integers in Haskell don't actually have a Monoid instance
2019-01-25 17:08:39	Solonarv	> mempty :: Integer
2019-01-25 17:08:41	lambdabot	 error:
2019-01-25 17:08:41	lambdabot	     • No instance for (Monoid Integer) arising from a use of ‘mempty’
2019-01-25 17:08:41	lambdabot	     • In the expression: mempty :: Integer
2019-01-25 17:08:45	<--	tureba (~tureba@tureba.org) has quit (Quit: leaving)
2019-01-25 17:08:47	__bo	I see, it's a (type, function, instance) that follows a bunch of rules
2019-01-25 17:09:12	__bo	Each of which follows a bunch of rules*
2019-01-25 17:09:12	xenon-	why was ambiguity avoided there, but wasn't for, say, lists?
2019-01-25 17:09:17	fen_	well its type is the first entry of this tripple, and thats a parameter to the class defining which they the instance is implemented for, and the other two values are the class defining functions, so this tripple resembles a haskell class really, except the classes can have more or less than 2 defining functions
2019-01-25 17:09:45	Solonarv	because for lists, one of the monoids is more obvious than the others
2019-01-25 17:10:02	<--	comerijn (~merijn@145.100.116.162) has quit (Ping timeout: 272 seconds)
2019-01-25 17:10:19	__monty__	__bo: That's not a great way to look at it imo. It's more (Type, Monoid instance for Type) and the Monoid instance defines (function, identity) as mappend and mempty respectively.
2019-01-25 17:10:23	xenon-	I was talking about Applicative list instance
2019-01-25 17:10:30	<--	nicoulaj (~nicoulaj@nicoulaj.net) has quit (Read error: Connection reset by peer)
2019-01-25 17:10:40	-->	nicoulaj (~nicoulaj@nicoulaj.net) has joined #haskell
2019-01-25 17:10:45	-->	jbayardo (~jbayardo@2601:602:9802:93d6:e429:3c0c:a60b:9d15) has joined #haskell
2019-01-25 17:10:59	<--	cynapse (~chris@185.217.69.133) has quit (Remote host closed the connection)
2019-01-25 17:11:02	Solonarv	ah - the 'Applicative []' instance in base is compatible with the 'Monad []' instance
2019-01-25 17:11:06	Solonarv	the zippy one isn't
2019-01-25 17:11:30	-->	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has joined #haskell
2019-01-25 17:11:52	patrl	Solonarv: there is actually a zippy monoid corresponding to ziplist
2019-01-25 17:11:55	<--	antsmartian (~antsmarti@171.60.232.18) has quit (Remote host closed the connection)
2019-01-25 17:12:00	patrl	but it's not in base for whatever reason
2019-01-25 17:12:29	Solonarv	patrl: is it 'mempty = repeat mempty; (<>) = zipWith (<>)' ?
2019-01-25 17:12:34	<--	novum (~novumsens@unaffiliated/novumsensum) has quit (Ping timeout: 250 seconds)
2019-01-25 17:12:42	patrl	it seems totally conceivable that the prelude devs could have given Int a default monoid instance, and wrapped the other in a newtype wrapper
2019-01-25 17:12:43	<--	pdgwien (~pdg@static.209.30.9.176.clients.your-server.de) has quit (Quit: ZNC 1.8.0 - http://znc.in)
2019-01-25 17:12:49	__monty__	Solonarv: Didn't consider it in detail, I guess that's why there's both Sum *and* Product.
2019-01-25 17:12:53	patrl	this is all a distraction from the underlying concept
2019-01-25 17:12:58	__bo	__monty__, so it's (Type, (function, identity)) where (function, identity) form a Monoid instance for the Type provided?
2019-01-25 17:13:06	fen_	class ? f where ? :: (forall b. (a -> b -> b) -> b -> b) -> (forall b. (a -> b -> b) -> b -> b) -> (forall b. (a -> b -> b) -> b -> b)
2019-01-25 17:13:26	__bo	__monty__, I'm basically just rewriting what you said in my own manner to confirm that I understood your point
2019-01-25 17:13:33	<--	jbayardo (~jbayardo@2601:602:9802:93d6:e429:3c0c:a60b:9d15) has quit (Client Quit)
2019-01-25 17:13:45	fen_	or maybe, data Church a = Church (forall b. (a -> b -> b) -> b -> b), instance Monoid Church where ....
2019-01-25 17:13:46	-->	pdgwien (~pdg@static.209.30.9.176.clients.your-server.de) has joined #haskell
2019-01-25 17:13:49	-->	jbayardo (~jbayardo@2601:602:9802:93d6:e429:3c0c:a60b:9d15) has joined #haskell
2019-01-25 17:13:55	__monty__	__bo: You're kinda mixing things up. In mathematics you'd say (Set, op, unit), in haskell you say (Type, Monoid instance).
2019-01-25 17:14:00	fen_	where can this be found?
2019-01-25 17:14:12	xenon-	Solonarv, are you saying Monads couldn't have zippy instance as well?
2019-01-25 17:14:45	-->	samurdha_ (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has joined #haskell
2019-01-25 17:14:53	fen_	there was a bunch of work on dependant haskell for reifying local instances
2019-01-25 17:15:02	patrl	Solonarv: I *think* this is right
2019-01-25 17:15:14	Solonarv	I'm saying there isn't a "zippy" monad instance for lists, and there is a law that relates Monad and Applicative
2019-01-25 17:15:15	patrl	Solonarv: ignoring the newtype boilerplate
2019-01-25 17:15:19	fen_	for when more than one obvious choice exists and there is need to switch between them
2019-01-25 17:15:24	xenon-	for the record, I'm not arguing for zippy instance, just that the fact that there couldn't be two instances, doesn't mean that neither should be picked
2019-01-25 17:15:27	-->	antsmartian (~antsmarti@171.60.232.18) has joined #haskell
2019-01-25 17:15:39	<--	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has quit (Ping timeout: 244 seconds)
2019-01-25 17:15:49	Solonarv	patrl: (Ap ZipList a) is what you're looking for
2019-01-25 17:15:58	-->	pdgwien- (~pdg@static.209.30.9.176.clients.your-server.de) has joined #haskell
2019-01-25 17:16:00	fen_	its actually a really powerful pattern, allowing the class functions to be used to define another function, but alowing these class defining function to be overridden at runtime
2019-01-25 17:16:03	__bo	__monty__, thank you sir
2019-01-25 17:16:04	Solonarv	Ap is from Data.Monoid, and I forget where ZipList is defined
2019-01-25 17:16:07	xenon-	Solonarv, that just shifts the question from "Why isn't Applicative list instance zippy" to "Why isn't Monad list instance zippy?"
2019-01-25 17:16:19	<--	cantstanya (~chatting@gateway/tor-sasl/cantstanya) has quit (Remote host closed the connection)
2019-01-25 17:16:19	patrl	Solonarv: aha, thanks!
2019-01-25 17:16:24	Solonarv	xenon-: because it can't be zippy and still be law-abiding
2019-01-25 17:16:26	<--	__bo (~Bo@195.39.233.28) has quit (Read error: Connection reset by peer)
2019-01-25 17:16:32	<--	doomslayer (d07a65ee@gateway/web/cgi-irc/kiwiirc.com/ip.208.122.101.238) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2019-01-25 17:16:33	Solonarv	I don't have a detailed proof ready, sorry
2019-01-25 17:16:36	<--	jbayardo (~jbayardo@2601:602:9802:93d6:e429:3c0c:a60b:9d15) has quit (Client Quit)
2019-01-25 17:16:47	<--	asheshambasta (~user@217.111.215.151) has quit (Remote host closed the connection)
2019-01-25 17:16:48	xenon-	I don't see how that is the cases
2019-01-25 17:16:54	-->	jbayardo (~jbayardo@2601:602:9802:93d6:e429:3c0c:a60b:9d15) has joined #haskell
2019-01-25 17:16:54	Solonarv	patrl: Ap is the newtype wrapper for "lift through an applicative"
2019-01-25 17:17:07	Solonarv	xenon-: what would a zippy monad instance look like? try defining it!
2019-01-25 17:18:00	-->	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has joined #haskell
2019-01-25 17:18:12	<--	pdgwien (~pdg@static.209.30.9.176.clients.your-server.de) has quit (Ping timeout: 246 seconds)
2019-01-25 17:18:25	fen_	if you cant answer your own question your not qualified to ask it!
2019-01-25 17:18:38	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 250 seconds)
2019-01-25 17:18:56	<--	samurdha_ (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has quit (Ping timeout: 240 seconds)
2019-01-25 17:19:06	-->	cantstanya (~chatting@gateway/tor-sasl/cantstanya) has joined #haskell
2019-01-25 17:19:07	-->	toovs (~toovs@c-98-238-150-172.hsd1.ca.comcast.net) has joined #haskell
2019-01-25 17:19:58	<--	patrl (~patrl@unaffiliated/patrl) has quit (Quit: WeeChat 2.3)
2019-01-25 17:20:09	fen_	whats the mempty instance for church encoded foldable containers?
2019-01-25 17:20:18	fen_	or scott encoding, not sure
2019-01-25 17:20:19	-->	doomslayer (d07a65ee@gateway/web/cgi-irc/kiwiirc.com/ip.208.122.101.238) has joined #haskell
2019-01-25 17:20:49	<--	HarveyPwca (~HarveyPwc@ip-64-134-172-208.public.wayport.net) has quit (Quit: Leaving)
2019-01-25 17:21:00	Solonarv	fen_: Church (\_ z -> z) using the definition you posted above
2019-01-25 17:21:06	-->	HarveyPwca (~HarveyPwc@ip-64-134-172-208.public.wayport.net) has joined #haskell
2019-01-25 17:21:23	fen_	that is forgetful?
2019-01-25 17:22:01	fen_	if there were 2 church/scott encoded lists, would the mappend of the encoding be the encoding of the mappend?
2019-01-25 17:22:37	Solonarv	well, I don't know what your mappend definition is
2019-01-25 17:22:49	-->	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has joined #haskell
2019-01-25 17:22:54	Solonarv	what I gave certainly denotes the empty list
2019-01-25 17:22:55	fen_	for list!?
2019-01-25 17:23:14	fen_	> "hello" ++ "world"
2019-01-25 17:23:17	lambdabot	 "helloworld"
2019-01-25 17:23:25	fen_	its fold with cons
2019-01-25 17:23:47	fen_	with the basecase as the snd arg
2019-01-25 17:24:01	fen_	> foldr (:) "world" "hello "
2019-01-25 17:24:04	lambdabot	 "hello world"
2019-01-25 17:24:09	Solonarv	right, what does that look like for your 'Church' type?
2019-01-25 17:24:54	fen_	the first arg to build
2019-01-25 17:25:04	<--	lambdaman (~lambdaman@con08-vpn.calabrio.com) has quit (Remote host closed the connection)
2019-01-25 17:25:18	fen_	so bulding 2 things and (++)ing them, is the same as mappend the 2 encodings
2019-01-25 17:25:25	fen_	> % :t build
2019-01-25 17:25:27	lambdabot	 <hint>:1:1: error: parse error on input ‘%’
2019-01-25 17:25:29	fen_	% :t build
2019-01-25 17:25:29	yahb	fen_: (forall b. (a -> b -> b) -> b -> b) -> [a]
2019-01-25 17:25:44	-->	dpyro (~dpyro@66-169-160-49.dhcp.ftwo.tx.charter.com) has joined #haskell
2019-01-25 17:25:50	-->	lambdaman (~lambdaman@test-vpn.calabrio.com) has joined #haskell
2019-01-25 17:25:58	fen_	build f1 ++ build f2 = build (f1 <> f2)
2019-01-25 17:26:02	<--	earldouglas (~james@unaffiliated/jamestastic) has quit (Quit: leaving)
2019-01-25 17:26:23	-->	earldouglas (~james@unaffiliated/jamestastic) has joined #haskell
2019-01-25 17:26:26	Solonarv	% newtype ListC a = ListC (forall b. (a -> b -> b) -> b -> b)
2019-01-25 17:26:26	yahb	Solonarv: 
2019-01-25 17:26:56	<--	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has quit (Ping timeout: 240 seconds)
2019-01-25 17:27:31	Solonarv	% instance Semigroup (ListC a) where ListC xs <> ListC ys = \k z -> xs k (ys k z)
2019-01-25 17:27:31	yahb	Solonarv: ; <interactive>:54:59: error:; * Couldn't match expected type `ListC a' with actual type `(a -> b0 -> b0) -> b0 -> b0'; * The lambda expression `\ k z -> xs k (ys k z)' has two arguments,; but its type `ListC a' has none; In the expression: \ k z -> xs k (ys k z); In an equation for `<>': ListC xs <> ListC ys = \ k z -> xs k (ys k z); * Relevant bindings include; ys :
2019-01-25 17:27:46	Solonarv	% instance Semigroup (ListC a) where ListC xs <> ListC ys = ListC (\k z -> xs k (ys k z))
2019-01-25 17:27:46	yahb	Solonarv: 
2019-01-25 17:27:49	fen_	guess this is a kind of special kind of monoid that has a unit generator where the mappend is defined in terms of it
2019-01-25 17:28:05	Solonarv	% instance Monoid (ListC a) where mempty = ListC (\_ z -> z)
2019-01-25 17:28:05	yahb	Solonarv: 
2019-01-25 17:28:32	Solonarv	% instance Foldable ListC where foldr f z (ListC xs) = xs f z
2019-01-25 17:28:33	yahb	Solonarv: 
2019-01-25 17:28:33	<--	oish (~charlie@host81-130-206-144.in-addr.btopenworld.com) has quit (Remote host closed the connection)
2019-01-25 17:28:33	-->	tureba (~tureba@tureba.org) has joined #haskell
2019-01-25 17:29:04	Solonarv	% toList (mempty :: ListC ())
2019-01-25 17:29:04	yahb	Solonarv: ; <interactive>:58:1: error:; Ambiguous occurrence `toList'; It could refer to either `Data.Foldable.toList', imported from `Data.Foldable'; or `GHC.Exts.toList', imported from `GHC.Exts'
2019-01-25 17:29:17	Solonarv	% Data.Foldable.toList (mempty :: ListC ())
2019-01-25 17:29:17	yahb	Solonarv: []
2019-01-25 17:29:18	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 17:29:25	Solonarv	fen_: does this help?
2019-01-25 17:29:32	fen_	% hello = ListC (foldr "hello")
2019-01-25 17:29:32	yahb	fen_: ; <interactive>:60:16: error:; * Occurs check: cannot construct the infinite type: b ~ a -> b -> b; Expected type: (a -> b -> b) -> b -> b; Actual type: b -> (a -> a0) -> b; * In the first argument of `ListC', namely `(foldr "hello")'; In the expression: ListC (foldr "hello"); In an equation for `hello': hello = ListC (foldr "hello"); * Relevant bindings include hello
2019-01-25 17:29:52	fen_	% hello = ListC (flip (flip . foldr) "hello")
2019-01-25 17:29:53	yahb	fen_: ; <interactive>:61:1: error:; * Could not deduce (Foldable t0); from the context: (Foldable t, IsString (t a)); bound by the inferred type for `hello':; forall (t :: * -> *) a. (Foldable t, IsString (t a)) => ListC a; at <interactive>:61:1-43; The type variable `t0' is ambiguous; * In the ambiguity check for the inferred type for `hello'; To defe
2019-01-25 17:29:54	Solonarv	% hello = ListC (\f z -> foldr f z "hello")
2019-01-25 17:29:55	yahb	Solonarv: ; <interactive>:62:1: error:; * Could not deduce (Foldable t0); from the context: (Foldable t, IsString (t a)); bound by the inferred type for `hello':; forall (t :: * -> *) a. (Foldable t, IsString (t a)) => ListC a; at <interactive>:62:1-41; The type variable `t0' is ambiguous; * In the ambiguity check for the inferred type for `hello'; To defe
2019-01-25 17:29:56	<--	lambdaman (~lambdaman@test-vpn.calabrio.com) has quit (Ping timeout: 240 seconds)
2019-01-25 17:30:00	Solonarv	gah!
2019-01-25 17:30:32	fen_	not foldable?
2019-01-25 17:30:37	Solonarv	% hello = ListC (\f z -> foldr @[] f z "hello")
2019-01-25 17:30:37	yahb	Solonarv: 
2019-01-25 17:30:38	 *	hackage servant-namedargs 0.1.0.0 - Combinators for servant providing named parameters  https://hackage.haskell.org/package/servant-namedargs-0.1.0.0 (CullinPoresky)
2019-01-25 17:30:43	<--	chele (~chele@2a02:8106:1:f900:faca:b8ff:fe2f:8499) has quit (Remote host closed the connection)
2019-01-25 17:30:54	Solonarv	just OverloadedStrings causing ambiguity
2019-01-25 17:31:05	Solonarv	% Prelude.toList hello
2019-01-25 17:31:05	yahb	Solonarv: ; <interactive>:64:1: error:; Not in scope: `Prelude.toList'; Perhaps you meant one of these: `Prelude.const' (imported from Prelude), `Prelude.showList' (imported from Prelude), data constructor `Prelude.Just' (imported from Prelude); No module named `Prelude' is imported.
2019-01-25 17:31:11	Solonarv	o rly?
2019-01-25 17:31:28	-->	lambdaman (~lambdaman@msp-vpn.calabrio.com) has joined #haskell
2019-01-25 17:31:43	fen_	% toListC xs = ListC (\f z -> foldr @[] f z xs)
2019-01-25 17:31:43	yahb	fen_: 
2019-01-25 17:32:20	Solonarv	% ftoList = Data.Foldable.toList
2019-01-25 17:32:21	yahb	Solonarv: 
2019-01-25 17:32:44	Solonarv	% ftoList hello
2019-01-25 17:32:44	yahb	Solonarv: "hello"
2019-01-25 17:32:50	fen_	% test = foldMap toListC ["hello"," ","world"]
2019-01-25 17:32:51	yahb	fen_: 
2019-01-25 17:33:07	 *	hackage typograffiti 0.1.0.3 - Just let me draw nice text already  https://hackage.haskell.org/package/typograffiti-0.1.0.3 (SchellScivally)
2019-01-25 17:33:13	fen_	% ftoList test
2019-01-25 17:33:13	yahb	fen_: "hello world"
2019-01-25 17:33:16	fen_	woot
2019-01-25 17:33:19	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 17:33:28	fen_	thanks
2019-01-25 17:33:33	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 17:33:34	 *	Solonarv bows
2019-01-25 17:33:47	<--	jchia_ (~jchia@58.32.32.5) has quit (Ping timeout: 240 seconds)
2019-01-25 17:35:25	<--	ubert (~ub@ip5b40e0e2.dynamic.kabel-deutschland.de) has quit (Quit: Leaving)
2019-01-25 17:35:29	fen_	instance Semigroup (ListC a) where ListC xs <> ListC ys = ListC (\k z -> xs k (ys k z))
2019-01-25 17:35:38	-->	niklasl (~niklasl@c83-253-14-109.bredband.comhem.se) has joined #haskell
2019-01-25 17:35:47	<--	nbloomf (~nbloomf@2600:1700:83e0:1f40:6d74:a91e:18fc:6759) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-25 17:35:48	fen_	so that folds over the first list?
2019-01-25 17:35:56	fen_	like the (++) implementation?
2019-01-25 17:36:23	<--	bodisiw (~bodiskw@cpe-74-134-64-95.kya.res.rr.com) has quit (Quit: This computer has gone to sleep)
2019-01-25 17:37:19	-->	Lowl3v3l (~Lowl3v3l@dslb-002-203-128-251.002.203.pools.vodafone-ip.de) has joined #haskell
2019-01-25 17:37:51	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-25 17:37:54	<--	ltchen (~ltchen@host-92-30-204-54.as13285.net) has quit (Ping timeout: 272 seconds)
2019-01-25 17:38:04	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 17:38:06	<--	niklasl (~niklasl@c83-253-14-109.bredband.comhem.se) has quit (Read error: Connection reset by peer)
2019-01-25 17:38:22	-->	niklasl (~niklasl@c83-253-14-109.bredband.comhem.se) has joined #haskell
2019-01-25 17:38:33	Solonarv	yup
2019-01-25 17:39:02	-->	Amras (~Amras@unaffiliated/amras0000) has joined #haskell
2019-01-25 17:39:04	fen_	ok right, it builds the ys with k, then builds the xs with k using ys as the basecase
2019-01-25 17:39:16	fen_	using the built ys*
2019-01-25 17:40:28	<--	FreeBirdLjj (~freebirdl@114.91.21.224) has quit (Remote host closed the connection)
2019-01-25 17:40:38	-->	kritzefitz (~kritzefit@dslb-094-221-072-173.094.221.pools.vodafone-ip.de) has joined #haskell
2019-01-25 17:40:41	-->	bodisiw (~bodiskw@cpe-74-134-64-95.kya.res.rr.com) has joined #haskell
2019-01-25 17:41:04	-->	FreeBirdLjj (~freebirdl@114.91.21.224) has joined #haskell
2019-01-25 17:41:06	fen_	almost like the continuation monad instance
2019-01-25 17:41:20	<--	ph88 (~ph88@a79-169-57-95.cpe.netcabo.pt) has quit (Remote host closed the connection)
2019-01-25 17:41:26	<--	oisdk (~textual@86-45-6-241-dynamic.agg2.dyx.chf-qkr.eircom.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-25 17:41:51	fen_	so is it slow this implementation?
2019-01-25 17:42:09	-->	patrl (~patrl@unaffiliated/patrl) has joined #haskell
2019-01-25 17:42:11	fen_	does it have a get/set ?
2019-01-25 17:42:21	fen_	like pattern matching on cons
2019-01-25 17:42:39	fen_	or is that just k?
2019-01-25 17:42:56	<--	bodisiw (~bodiskw@cpe-74-134-64-95.kya.res.rr.com) has quit (Client Quit)
2019-01-25 17:43:29	xenon-	Solonarv, I tried, and failed. but I have a question: how is current Monad bind any more non-zippy than it is zippy?
2019-01-25 17:43:55	Solonarv	xenon-: >>= can be used to implement <*>
2019-01-25 17:44:02	<--	lambdaman (~lambdaman@msp-vpn.calabrio.com) has quit (Remote host closed the connection)
2019-01-25 17:44:25	Solonarv	for [], this gives the "cartesian product" variant of <*>
2019-01-25 17:44:48	xenon-	Solonarv, is that a requirement? that <*> has to be implementable with >>=
2019-01-25 17:45:11	Solonarv	xenon-: it's a requirement that <*> must match the implementation derived from >>=
2019-01-25 17:45:25	-->	lambdaman (~lambdaman@con08-vpn.calabrio.com) has joined #haskell
2019-01-25 17:46:09	<--	FreeBirdLjj (~freebirdl@114.91.21.224) has quit (Ping timeout: 272 seconds)
2019-01-25 17:46:16	-->	LKoen (~LKoen@2a01cb0407597a0009d775ce6db7ab39.ipv6.abo.wanadoo.fr) has joined #haskell
2019-01-25 17:46:29	Solonarv	(this implementation is 'af <*> ax = af >>= \f -> fmap f ax', IIRC)
2019-01-25 17:47:35	-->	bodisiw (~bodiskw@cpe-74-134-64-95.kya.res.rr.com) has joined #haskell
2019-01-25 17:48:08	fen_	setC :: a -> ListC a -> ListC a; setC x (ListC xs) = ListC (\k z -> x `k` (ys k z))
2019-01-25 17:48:11	fen_	is that right?
2019-01-25 17:48:19	<--	bodisiw (~bodiskw@cpe-74-134-64-95.kya.res.rr.com) has quit (Client Quit)
2019-01-25 17:48:34	xenon-	Solonarv, I'm looking at monad/applicative laws, and I'm not sure I can identify that requirement
2019-01-25 17:48:54	Solonarv	it should be phrased as "<*> must be equivalent to 'ap'" or something similar
2019-01-25 17:48:59	<--	wroathe (~wroathe@23-30-253-203-static.hfc.comcastbusiness.net) has quit (Read error: Connection reset by peer)
2019-01-25 17:49:05	xenon-	one could argue that different liftA2 and liftM2 would be useful :P
2019-01-25 17:49:21	-->	nbloomf (~nbloomf@2600:1700:83e0:1f40:6d74:a91e:18fc:6759) has joined #haskell
2019-01-25 17:49:29	-->	nowhere_man (~pierre@2a01:e35:2eb3:4350:3fcb:8255:8d52:d188) has joined #haskell
2019-01-25 17:49:41	Amras	how would you argue that?
2019-01-25 17:49:45	-->	nshepperd (~nshepperd@193.148.18.211) has joined #haskell
2019-01-25 17:50:14	<--	keepLearning512 (~keepLearn@106.51.72.155) has quit (Read error: Connection reset by peer)
2019-01-25 17:50:30	xenon-	Amras, it would give liftM2 a purpose, instead of just being useless relic
2019-01-25 17:50:34	<--	lambdaman (~lambdaman@con08-vpn.calabrio.com) has quit (Ping timeout: 272 seconds)
2019-01-25 17:50:43	johnw	Amras: it's true in Haxl
2019-01-25 17:51:24	Amras	surely the solution would be to deprecate liftM2 rather than vary the behavior
2019-01-25 17:51:32	Lears	xenon-: liftM/liftM2/ap are pretty useful how they are.
2019-01-25 17:51:34	<--	aplainzetakind (~dk@05269776.dsl.pool.telekom.hu) has quit (Ping timeout: 250 seconds)
2019-01-25 17:52:00	Amras	but I'll happily accept that I'm an inexperienced idiot
2019-01-25 17:52:01	Lears	They mean you don't have to write Functor and Applicative instances by hand if you're writing a Monad instance.
2019-01-25 17:52:12	<--	agander (~agander@185.128.27.100) has quit (Quit: Leaving)
2019-01-25 17:52:23	Solonarv	they're already as minimal as it gets tbh
2019-01-25 17:52:30	Solonarv	Functor can be derived
2019-01-25 17:52:35	Lears	Not always.
2019-01-25 17:52:41	xenon-	Lears, that's actually a good point
2019-01-25 17:52:43	-->	kipras (~Kipras@78-58-153-109.static.zebra.lt) has joined #haskell
2019-01-25 17:53:01	Solonarv	oh derp I misunderstood what you were saying
2019-01-25 17:53:20	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 17:53:20	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-25 17:53:36	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-25 17:53:37	<--	binq (~binq@99.156.186.141) has quit (Remote host closed the connection)
2019-01-25 17:53:38	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 17:54:32	xenon-	so.. is concatMap the only possible bind implementation for list?
2019-01-25 17:54:42	-->	iqubic (a4747e96@gateway/web/freenode/ip.164.116.126.150) has joined #haskell
2019-01-25 17:54:55	iqubic	ski: You said I wanted a sum of products.
2019-01-25 17:55:17	Solonarv	xenon-: there might be alternate ones which mess around with the element order somehow
2019-01-25 17:55:26	Solonarv	but I can't think of any concrete ones
2019-01-25 17:55:26	<--	darjeeling_ (~darjeelin@c-73-97-157-215.hsd1.wa.comcast.net) has quit (Ping timeout: 240 seconds)
2019-01-25 17:55:30	<--	uptick (~rue@2001-b011-1000-1395-ea4d-367f-7d3a-68bf.dynamic-ip6.hinet.net) has quit (Quit: uptick)
2019-01-25 17:55:43	iqubic	You were right. That is exactly what I ended up creating to deal with things like "1 + 2 * 3" -> "1 + (2 * 3)"
2019-01-25 17:55:44	-->	shuh (~shuh@2604:2000:e14b:8000:2431:cba3:2a80:3e91) has joined #haskell
2019-01-25 17:55:49	fen_	Solonarv: why were the examples using ftoList?
2019-01-25 17:55:52	fen_	why not build?
2019-01-25 17:55:54	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 250 seconds)
2019-01-25 17:56:19	Solonarv	fen_: ftoList is just an alias for Data.Foldable.toList
2019-01-25 17:56:47	Solonarv	I guess I could've called the alias 'build' instead, but I doubt that really matters
2019-01-25 17:56:57	iqubic	so I'm running into a roadblock with megaparsec.
2019-01-25 17:56:58	fen_	it does, one has fusion!
2019-01-25 17:57:10	-->	davr0s (~textual@host109-155-92-146.range109-155.btcentralplus.com) has joined #haskell
2019-01-25 17:57:21	xenon-	heh
2019-01-25 17:57:33	fen_	thats the whole point of this implementation
2019-01-25 17:57:39	Solonarv	ah, you went into this because you want to understand fusion?
2019-01-25 17:57:40	fen_	or encoding
2019-01-25 17:57:48	xenon-	I tried to follow Lears recommendation (the way I understood it, anyway), and ended up in infinite loop
2019-01-25 17:58:07	fen_	Solonarv: build uses this encoding
2019-01-25 17:58:11	iqubic	If I try to write: isJust $ optional $ char '-'
2019-01-25 17:58:13	Solonarv	yes, I'm aware of that
2019-01-25 17:58:24	fen_	so why use toList?
2019-01-25 17:58:45	Solonarv	...so that we can see what the result(s) of operations on ListC are?
2019-01-25 17:58:48	iqubic	And it failed saying that it couldn't unify "Token m0 ~ Char" or somehthing like that.
2019-01-25 17:58:53	-->	raingloom (~raingloom@catv-178-48-182-38.catv.broadband.hu) has joined #haskell
2019-01-25 17:58:54	fen_	is there something going on with the Foldable instance?
2019-01-25 17:59:07	Solonarv	no, not at all
2019-01-25 17:59:28	xenon-	https://pastebin.com/c8pqYbXa <- infinite loop
2019-01-25 17:59:37	Solonarv	(forall b. (a -> b -> b) -> b -> b) is foldr with its list argument already applied
2019-01-25 17:59:49	xenon-	probably cyclic default definitions of some functions
2019-01-25 17:59:49	fen_	yeah but build would have returned a list as well, and whats more, if this list were folded over, it would replace the k and z which build sets to be (:) and []
2019-01-25 18:00:00	fen_	toList wouldnt do that, it wouldnt fuse?
2019-01-25 18:00:22	Solonarv	xenon-: you have pure = return, but there is a default 'return = pure'
2019-01-25 18:00:31	xenon-	ah
2019-01-25 18:00:49	Solonarv	fen_: toList is just 'foldr (:) []'
2019-01-25 18:00:54	iqubic	You need to define either pure or return your self.
2019-01-25 18:01:25	-->	bryan1 (~bryan@S0106bcd165306223.vc.shawcable.net) has joined #haskell
2019-01-25 18:01:33	xenon-	yeah I know. I defined all three type classes, but then tried to define Functor and Applicative using Monad, without giving it much thought
2019-01-25 18:01:35	-->	wildlander (~wildlande@unaffiliated/wildlander) has joined #haskell
2019-01-25 18:01:40	-->	ianandrich (~ianandric@c-73-223-61-224.hsd1.ca.comcast.net) has joined #haskell
2019-01-25 18:02:51	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 18:03:00	iqubic	xenon-: That will give you some infinite loops for sure.
2019-01-25 18:03:06	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 18:03:19	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-25 18:03:33	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-25 18:03:39	fen_	Solonarv: but the compiler cant tell that build should be used instead...
2019-01-25 18:03:40	Solonarv	only one loop, actually (between 'return' and 'pure')
2019-01-25 18:04:13	Solonarv	fen_: what is your point?
2019-01-25 18:04:16	<--	Saukk (~Saukk@2001:99a:0:e640:40bd:b2f9:7a0f:dfca) has quit (Remote host closed the connection)
2019-01-25 18:04:33	iqubic	Solonarv: Ah, right.
2019-01-25 18:04:37	-->	keepLearning512 (~keepLearn@106.51.72.155) has joined #haskell
2019-01-25 18:04:43	iqubic	So you either need to define return, or pure.
2019-01-25 18:04:43	<--	dale (~dale@unaffiliated/dale) has quit (Read error: Connection reset by peer)
2019-01-25 18:04:45	-->	dale_ (~dale@unaffiliated/dale) has joined #haskell
2019-01-25 18:05:01	Solonarv	the definitions I posted were an answer to your question about mappend/mempty for (forall b. (a -> b -> b) -> b -> b)
2019-01-25 18:05:04	--	dale_ is now known as dale
2019-01-25 18:05:16	-->	sedeki (~textual@unaffiliated/sedeki) has joined #haskell
2019-01-25 18:05:24	fen_	Solonarv: the point is to have build fold fusion work over these things
2019-01-25 18:05:53	-->	wroathe (~wroathe@23-30-253-203-static.hfc.comcastbusiness.net) has joined #haskell
2019-01-25 18:06:03	fen_	so that for instance if (forall b. ((i,a) -> b -> b) -> b -> b) were used instead, there would be a corresponding fusion
2019-01-25 18:06:18	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 18:06:21	-->	lastmanstanding (~arjoonn@111.92.50.159) has joined #haskell
2019-01-25 18:07:09	fen_	this means containers could be converted between by functions on their structure directing indexes (extra args to get and set) without incurring a performance hit
2019-01-25 18:07:33	<--	keepLearning512 (~keepLearn@106.51.72.155) has quit (Remote host closed the connection)
2019-01-25 18:08:03	fen_	well, as long as the conversion is i -> i' = id, where anything else would be costly, but the point is that cost isnt the big issue, the saving is not having to fold over the thing rebuilding it a buch of times
2019-01-25 18:08:32	fen_	there was a thing earlier about mono containers?
2019-01-25 18:08:47	xenon-	it has been a while since I did something like this.. kind of awesome how little code it takes to make a fully usable container, that can use all the functions from Foldable, Monad, Applicative and Functor. https://pastebin.com/265ViUwy
2019-01-25 18:08:50	fen_	that is, get is just split where the lhs of the pair of things returned is mono
2019-01-25 18:09:15	fen_	and a representation for mono f is (a,forall b. f b)
2019-01-25 18:09:30	fen_	then if you can fold over f, but getting the shape along the way, then this is
2019-01-25 18:09:36	xenon-	24 lines total, toList/fromList are just there for fun
2019-01-25 18:09:38	fen_	(a,[j])
2019-01-25 18:09:42	fen_	where j is the shape
2019-01-25 18:09:45	iqubic	Yes. This will work.
2019-01-25 18:09:50	Lears	xenon-: In this case you can even derive Functor and Foldable.
2019-01-25 18:10:10	Lears	And append can probably be written with a 1-line fold.
2019-01-25 18:10:14	xenon-	what gives us foldable?
2019-01-25 18:10:16	iqubic	If you enable the right LANGUAGE PRAGMAS
2019-01-25 18:10:24	-->	replay (~replay@pdpc/supporter/student/replay) has joined #haskell
2019-01-25 18:10:30	fen_	but, then you would have to fold over that list of j's and thats were you would want to use fusion, to just modifies the original folding that returned the j's
2019-01-25 18:10:53	Lears	DeriveFoldable makes it a stock derivable class.
2019-01-25 18:11:02	fen_	so then get has type; f a -> ((a,Scott a),f a)
2019-01-25 18:11:13	Solonarv	xenon-: toList is a method of Foldable, actually
2019-01-25 18:11:22	Solonarv	no need to define it separately, you get it for free
2019-01-25 18:11:29	xenon-	I did deriving (Show, Functor, Foldable), and I'm getting       * Overlapping instances for Functor List         arising from the second field of `Cons' (type `List a')
2019-01-25 18:11:33	fen_	which has a trivial set instance, which uses the j's
2019-01-25 18:11:39	xenon-	oh, I didn't remove Functor instance
2019-01-25 18:11:45	iqubic	Where did Scott come from?
2019-01-25 18:11:53	fen_	oh sry
2019-01-25 18:11:57	fen_	um, ListC
2019-01-25 18:12:34	-->	pie_ (~pie_@unaffiliated/pie-/x-0787662) has joined #haskell
2019-01-25 18:12:55	fen_	its for things like data Skip2 a = Skip1 (Skip a) | Skip2 (Skip a) | Value a | End
2019-01-25 18:12:57	sedeki	(<*>) :: f (a -> b) -> f a -> f b
2019-01-25 18:13:09	<--	fendor (~fendor@e252-084.eduroam.tuwien.ac.at) has quit (Ping timeout: 246 seconds)
2019-01-25 18:13:12	sedeki	what does `f ( a -> b)` mean?
2019-01-25 18:13:12	fen_	the `j' is then Bool
2019-01-25 18:13:26	fen_	for the 2 choices of empty gaps in the container (its shape)
2019-01-25 18:13:34	sedeki	is the return value of `a -> b` wrapped in a `f` ?
2019-01-25 18:13:58	-->	neiluj[m] (suilujmatr@gateway/shell/matrix.org/x-oyunzcukqhhiqhyf) has joined #haskell
2019-01-25 18:13:59	Solonarv	sedeki: no, it's a function from 'a' to 'b' wrapped in 'f'
2019-01-25 18:14:24	sedeki	Solonarv what does that even mean?
2019-01-25 18:14:38	iqubic	:t Just id
2019-01-25 18:14:40	lambdabot	Maybe (a -> a)
2019-01-25 18:14:47	fen_	the point is that get will return a value always, but there is also something that deconstructs the "substructure" inbetween the values
2019-01-25 18:14:49	xenon-	can I put several LANGUAGE pragmas in a single line?
2019-01-25 18:14:49	sedeki	aha...
2019-01-25 18:14:50	sedeki	 i see
2019-01-25 18:14:52	Solonarv	sedeki: in Haskell, functions are values like any other
2019-01-25 18:14:58	iqubic	xenon-: Yes. 
2019-01-25 18:15:04	sedeki	Solonarv thanks
2019-01-25 18:15:08	fen_	and its something very similar to get..
2019-01-25 18:15:13	Solonarv	xenon-: {-# language Foo, Bar, Baz #-}
2019-01-25 18:15:19	fen_	more on this soon
2019-01-25 18:15:22	fen_	peace
2019-01-25 18:15:23	<--	fen_ (518372ac@gateway/web/freenode/ip.81.131.114.172) has quit (Quit: Page closed)
2019-01-25 18:16:48	xenon-	14 lines for a fully functional List datastructure, with Monad, Applicative, Functor and Foldable instances. https://bpaste.net/show/f596d238552a
2019-01-25 18:17:23	-->	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has joined #haskell
2019-01-25 18:17:31	<--	kritzefitz (~kritzefit@dslb-094-221-072-173.094.221.pools.vodafone-ip.de) has quit (Read error: Connection reset by peer)
2019-01-25 18:18:31	johnw	append = flip (foldr Cons)!
2019-01-25 18:18:31	hyperisco	xenon-, append forms a Semigroup
2019-01-25 18:18:58	xenon-	I could probably put foldr in Bind, would shave two more lines
2019-01-25 18:19:05	xenon-	and scratch append
2019-01-25 18:19:34	-->	kritzefitz (~kritzefit@dslb-094-221-072-173.094.221.pools.vodafone-ip.de) has joined #haskell
2019-01-25 18:19:55	<--	antsmartian (~antsmarti@171.60.232.18) has quit (Remote host closed the connection)
2019-01-25 18:20:02	<--	kritzefitz (~kritzefit@dslb-094-221-072-173.094.221.pools.vodafone-ip.de) has quit (Remote host closed the connection)
2019-01-25 18:20:15	-->	kritzefitz (~kritzefit@dslb-094-221-072-173.094.221.pools.vodafone-ip.de) has joined #haskell
2019-01-25 18:20:56	Lears	Append is probably more important than Monad though.
2019-01-25 18:21:33	--	doomslayer is now known as msg
2019-01-25 18:21:53	--	msg is now known as doomslayer
2019-01-25 18:22:20	Solonarv	you might also want MonadZip
2019-01-25 18:22:37	 *	hackage servant-namedargs 0.1.0.1 - Combinators for servant providing named parameters  https://hackage.haskell.org/package/servant-namedargs-0.1.0.1 (CullinPoresky)
2019-01-25 18:23:39	-->	kritzefitz_ (~kritzefit@dslb-084-063-088-165.084.063.pools.vodafone-ip.de) has joined #haskell
2019-01-25 18:24:27	<--	kritzefitz_ (~kritzefit@dslb-084-063-088-165.084.063.pools.vodafone-ip.de) has quit (Remote host closed the connection)
2019-01-25 18:25:24	<--	kritzefitz (~kritzefit@dslb-094-221-072-173.094.221.pools.vodafone-ip.de) has quit (Ping timeout: 246 seconds)
2019-01-25 18:25:34	hyperisco	to this day I feel reluctant about pulling in lenses… why
2019-01-25 18:25:55	Amras	good question, lenses are great
2019-01-25 18:26:07	Amras	maybe they feel too objecty?
2019-01-25 18:26:43	hyperisco	I thin I rue defining them
2019-01-25 18:26:51	mpwd	Amras, if you are using template haskell all the time to generate lenses, they add a lot of compile time in my experience
2019-01-25 18:27:26	<--	lastmanstanding (~arjoonn@111.92.50.159) has quit (Ping timeout: 240 seconds)
2019-01-25 18:27:46	-->	amar (~amar@cpc121556-lewi23-2-0-cust1623.2-4.cable.virginm.net) has joined #haskell
2019-01-25 18:28:03	hyperisco	that's why… there is a feature in VS called T4
2019-01-25 18:28:10	--	amar is now known as Guest70556
2019-01-25 18:28:16	hyperisco	but generally speaking it is "design time compilation"
2019-01-25 18:28:34	hyperisco	I think there is a sore lack of that in software development
2019-01-25 18:29:12	-->	zachk (~zachk@pool-108-26-38-212.syrcny.east.verizon.net) has joined #haskell
2019-01-25 18:29:18	-->	lambdaman (~lambdaman@con08-vpn.calabrio.com) has joined #haskell
2019-01-25 18:29:35	geekosaur	or just https://ro-che.info/ccc/23
2019-01-25 18:29:47	Amras	compile time only applies while you're working on the specific module though; couldn't you just move the lenses out somewhere? Or am I misunderstanding
2019-01-25 18:30:03	<--	zachk (~zachk@pool-108-26-38-212.syrcny.east.verizon.net) has quit (Read error: Connection reset by peer)
2019-01-25 18:30:27	-->	zachk (~zachk@pool-108-26-38-212.syrcny.east.verizon.net) has joined #haskell
2019-01-25 18:30:53	<--	iqubic (a4747e96@gateway/web/freenode/ip.164.116.126.150) has quit (Ping timeout: 256 seconds)
2019-01-25 18:31:57	hyperisco	lots of ways to trigger a rebuild
2019-01-25 18:32:00	-->	Mrbuck (~Mrbuck@ec2-34-200-164-101.compute-1.amazonaws.com) has joined #haskell
2019-01-25 18:32:04	mpwd	Amras, my company uses haskell for everything.  We avoid orphan instances so every data type declaration comes with some makelense boilerplate. We tend to use lenses everywhere, and it always slows down CI and fresh builds (which we have to resort to from time to time).
2019-01-25 18:32:08	<--	Guest70556 (~amar@cpc121556-lewi23-2-0-cust1623.2-4.cable.virginm.net) has quit (Ping timeout: 245 seconds)
2019-01-25 18:32:15	Mrbuck	can we write c an c++ as beautiful as haskell ?
2019-01-25 18:32:35	Mrbuck	I mean code looking when we see shrt and sweet
2019-01-25 18:32:44	-->	luoar (~user@dslb-188-100-063-079.188.100.pools.vodafone-ip.de) has joined #haskell
2019-01-25 18:33:01	Amras	Mrbuck: sure, it's called Python
2019-01-25 18:33:05	hyperisco	C is short and sweet, just for different things
2019-01-25 18:33:16	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-25 18:33:31	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-25 18:33:54	hyperisco	for (int i = 0; i < sizeof(xs); ++i) ys[i] = xs[i];
2019-01-25 18:34:02	hyperisco	for an array copy, for example
2019-01-25 18:34:19	mpwd	hyperisco, Have you played with generic-lens? http://hackage.haskell.org/package/generic-lens
2019-01-25 18:34:27	hyperisco	nope
2019-01-25 18:34:30	johnw	fwiw, (int i = sizeof(xs); i--; ) can be faster
2019-01-25 18:34:32	mpwd	We plan to move to this
2019-01-25 18:34:46	<--	t7 (~tommo@host86-153-176-170.range86-153.btcentralplus.com) has quit (Remote host closed the connection)
2019-01-25 18:34:49	Amras	--i you mean
2019-01-25 18:34:55	johnw	maybe I do
2019-01-25 18:34:59	Amras	>_>
2019-01-25 18:35:02	johnw	it's been a couple decades :)
2019-01-25 18:35:03	johnw	 
2019-01-25 18:35:26	<--	knupfer (~Thunderbi@200116b82cca3100f69634fffef0b45f.dip.versatel-1u1.de) has quit (Ping timeout: 240 seconds)
2019-01-25 18:35:33	<--	zachk (~zachk@pool-108-26-38-212.syrcny.east.verizon.net) has quit (Changing host)
2019-01-25 18:35:33	-->	zachk (~zachk@unaffiliated/zachk) has joined #haskell
2019-01-25 18:35:50	-->	t7 (~tommo@2a00:23c5:12b5:1100:a8ba:9b27:dedb:4285) has joined #haskell
2019-01-25 18:35:56	<--	deviantfero (~deviantfe@ip168-243-230-189.intercom.com.sv) has quit (Ping timeout: 268 seconds)
2019-01-25 18:36:05	johnw	if the size is 1, wouldn't --i fail to copy anything?
2019-01-25 18:36:07	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 240 seconds)
2019-01-25 18:36:57	hyperisco	you would start at  i = sizeof(xs) - 1  first off
2019-01-25 18:37:07	hyperisco	and your condition would be  i >= 0
2019-01-25 18:37:17	johnw	the trick is to not use a separate condition
2019-01-25 18:37:24	hyperisco	the decrement happens after
2019-01-25 18:37:34	-->	deviantfero (~deviantfe@ip168-243-230-189.intercom.com.sv) has joined #haskell
2019-01-25 18:37:34	hyperisco	not a separate condition for what?
2019-01-25 18:37:44	johnw	for (int i = sizeof(xs); i--; )
2019-01-25 18:37:50	hyperisco	oh I see, haha, damn C
2019-01-25 18:37:56	--	luite_ is now known as luite
2019-01-25 18:37:58	mpwd	johnw, for int I think 'i--' and '--i' will compile to the same assembly in that loop.  But for other data types `i--` can involve accessess i twice, and since access can have side effects its prerable to do `--i`
2019-01-25 18:38:01	johnw	a friend showed me that this reduces to like 3 Intel instructions
2019-01-25 18:38:03	hyperisco	sorry I just assumed you mistyped that
2019-01-25 18:38:30	zachk	johnw, whats the other way reduce to?
2019-01-25 18:38:31	hyperisco	okay but your assignment is  ys[i-1] = xs[i-1]  then
2019-01-25 18:38:36	Amras	oh right, so did I
2019-01-25 18:38:46	johnw	zachk: I think it was 7 or something
2019-01-25 18:39:00	Amras	i-- then, fair enough
2019-01-25 18:39:05	johnw	this was back in the day when it mattered, though
2019-01-25 18:39:08	<--	HarveyPwca (~HarveyPwc@ip-64-134-172-208.public.wayport.net) has quit (Quit: Leaving)
2019-01-25 18:39:09	hyperisco	johnw, i-- means to decrement after, --i means to decrement before
2019-01-25 18:39:12	johnw	nowadays, more instructions sometimes help the cache pipeline!
2019-01-25 18:39:21	hyperisco	johnw, before what and after what is an enigma
2019-01-25 18:39:26	johnw	hyperisco: yeah, I kind of know that :)
2019-01-25 18:39:41	hyperisco	johnw, well, just saying, you definitely meant i-- and not --i
2019-01-25 18:39:58	johnw	yep
2019-01-25 18:39:58	-->	osa1 (~omer@haskell/developer/osa1) has joined #haskell
2019-01-25 18:40:11	zachk	you still have branch prediction and pipelining though 
2019-01-25 18:40:14	johnw	sorry, didn't mean te infect #haskell with C golfing
2019-01-25 18:40:27	johnw	just took me back
2019-01-25 18:40:36	hyperisco	no I like it… Assembly programming through the mask of C
2019-01-25 18:40:59	saml	haskell is a good replacement to assembly in ph.d papers
2019-01-25 18:41:07	-->	yyy- (~yyy@unaffiliated/tinnotl) has joined #haskell
2019-01-25 18:41:08	zachk	at least c is more portable then assembly 
2019-01-25 18:41:09	-->	TipsyMe (~TipsyMe@50-50-239-253.waus.wi.frontiernet.net) has joined #haskell
2019-01-25 18:41:24	<--	nbloomf (~nbloomf@2600:1700:83e0:1f40:6d74:a91e:18fc:6759) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-25 18:41:34	hyperisco	you know, that is terrifying to say zachk
2019-01-25 18:41:37	 *	hackage servant-server-namedargs 0.1.0.0 - Automatically derive API server functions with named and optional parameters  https://hackage.haskell.org/package/servant-server-namedargs-0.1.0.0 (CullinPoresky)
2019-01-25 18:41:43	<--	sternmull (~kringel@p5481C657.dip0.t-ipconnect.de) has quit (Ping timeout: 245 seconds)
2019-01-25 18:41:58	saml	what's portable mean?
2019-01-25 18:42:34	johnw	programming with servant these days makes C feel like an evolutionary cycle of yesteryear
2019-01-25 18:42:34	Welkin	you can carry it in one hand
2019-01-25 18:42:42	<--	yyy (~yyy@unaffiliated/tinnotl) has quit (Ping timeout: 250 seconds)
2019-01-25 18:42:44	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 18:42:51	hyperisco	it weighs less than 12lbs
2019-01-25 18:42:52	Amras	saml: you can use the same code on multiple machines, ish
2019-01-25 18:42:54	-->	twopoint718 (~cjw@173.229.8.61) has joined #haskell
2019-01-25 18:42:54	<--	twopoint718 (~cjw@173.229.8.61) has quit (Changing host)
2019-01-25 18:42:54	-->	twopoint718 (~cjw@fsf/member/twopoint718) has joined #haskell
2019-01-25 18:43:03	saml	You can write a program in C, and write compilers to different target
2019-01-25 18:43:16	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-25 18:43:18	Welkin	portability is overrated
2019-01-25 18:43:28	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-25 18:43:32	Welkin	remmber when that was the promise of the jvm? "Write once, run everywhere!"
2019-01-25 18:43:33	Mrbuck	wow you genius people 
2019-01-25 18:43:34	saml	so you can compile to llvm  and let llvm generate code for target arch
2019-01-25 18:43:43	zachk	I have had ok luck with portable haskell code from windows to linux, if I don't *nix specific stuff 
2019-01-25 18:43:44	johnw	arguably, jvm did deliver on that promise
2019-01-25 18:43:57	zachk	Welkin, android kinda broke that :( 
2019-01-25 18:43:58	Mrbuck	I asked a question went to drink water and back I see a bg discussing  with small snippets on it 
2019-01-25 18:44:12	johnw	Mrbuck: we're bored, what can we say
2019-01-25 18:44:45	johnw	I'm looking forward to compiling Haskell to WebAssembly
2019-01-25 18:44:49	saml	you can build docker image and run everywhere
2019-01-25 18:44:55	Welkin	why?
2019-01-25 18:44:57	Mrbuck	johnw:  I wish I am such expert
2019-01-25 18:44:59	zachk	johnw, can we do that yet? 
2019-01-25 18:45:01	Mrbuck	I am bored always
2019-01-25 18:45:02	johnw	Welkin: I don't know yet
2019-01-25 18:45:03	Welkin	why do you want to run haskellin the browser?
2019-01-25 18:45:08	luite	why not?
2019-01-25 18:45:11	johnw	zachk: yeah, WebGHC or Asterius
2019-01-25 18:45:16	zachk	oh
2019-01-25 18:45:22	Chousuke	if you want a "run-anywhere" java application it means you have to include a framework that obfuscates all details about how the programs actually starts up, along with at least 600 lines of shell script to set the framework up properly :P
2019-01-25 18:45:22	saml	because haskell is declarative and makes you bug free
2019-01-25 18:45:24	Welkin	I didn't ask why not, I asked if you had a reason why
2019-01-25 18:45:31	johnw	Welkin: actually, I want WebAssembly to become a more universal vm than just browsers
2019-01-25 18:45:31	 *	Chousuke has had some bad experiences lately
2019-01-25 18:45:42	Solonarv	saml: neither of those things are true in general
2019-01-25 18:45:52	hyperisco	johnw, thank-you, keep fighting the good fight
2019-01-25 18:46:04	-->	amar (~amar@cpc121556-lewi23-2-0-cust1623.2-4.cable.virginm.net) has joined #haskell
2019-01-25 18:46:04	johnw	at my work we're using WebAssembly as an execution platform, having nothing to do with browsers
2019-01-25 18:46:25	hyperisco	I am not sure what makes it so special… it seems like the nth stack based IL
2019-01-25 18:46:34	--	amar is now known as Guest51926
2019-01-25 18:46:35	johnw	the fact that the standard for Wasm actually includes a formal semantics that's been machine-checked wins me over
2019-01-25 18:46:47	hyperisco	but if it lures web people into using it then I call that a victory
2019-01-25 18:46:57	johnw	other than that, it's just a stack based IL :)
2019-01-25 18:47:06	hyperisco	because that means JavaScript won't have to be the compilation target anymore
2019-01-25 18:47:11	johnw	exactly
2019-01-25 18:47:23	Welkin	saml: for haskell in the browser there are better options that you can use in production today, easily. Namely Elm
2019-01-25 18:48:56	hyperisco	though asmjs seems to have… well I am not sure what is going on with it but I'm not seeing much traction
2019-01-25 18:49:16	johnw	https://hacks.mozilla.org/2017/03/why-webassembly-is-faster-than-asm-js/
2019-01-25 18:49:35	-->	esp32_prog (~esp32_pro@178.18.54.206) has joined #haskell
2019-01-25 18:49:42	hyperisco	NaCl is belly up and encourages wasm now
2019-01-25 18:49:43	-->	freeman42x (~freeman42@2a02:8084:e81:9580:8411:633f:bfb5:f49d) has joined #haskell
2019-01-25 18:50:02	hyperisco	well I am not sure the problem with asmjs was that it was too slow
2019-01-25 18:50:09	johnw	i wonder when we'll have an ISA that can execute Wasm directly
2019-01-25 18:50:12	hyperisco	there is even Emscripten which ports llvm to asmjs
2019-01-25 18:51:29	hyperisco	at any rate, for the way the web is today, having an IL makes way more sense than an ordained PL like JavaScript
2019-01-25 18:51:53	johnw	yes, an IL makes optimizations and transformations much saner
2019-01-25 18:52:09	johnw	btw, if anyone is interested my company is soon to open source a Haskell implementation of a Wasm interpreter
2019-01-25 18:52:14	-->	yyy (~yyy@unaffiliated/tinnotl) has joined #haskell
2019-01-25 18:52:18	johnw	it needs some optimization work, if anyone is interested in collaborating
2019-01-25 18:52:31	hyperisco	it also encourages a plurality of languages, and the web should be about such diversities
2019-01-25 18:53:14	 *	hyperisco *shrugs*
2019-01-25 18:53:15	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-25 18:53:19	hyperisco	if you have a link I will at least look
2019-01-25 18:53:20	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 18:53:29	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-25 18:53:31	hyperisco	the antiquated platform I have to work with does not support wasm sadly
2019-01-25 18:53:33	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 18:53:57	<--	jao (~jao@pdpc/supporter/professional/jao) has quit (Remote host closed the connection)
2019-01-25 18:53:58	johnw	I'll ping you in a few weeks or months; I still have to put the finishing touches on the docs, and get admin approval to flip the switch
2019-01-25 18:54:19	johnw	but it passes all of the positive spec tests aside from floating point (another area that needs some work)
2019-01-25 18:54:24	hyperisco	ah the "it'll be ready when it's ready" timeline, I like it
2019-01-25 18:54:24	<--	esp32_prog (~esp32_pro@178.18.54.206) has quit (Ping timeout: 250 seconds)
2019-01-25 18:54:34	johnw	it's not a priority
2019-01-25 18:54:49	johnw	we use V8 now, but we used this Haskell implementation for a while
2019-01-25 18:54:50	-->	keepLearning512 (~keepLearn@106.51.31.245) has joined #haskell
2019-01-25 18:54:59	bsima	johnw: what does your company do with wasm? I might be interested in this interpreter
2019-01-25 18:55:00	hyperisco	why an interpreter
2019-01-25 18:55:16	<--	yyy- (~yyy@unaffiliated/tinnotl) has quit (Ping timeout: 246 seconds)
2019-01-25 18:55:25	johnw	it's an interpreter because we turn binary-encoded Wasm modules into AST representations, and then interpret the code within them
2019-01-25 18:55:34	johnw	but you could use this library as the basis for a real compiler
2019-01-25 18:55:50	hyperisco	you just described what an interpreter does
2019-01-25 18:55:52	johnw	bsima: I work at DFINITY, we're using it as the basis for a distributed computation network
2019-01-25 18:56:10	-->	p0lyph3m (~p0lyph3m@2a02:810d:640:776c:76d7:55f6:f85b:c889) has joined #haskell
2019-01-25 18:56:12	johnw	hyperisco: um, it's an interpreter because I didn't take the time to write a compiler? :)
2019-01-25 18:56:13	-->	Essadon (~Essadon@81-225-32-185-no249.tbcn.telia.com) has joined #haskell
2019-01-25 18:56:49	johnw	I think it could be a useful library for writing Wasm transformations
2019-01-25 18:56:50	hyperisco	modern browsers compile wasm, and though I am not sure I suspect that compiler can be divorced from the browser
2019-01-25 18:56:55	--	amalloy_ is now known as amalloy
2019-01-25 18:56:57	bsima	johnw: huh, i might be joing a startup doing a similar thing, and was also thinking of using wasm or a similar risc for edge devices...
2019-01-25 18:57:29	<--	milanj (~milan@cable-89-216-113-198.static.sbb.rs) has quit (Quit: This computer has gone to sleep)
2019-01-25 18:57:51	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-25 18:58:04	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 18:58:23	hyperisco	well lets say then that if Haskell ever wanted a wasm backend that what you have is a keystone for that
2019-01-25 18:58:44	johnw	I bet that WebGHC contains a far better backend than what I've done
2019-01-25 18:58:45	hyperisco	or any compiler implemented in Haskell for that matter
2019-01-25 18:58:47	bsima	granted i'm working on computer vision, not dapps
2019-01-25 18:59:25	hyperisco	never heard of webghc before
2019-01-25 18:59:27	<--	luoar (~user@dslb-188-100-063-079.188.100.pools.vodafone-ip.de) has quit (Ping timeout: 240 seconds)
2019-01-25 18:59:30	johnw	the main thing writing this interpreter did was help me understand Wasm a lot better
2019-01-25 18:59:34	luite	hyperisco: the JS/Wasm engines are reasonably self-contained, quite usable as a library
2019-01-25 18:59:38	<--	doomslayer (d07a65ee@gateway/web/cgi-irc/kiwiirc.com/ip.208.122.101.238) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2019-01-25 18:59:54	-->	doomslayer (d07a65ee@gateway/web/cgi-irc/kiwiirc.com/ip.208.122.101.238) has joined #haskell
2019-01-25 19:00:00	wroathe	Is it me or is TypeApplications a super clean syntax
2019-01-25 19:00:03	hyperisco	Ah it is luite the ghcjs guru! How be you?
2019-01-25 19:00:08	johnw	I _love_ TypeApplications
2019-01-25 19:00:11	johnw	I overuse them, definitely
2019-01-25 19:00:26	hyperisco	system F is chuckling
2019-01-25 19:01:33	MarcelineVQ	does cabal-install build with -O1 if it's not specified in ghc-options: ?
2019-01-25 19:02:17	johnw	MarcelineVQ: that's always been my understanding
2019-01-25 19:02:40	wroathe	MarcelineVQ: you can check by passing --verbose to your next build
2019-01-25 19:03:11	hyperisco	according to this https://webghc.github.io/roadmap the goal is to make an llvm backend for GHC which is compatible with wasm… I am guessing through a tool like Emscripten
2019-01-25 19:03:14	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-25 19:03:27	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-25 19:03:42	<--	twopoint718 (~cjw@fsf/member/twopoint718) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-25 19:03:44	MarcelineVQ	Mine too but wanted to ask around. wroathe: Ah I'm not building with cabal-install because it's broken on my system but I can probably still check the flags that way so thanks for the suggestion
2019-01-25 19:04:06	-->	chessai (~quassel@12.150.97.130) has joined #haskell
2019-01-25 19:04:15	<--	chessai (~quassel@12.150.97.130) has quit (Remote host closed the connection)
2019-01-25 19:04:36	-->	chessai (~quassel@12.150.97.130) has joined #haskell
2019-01-25 19:04:40	Solonarv	there is also --dry-run (IIRC) to make it not actually do anything
2019-01-25 19:04:52	hyperisco	last I recall, and they touch on these issues too, is that LLVM is a square hole for the round peg of Haskell
2019-01-25 19:05:57	xenon-	sedeki, you get f (a -> b) when you partially apply a function to f
2019-01-25 19:06:12	hyperisco	also that timeline looks adorable
2019-01-25 19:06:16	Solonarv	xenon-: no, that's misleading and not true in general
2019-01-25 19:06:21	xenon-	> (+) <$> (Just 10)
2019-01-25 19:06:23	lambdabot	 Just <Integer -> Integer>
2019-01-25 19:06:25	hyperisco	so the first two weeks are about bikeshedding the website, lol
2019-01-25 19:06:32	luite	MarcelineVQ: the user can still override optimization through the configure options (--disable-optimization) or project file
2019-01-25 19:06:57	hyperisco	then apparently it will take just two months to complete
2019-01-25 19:07:29	xenon-	Solonarv, I don't think that is misleading at all, that is one of one of the main differences (that and pure) between Applicative and Functor, ability to have liftAN. <*> allows us to write liftAN
2019-01-25 19:07:40	xenon-	> (+) <$> Just 10 <*> Just 20
2019-01-25 19:07:42	lambdabot	 Just 30
2019-01-25 19:07:44	hyperisco	I'll check back in 3 years when they're finally pushing for the big 1.0 release
2019-01-25 19:07:46	MarcelineVQ	luite: thanks, I'm running into disparate behavior because a project is leaving off -O1 or -O2 in the .cabal file and stack doesnm
2019-01-25 19:07:47	Solonarv	xenon-: it's not necessarily partially applied
2019-01-25 19:07:53	Solonarv	> Just id
2019-01-25 19:07:54	MarcelineVQ	't seem to add those in its own.
2019-01-25 19:07:55	lambdabot	 error:
2019-01-25 19:07:55	lambdabot	     • No instance for (Typeable a0)
2019-01-25 19:07:55	lambdabot	         arising from a use of ‘show_M150851699418850654900’
2019-01-25 19:08:12	Solonarv	> Just (id :: Integer -> Integer)
2019-01-25 19:08:13	lambdabot	 Just <Integer -> Integer>
2019-01-25 19:08:17	xenon-	Solonarv, I did not say that is the only way to get f (a -> b)
2019-01-25 19:08:32	johnw	> Just (id @Integer)
2019-01-25 19:08:34	lambdabot	 error:
2019-01-25 19:08:34	lambdabot	     Pattern syntax in expression context: id@Integer
2019-01-25 19:08:34	lambdabot	     Did you mean to enable TypeApplications?
2019-01-25 19:08:36	johnw	aww
2019-01-25 19:08:37	Solonarv	if you say "X is Y" that usually means "all X are Y"
2019-01-25 19:08:48	Solonarv	ah, but I see now - you didn't say that
2019-01-25 19:08:56	<--	pera (~pera@unaffiliated/pera) has quit (Ping timeout: 240 seconds)
2019-01-25 19:09:34	xenon-	yep
2019-01-25 19:09:51	-->	rblaze (~Adium@2620:10d:c091:200::7:a642) has joined #haskell
2019-01-25 19:11:00	wroathe	hyperisco: Who are you talking to :P?
2019-01-25 19:11:06	wroathe	hyperisco: Just everyone in particular?
2019-01-25 19:11:13	hyperisco	myself I guess
2019-01-25 19:11:31	bsima	hyperisco: i'm listening
2019-01-25 19:11:35	wroathe	Better answers that way
2019-01-25 19:11:43	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 246 seconds)
2019-01-25 19:12:25	hyperisco	I was advised to surround myself with smart people and this is the result of that
2019-01-25 19:12:26	<--	toovs (~toovs@c-98-238-150-172.hsd1.ca.comcast.net) has quit (Ping timeout: 240 seconds)
2019-01-25 19:12:27	<--	_deepfire (~user@80.92.100.69) has quit (Ping timeout: 240 seconds)
2019-01-25 19:12:51	-->	_deepfire (~user@80.92.100.69) has joined #haskell
2019-01-25 19:13:13	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-25 19:13:26	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-25 19:13:39	wroathe	hyperisco: It resulted in you talking to yourself in a crowded room? :P
2019-01-25 19:14:07	 *	hackage servant-client-namedargs 0.1.0.0 - Automatically derive API client functions with named and optional parameters  https://hackage.haskell.org/package/servant-client-namedargs-0.1.0.0 (CullinPoresky)
2019-01-25 19:14:09	hyperisco	no one advised I had to converse with them
2019-01-25 19:14:16	-->	eschnett_ (~eschnett@66.97.27.10) has joined #haskell
2019-01-25 19:14:19	-->	fmixing (~fmixing@5.18.98.152) has joined #haskell
2019-01-25 19:14:34	-->	binq (~binq@99.156.186.141) has joined #haskell
2019-01-25 19:15:35	hyperisco	I have a feeling this is an undergrad research project being done over the summer
2019-01-25 19:15:54	luite	MarcelineVQ: ah I generally increase the verbosity and use -j1 to see what's being passed to GHC
2019-01-25 19:16:00	hyperisco	"From our preliminary research, we believe the first two main objectives should be able to be completed reasonably quickly (possibly ahead of schedule)."
2019-01-25 19:16:41	hyperisco	The optimism exudes from every statement.
2019-01-25 19:18:46	-->	twopoint718 (~cjw@173.229.8.61) has joined #haskell
2019-01-25 19:18:46	<--	twopoint718 (~cjw@173.229.8.61) has quit (Changing host)
2019-01-25 19:18:46	-->	twopoint718 (~cjw@fsf/member/twopoint718) has joined #haskell
2019-01-25 19:20:04	-->	esp32_prog (~esp32_pro@178.18.54.206) has joined #haskell
2019-01-25 19:20:33	hyperisco	Has anyone sat back and admitted that it will take 16 months to produce their basic mobile app?
2019-01-25 19:21:18	<--	patrl (~patrl@unaffiliated/patrl) has quit (Ping timeout: 252 seconds)
2019-01-25 19:21:31	hyperisco	Or is the knowledge of where the next year or two of your life will be spent too fatalistic?
2019-01-25 19:22:06	<--	gombobc (~user@2603:9000:a005:8e00:f14e:bbb5:4da2:d960) has quit (Ping timeout: 268 seconds)
2019-01-25 19:23:00	-->	pera (~pera@unaffiliated/pera) has joined #haskell
2019-01-25 19:23:12	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-25 19:23:16	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 19:23:25	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-25 19:23:28	<--	Frans-Willem (~quassel@5ED252C3.cm-7-3b.dynamic.ziggo.nl) has quit (Read error: Connection reset by peer)
2019-01-25 19:23:52	<--	shutdown_-h_now (~arjan@2001:1c06:1301:30e2:5547:f1ca:ce3a:d3e9) has quit (Ping timeout: 250 seconds)
2019-01-25 19:24:53	-->	Frans-Willem (~quassel@5ED252C3.cm-7-3b.dynamic.ziggo.nl) has joined #haskell
2019-01-25 19:24:56	<--	esp32_prog (~esp32_pro@178.18.54.206) has quit (Ping timeout: 240 seconds)
2019-01-25 19:25:23	Welkin	did you tell them you can rebuild their 80k loc legacy system in 100 hours?
2019-01-25 19:25:33	Welkin	because I've heard that before
2019-01-25 19:25:38	-->	toovs (~toovs@c-98-238-150-172.hsd1.ca.comcast.net) has joined #haskell
2019-01-25 19:26:17	boj	the optimistic words of the inexperienced
2019-01-25 19:27:04	Welkin	I actually delivered ahead of schedule on my first job
2019-01-25 19:27:20	boj	i think i did too. it was terrible, terrible software
2019-01-25 19:27:31	Welkin	I told thme 3 months when I had no idea how long it would take. I did work 80 hour weeks, but I delivered in 2.5 months with lots of feature creep
2019-01-25 19:27:53	-->	darithorn_test (~darithorn@75.174.234.76) has joined #haskell
2019-01-25 19:28:20	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 19:28:35	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 19:29:37	<--	SpinTensor (~SpinTenso@200116b804189a00be954201fda5bb05.dip.versatel-1u1.de) has quit (Quit: WeeChat 2.3)
2019-01-25 19:29:38	-->	snowgoggles (~snowgoggl@dhcp-c-b6-d2-83-34-5a.cpe.i-zoom.net) has joined #haskell
2019-01-25 19:31:33	<--	darithorn_test (~darithorn@75.174.234.76) has quit (Remote host closed the connection)
2019-01-25 19:32:51	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-25 19:33:06	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 19:33:11	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-25 19:33:25	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-25 19:33:31	-->	jao (~jao@pdpc/supporter/professional/jao) has joined #haskell
2019-01-25 19:35:15	suzu	were you rewarded for it?
2019-01-25 19:35:28	<--	Meowitskaitlin (~Meowitska@88-105-153-177.dynamic.dsl.as9105.com) has quit (Ping timeout: 245 seconds)
2019-01-25 19:36:26	<--	twopoint718 (~cjw@fsf/member/twopoint718) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-25 19:37:08	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 245 seconds)
2019-01-25 19:37:18	<--	lnostdal (~lnostdal@77.70.119.51) has quit (Ping timeout: 250 seconds)
2019-01-25 19:38:10	<--	yyy (~yyy@unaffiliated/tinnotl) has quit (Ping timeout: 250 seconds)
2019-01-25 19:38:19	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 19:38:33	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 19:40:14	-->	shutdown_-h_now (~arjan@2001:1c06:1301:30e2:7dce:3adb:9d5c:385e) has joined #haskell
2019-01-25 19:40:56	<--	chaosmasttter (~chaosmast@p2E50E0EF.dip0.t-ipconnect.de) has quit (Ping timeout: 240 seconds)
2019-01-25 19:41:55	-->	kakadu_ (~kakadu@217.71.235.234) has joined #haskell
2019-01-25 19:42:23	-->	twopoint718 (~cjw@173.229.8.61) has joined #haskell
2019-01-25 19:42:23	<--	twopoint718 (~cjw@173.229.8.61) has quit (Changing host)
2019-01-25 19:42:23	-->	twopoint718 (~cjw@fsf/member/twopoint718) has joined #haskell
2019-01-25 19:42:51	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-25 19:43:04	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 19:43:10	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-25 19:43:24	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-25 19:46:16	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 19:49:20	-->	kritzefitz (~kritzefit@dslb-084-063-088-165.084.063.pools.vodafone-ip.de) has joined #haskell
2019-01-25 19:49:45	<--	vk3wtf (~doc@2a07-a880-4601-1091-855c-3638-47f1-f49a.pool6.ovpn.com) has quit (Ping timeout: 252 seconds)
2019-01-25 19:50:39	elvishjerricco	Anyone tried to log all requests / responses (including bodies) with http-client?
2019-01-25 19:52:19	-->	lnostdal (~lnostdal@77.70.119.51) has joined #haskell
2019-01-25 19:53:09	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-25 19:53:24	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-25 19:55:35	<--	keepLearning512 (~keepLearn@106.51.31.245) has quit (Remote host closed the connection)
2019-01-25 19:56:49	johnw	elvishjerricco: I tend to just use mitmproxy
2019-01-25 19:57:08	<--	wroathe (~wroathe@23-30-253-203-static.hfc.comcastbusiness.net) has quit (Read error: Connection reset by peer)
2019-01-25 19:57:08	<--	pfurla_ (~pfurla@177.142.255.134) has quit (Ping timeout: 245 seconds)
2019-01-25 19:57:40	<--	lambdaman (~lambdaman@con08-vpn.calabrio.com) has quit (Remote host closed the connection)
2019-01-25 19:58:15	-->	unlink2 (~unlink2@dslc-082-082-094-018.pools.arcor-ip.net) has joined #haskell
2019-01-25 19:58:51	<--	unlink__ (~unlink2@dslc-082-082-094-065.pools.arcor-ip.net) has quit (Ping timeout: 246 seconds)
2019-01-25 19:59:17	-->	nfd9001 (~nfd9001@c-73-225-42-170.hsd1.wa.comcast.net) has joined #haskell
2019-01-25 19:59:29	-->	_kwstas (~konstanti@ppp079166196200.access.hol.gr) has joined #haskell
2019-01-25 20:00:17	-->	son0p (~ff@181.33.159.4) has joined #haskell
2019-01-25 20:00:36	-->	nyc (~nyc@unaffiliated/wli) has joined #haskell
2019-01-25 20:02:09	<--	Aquazi (uid312403@gateway/web/irccloud.com/x-nobbkztstgjmlxrg) has quit (Quit: Connection closed for inactivity)
2019-01-25 20:02:12	-->	chaosmasttter (~chaosmast@p2E50E0EF.dip0.t-ipconnect.de) has joined #haskell
2019-01-25 20:04:13	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 245 seconds)
2019-01-25 20:05:40	-->	keepLearning512 (~keepLearn@106.51.31.245) has joined #haskell
2019-01-25 20:06:28	elvishjerricco	johnw: Blegh. Having to setup a proxy server and a CA sounds like a major pain
2019-01-25 20:07:57	-->	gombobc (~user@2603:9000:a005:8e00:f522:4f84:d189:ce0b) has joined #haskell
2019-01-25 20:08:38	<--	snowgoggles (~snowgoggl@dhcp-c-b6-d2-83-34-5a.cpe.i-zoom.net) has quit (Ping timeout: 272 seconds)
2019-01-25 20:10:14	<--	keepLearning512 (~keepLearn@106.51.31.245) has quit (Ping timeout: 250 seconds)
2019-01-25 20:10:28	<--	hyperisco (~hyperisco@d192-186-117-226.home4.cgocable.net) has quit (Ping timeout: 245 seconds)
2019-01-25 20:10:40	<--	StoneToad (~StoneToad@ppp-199-167-119-157.storm.ca) has quit (Ping timeout: 250 seconds)
2019-01-25 20:10:59	-->	snowgoggles (~snowgoggl@dhcp-c-b6-d2-83-34-5a.cpe.i-zoom.net) has joined #haskell
2019-01-25 20:12:20	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-25 20:12:45	<--	kish` (~oracle@unaffiliated/oracle) has quit (Ping timeout: 268 seconds)
2019-01-25 20:13:07	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-25 20:13:07	 *	hackage cantor-pairing 0.1.1.0 - Convert data to and from a natural number representation  https://hackage.haskell.org/package/cantor-pairing-0.1.1.0 (identicalsnowflake)
2019-01-25 20:13:21	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-25 20:14:15	<--	osa1 (~omer@haskell/developer/osa1) has quit (Remote host closed the connection)
2019-01-25 20:14:18	<--	Welkin (~Welkin@047-227-169-219.res.spectrum.com) has quit (Quit: leaving)
2019-01-25 20:14:41	xenon-	why isn't Applicative deriveable, given Monad?
2019-01-25 20:14:56	<--	sonofentropy (~k@84-10-10-170.static.chello.pl) has quit (Ping timeout: 244 seconds)
2019-01-25 20:14:58	xenon-	in the spirit of DeriveFunctor
2019-01-25 20:15:41	lyxia	You can use DerivingVia    deriving Applicative via (Ap MyType)
2019-01-25 20:16:16	lyxia	oh wait no it's not called Ap...
2019-01-25 20:16:21	xenon-	huh
2019-01-25 20:16:37	lyxia	via (WrappedMonad MyType)
2019-01-25 20:17:03	-->	ltchen (~ltchen@host-92-30-204-54.as13285.net) has joined #haskell
2019-01-25 20:17:15	xenon-	how does this work? I thought we needed Monad and/or Applicative to be able to derive Functor, Foldable. https://bpaste.net/show/074c38995dc9
2019-01-25 20:17:24	-->	StoneToad (~StoneToad@ppp-199-167-119-155.storm.ca) has joined #haskell
2019-01-25 20:17:25	lyxia	DeriveFunctor actually needs to look at the definition of your type, it doesn't use an Applicative instance even if you define one.
2019-01-25 20:17:54	<--	sedeki (~textual@unaffiliated/sedeki) has quit (Ping timeout: 252 seconds)
2019-01-25 20:18:09	lyxia	GHC derives instances for Functor, Foldable, Traversable by generating custom code for them.
2019-01-25 20:18:31	<--	ltchen (~ltchen@host-92-30-204-54.as13285.net) has quit (Read error: No route to host)
2019-01-25 20:18:53	xenon-	so I guess it would not be able to do the same for a bit more complex type.. that's a bit disappointing
2019-01-25 20:19:38	-->	ltchen (~ltchen@host-92-30-204-54.as13285.net) has joined #haskell
2019-01-25 20:20:05	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 20:21:12	xenon-	can foldr be written using just a Monad instance?
2019-01-25 20:21:25	byorgey	no
2019-01-25 20:21:44	lyxia	It is pretty rare that a type has a useful Traversable instance that can't be derived.
2019-01-25 20:22:10	-->	matheus23 (~matheus23@2a02:8071:328f:6c00:daa6:1d22:c9c:fdfe) has joined #haskell
2019-01-25 20:22:49	-->	BartAdv (uid90451@gateway/web/irccloud.com/x-bizyrpljmlqmuzov) has joined #haskell
2019-01-25 20:23:02	geekosaur	this discussion suggests someone needs to go look at the typeclassopedia
2019-01-25 20:23:06	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-25 20:23:21	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-25 20:23:39	xenon-	I've read it, but would probably be useful to go through it again
2019-01-25 20:23:49	Solonarv	if foldr could be written using a Monad instance, Foldable would be a superclass of Monad
2019-01-25 20:23:51	xenon-	what typeclasses would we need to derive Foldable instance?
2019-01-25 20:24:02	<--	Mrbuck (~Mrbuck@ec2-34-200-164-101.compute-1.amazonaws.com) has quit (Remote host closed the connection)
2019-01-25 20:24:08	Heffalump	Foldable :-)
2019-01-25 20:24:19	-->	hyperisco (~hyperisco@d192-186-117-226.home4.cgocable.net) has joined #haskell
2019-01-25 20:24:19	__monty__	Solonarv: Not the other way around?
2019-01-25 20:24:45	Solonarv	__monty__: <*> can be implemented in terms of a Monad instance, therefore Applicative is a superclass of Monad
2019-01-25 20:25:08	__monty__	Oh, right.
2019-01-25 20:25:56	<--	nfd9001 (~nfd9001@c-73-225-42-170.hsd1.wa.comcast.net) has quit (Ping timeout: 240 seconds)
2019-01-25 20:26:03	__monty__	Wait, no, that aligns with what I thought. Applicative is now Monad and Monad is now Foldable, no?
2019-01-25 20:26:22	__monty__	Modulo the <*>.
2019-01-25 20:26:26	<--	deviantfero (~deviantfe@ip168-243-230-189.intercom.com.sv) has quit (Ping timeout: 240 seconds)
2019-01-25 20:27:09	Solonarv	I made an analogy between Applicative and Foldable
2019-01-25 20:27:12	xenon-	every Monad is Applicative and Functor. every Applicative is a Functor
2019-01-25 20:27:26	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 240 seconds)
2019-01-25 20:27:54	<--	LastTalon (~LastTalon@cpe-24-208-55-58.new.res.rr.com) has quit (Read error: Connection reset by peer)
2019-01-25 20:28:01	__monty__	Solonarv: Yep, you're right, and I was wrong twice : )
2019-01-25 20:28:06	-->	LastTalon (~LastTalon@cpe-24-208-55-58.new.res.rr.com) has joined #haskell
2019-01-25 20:28:19	__monty__	Thank god I don't do OOP anymore...
2019-01-25 20:28:31	<--	eschnett_ (~eschnett@66.97.27.10) has quit (Quit: eschnett_)
2019-01-25 20:28:31	-->	deviantfero (~deviantfe@ip168-243-230-189.intercom.com.sv) has joined #haskell
2019-01-25 20:28:32	-->	lambdaman (~lambdaman@tst-vpn.calabrio.com) has joined #haskell
2019-01-25 20:28:41	-->	oish (~charlie@228.25.169.217.in-addr.arpa) has joined #haskell
2019-01-25 20:28:47	<--	_kwstas (~konstanti@ppp079166196200.access.hol.gr) has quit (Quit: _kwstas)
2019-01-25 20:28:52	xenon-	it does seem a bit counterintuitive that Applicative is a superclass of Monad, not the other way around
2019-01-25 20:29:17	xenon-	instinctively, I would have thought that superclass == superset
2019-01-25 20:29:34	hyperisco	xenon-, it is a superset
2019-01-25 20:29:44	MarcelineVQ	If the methods of A can implement the methods of B, A must also be a B.
2019-01-25 20:29:46	-->	eschnett_ (~eschnett@66.97.27.10) has joined #haskell
2019-01-25 20:29:58	xenon-	hyperisco, superset in terms of features and power
2019-01-25 20:30:10	zachk	I guess that is kind of confusing
2019-01-25 20:30:26	<--	djanatyn (~djanatyn@ec2-18-209-155-56.compute-1.amazonaws.com) has quit (Remote host closed the connection)
2019-01-25 20:30:31	zachk	to me somethings descends/inherits from its superclass all features and may add new ones 
2019-01-25 20:30:39	-->	djanatyn (~djanatyn@ec2-18-209-155-56.compute-1.amazonaws.com) has joined #haskell
2019-01-25 20:30:43	<--	Meanirelli (~quassel@unaffiliated/amdphenomx4) has quit (Quit: No Ping reply in 180 seconds.)
2019-01-25 20:30:58	-->	milanj (~milan@87.116.183.132) has joined #haskell
2019-01-25 20:31:01	Solonarv	yes exactly
2019-01-25 20:31:08	<--	binq (~binq@99.156.186.141) has quit (Remote host closed the connection)
2019-01-25 20:31:15	Solonarv	"cars" is a superset of "red cars"
2019-01-25 20:31:43	Solonarv	and a red car has all the features of a car
2019-01-25 20:31:58	-->	Meanirelli (~quassel@unaffiliated/amdphenomx4) has joined #haskell
2019-01-25 20:32:58	zachk	i would more say vehicles is a superclass of cars 
2019-01-25 20:33:05	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-25 20:33:13	Solonarv	yes, that's a better example
2019-01-25 20:33:18	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-25 20:33:39	zachk	:) Solonarv just thought about your example a bit more and then never thought of english grammar and superset like that!
2019-01-25 20:34:09	xenon-	Objective C is a superset of C. every valid C program is a valid Objective C program
2019-01-25 20:34:41	zachk	c++ is a superset of C as well 
2019-01-25 20:34:44	MarcelineVQ	it doesn't help that super in common use means stronger/better but in stricter use just means above
2019-01-25 20:35:54	-->	Welkin (~Welkin@047-227-169-219.res.spectrum.com) has joined #haskell
2019-01-25 20:36:24	Welkin	is there an existing quasiquoter for multiline strings?
2019-01-25 20:36:52	Welkin	instead of having to do
2019-01-25 20:36:55	Welkin	"hello \"
2019-01-25 20:37:07	Welkin	"\world"
2019-01-25 20:37:10	nshepperd1	Superset of features vs superset of elements
2019-01-25 20:37:50	-->	aarvar (~foewfoiew@50.35.43.250) has joined #haskell
2019-01-25 20:38:00	Solonarv	Welkin: yes, I don't recall its name though
2019-01-25 20:38:33	zachk	concat/join after you intecalate newlines into a list of strings 
2019-01-25 20:39:09	Welkin	I'm writing this in my code as a literal
2019-01-25 20:39:15	Welkin	imagine a database query
2019-01-25 20:39:23	MarcelineVQ	it's called raw-strings-qq
2019-01-25 20:39:26	Welkin	actually it would be nice to have interpolation too
2019-01-25 20:39:43	-->	trcc (~trcc@85.191.91.108) has joined #haskell
2019-01-25 20:39:44	<--	korzq (~korzq@unaffiliated/korzq) has quit (Quit: ZNC - http://znc.in)
2019-01-25 20:39:48	Welkin	is there a package for that?
2019-01-25 20:39:56	MarcelineVQ	yep, raw-strings-qq
2019-01-25 20:39:58	Welkin	there should be based on what I know about quasiquotes in lisp
2019-01-25 20:40:06	Solonarv	@hackage interpolate
2019-01-25 20:40:06	lambdabot	http://hackage.haskell.org/package/interpolate
2019-01-25 20:40:15	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 20:40:32	MarcelineVQ	Oh for your stronger question? dunno, sorry blanked there
2019-01-25 20:40:39	Solonarv	doesn't say anything about multiline, but that should "just work" I think
2019-01-25 20:41:07	Solonarv	@hackage neat-interpolation
2019-01-25 20:41:07	lambdabot	http://hackage.haskell.org/package/neat-interpolation
2019-01-25 20:41:09	-->	amar (~amar@185.203.122.6) has joined #haskell
2019-01-25 20:41:19	-->	pfurla (~pfurla@2804:18:4809:29f3:3df5:6086:a00a:d6ee) has joined #haskell
2019-01-25 20:41:29	Solonarv	^ if you want Text
2019-01-25 20:41:33	--	amar is now known as Guest4974
2019-01-25 20:41:39	Welkin	thanks
2019-01-25 20:42:01	Welkin	I'm going to need this to write a database driver
2019-01-25 20:43:04	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-25 20:43:07	-->	blak3mill3r (aed5026c@gateway/web/freenode/ip.174.213.2.108) has joined #haskell
2019-01-25 20:43:18	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-25 20:44:07	<--	Guest51926 (~amar@cpc121556-lewi23-2-0-cust1623.2-4.cable.virginm.net) has quit (Ping timeout: 246 seconds)
2019-01-25 20:45:01	-->	doyougnu (doyougnu@128-193-154-26.ptpg.oregonstate.edu) has joined #haskell
2019-01-25 20:47:25	-->	nfd9001 (~nfd9001@c-73-225-42-170.hsd1.wa.comcast.net) has joined #haskell
2019-01-25 20:47:33	<--	nyc (~nyc@unaffiliated/wli) has quit (Ping timeout: 245 seconds)
2019-01-25 20:49:07	 *	hackage SecureHash-SHA3 0.1.1.0 - simple static linked SHA3 using private symbols and the ref impl  https://hackage.haskell.org/package/SecureHash-SHA3-0.1.1.0 (CarterSchonwald)
2019-01-25 20:49:36	-->	esp32_prog (~esp32_pro@178.18.54.206) has joined #haskell
2019-01-25 20:50:10	-->	darithorn_test (~darithorn@75.174.234.76) has joined #haskell
2019-01-25 20:50:17	<--	darithorn_test (~darithorn@75.174.234.76) has quit (Remote host closed the connection)
2019-01-25 20:50:40	-->	um1b0zu (~um1@38.88.168.107) has joined #haskell
2019-01-25 20:51:07	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 240 seconds)
2019-01-25 20:52:30	<--	supercoven_ (~quassel@dsl-hkibng42-5673cf-252.dhcp.inet.fi) has quit (Read error: Connection reset by peer)
2019-01-25 20:52:32	-->	lightandlight (sid135476@gateway/web/irccloud.com/x-ysxvyiqxvxoepiqr) has joined #haskell
2019-01-25 20:53:03	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-25 20:53:17	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-25 20:54:00	<--	snowgoggles (~snowgoggl@dhcp-c-b6-d2-83-34-5a.cpe.i-zoom.net) has quit (Ping timeout: 250 seconds)
2019-01-25 20:54:04	trcc	I am working on my first hackage package, but before I do an upload, I would like to try it locally. Is there any way to package it locally and try to use it via cabal?
2019-01-25 20:54:12	<--	esp32_prog (~esp32_pro@178.18.54.206) has quit (Ping timeout: 244 seconds)
2019-01-25 20:54:25	Solonarv	just build it normally?
2019-01-25 20:54:39	Solonarv	that's what happens when you use a package from hackage, too
2019-01-25 20:54:57	-->	amar (~amar@cpc121556-lewi23-2-0-cust1623.2-4.cable.virginm.net) has joined #haskell
2019-01-25 20:55:07	trcc	Solonarv: yes, but how do I import it from some project then?
2019-01-25 20:55:12	<--	OnkelTem (~onkeltem@unaffiliated/fantomas) has quit (Quit: WeeChat 1.9.1)
2019-01-25 20:55:21	--	amar is now known as Guest81334
2019-01-25 20:56:05	Solonarv	trcc: cabal has support for local dependencies; check https://cabal.readthedocs.io to see how
2019-01-25 20:56:11	trcc	thank you
2019-01-25 20:56:41	-->	Deide (~Deide@90.240.92.199) has joined #haskell
2019-01-25 20:56:53	dmwit	trcc: I would `cabal sdist` to make the thing you're going to upload, then unpack the generated tarball somewhere else and do the usual cabal dance in that new directory.
2019-01-25 20:58:26	<--	Guest4974 (~amar@185.203.122.6) has quit (Ping timeout: 240 seconds)
2019-01-25 20:58:35	trcc	thanks!
2019-01-25 20:58:54	-->	ph88 (~ph88@a79-169-57-95.cpe.netcabo.pt) has joined #haskell
2019-01-25 20:59:01	__monty__	Hmm, yeah it's totally the superset of features vs superset of objects (all monads are applicatives but not vice versa) distinction that trips me up.
2019-01-25 20:59:27	hyperisco	it is the same reason people are confused about ⇒ vs ⇐
2019-01-25 21:00:40	hyperisco	in that there are two ways to explain things
2019-01-25 21:00:56	<--	mounty (~mounty@n106-71-211-213.rdl2.qld.optusnet.com.au) has quit (Ping timeout: 240 seconds)
2019-01-25 21:01:20	-->	mounty (~mounty@n106-71-211-213.rdl2.qld.optusnet.com.au) has joined #haskell
2019-01-25 21:01:26	dmwit	(.) :: (c ⇐ a) ⇐ (b ⇐ a) ⇐ (c ⇐ b)
2019-01-25 21:01:42	hyperisco	you either see it as "Applicative plus these definitions gives you Monad", hence ⇒, or you read it as "Monad gives you these definitions and Applicative"
2019-01-25 21:01:45	hyperisco	hence ⇐
2019-01-25 21:01:56	-->	aplainzetakind (~dk@2E8BD6FE.catv.pool.telekom.hu) has joined #haskell
2019-01-25 21:02:54	<--	lambdaman (~lambdaman@tst-vpn.calabrio.com) has quit (Ping timeout: 246 seconds)
2019-01-25 21:04:22	__monty__	So, OOP inheritance *is* backwards right, where superclasses necessarily have *less* features?
2019-01-25 21:04:24	<--	niklasl (~niklasl@c83-253-14-109.bredband.comhem.se) has quit (Ping timeout: 250 seconds)
2019-01-25 21:04:36	-->	esp32_prog (~esp32_pro@178.18.54.206) has joined #haskell
2019-01-25 21:04:57	hyperisco	how is that backwards?
2019-01-25 21:05:02	<--	Welkin (~Welkin@047-227-169-219.res.spectrum.com) has quit (Quit: leaving)
2019-01-25 21:05:21	hyperisco	it seems counterintuitive to extend something and reduce what it can do
2019-01-25 21:05:45	<--	kakadu_ (~kakadu@217.71.235.234) has left #haskell ("Konversation terminated!")
2019-01-25 21:05:47	<--	Guest81334 (~amar@cpc121556-lewi23-2-0-cust1623.2-4.cable.virginm.net) has quit (Ping timeout: 268 seconds)
2019-01-25 21:06:24	__monty__	Well, Monad is a *super*class of Applicative, right? Yet it can do more, not less.
2019-01-25 21:06:26	-->	niklasl (~niklasl@c83-253-14-109.bredband.comhem.se) has joined #haskell
2019-01-25 21:06:29	<--	crobbins (~crobbins@2601:2c7:780:416e:1d32:59b9:89f0:aa06) has quit (Remote host closed the connection)
2019-01-25 21:06:41	hyperisco	no it isn't
2019-01-25 21:06:53	doyougnu	no applicative is a superclass of monad
2019-01-25 21:07:13	<--	kitl_ (~kitlangto@198-27-223-170.fiber.dynamic.sonic.net) has quit (Remote host closed the connection)
2019-01-25 21:07:14	__monty__	Wow, turned it around no less than 3 times now.
2019-01-25 21:07:15	doyougnu	or monad `entails` applicative
2019-01-25 21:07:28	-->	kitl_ (~kitlangto@198-27-223-170.fiber.dynamic.sonic.net) has joined #haskell
2019-01-25 21:07:43	-->	crobbins_ (~crobbins@2601:2c7:780:416e:1d32:59b9:89f0:aa06) has joined #haskell
2019-01-25 21:08:55	<--	crobbins_ (~crobbins@2601:2c7:780:416e:1d32:59b9:89f0:aa06) has quit (Remote host closed the connection)
2019-01-25 21:09:06	-->	sonofentropy (~k@84-10-10-170.static.chello.pl) has joined #haskell
2019-01-25 21:09:07	<--	deviantfero (~deviantfe@ip168-243-230-189.intercom.com.sv) has quit (Ping timeout: 240 seconds)
2019-01-25 21:09:12	<--	esp32_prog (~esp32_pro@178.18.54.206) has quit (Ping timeout: 246 seconds)
2019-01-25 21:10:38	<--	pfurla (~pfurla@2804:18:4809:29f3:3df5:6086:a00a:d6ee) has quit (Ping timeout: 268 seconds)
2019-01-25 21:11:21	-->	deviantfero (~deviantfe@ip168-243-230-189.intercom.com.sv) has joined #haskell
2019-01-25 21:11:25	<--	doomslayer (d07a65ee@gateway/web/cgi-irc/kiwiirc.com/ip.208.122.101.238) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2019-01-25 21:12:03	geekosaur	"Applicative is a prerequisite for Monad"
2019-01-25 21:12:48	hyperisco	which could still be written ⇐ if so chosen
2019-01-25 21:13:16	__monty__	This feels like the most patient help #haskell has ever given : ) Even though it's just repeating the same thing basically.
2019-01-25 21:13:23	<--	gxt (~gxt@b2b-78-94-156-186.unitymedia.biz) has quit (Ping timeout: 245 seconds)
2019-01-25 21:13:26	<--	alx741 (~alx741@181.196.68.162) has quit (Ping timeout: 240 seconds)
2019-01-25 21:13:50	<--	dpyro (~dpyro@66-169-160-49.dhcp.ftwo.tx.charter.com) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-25 21:14:30	Amras	in the case of oop, you can use a subclass where a superclass is needed, but not vice versa
2019-01-25 21:14:59	Amras	you can use a monad where an applicative is needed but not vice versa
2019-01-25 21:15:45	-->	dpyro (~dpyro@66-169-160-49.dhcp.ftwo.tx.charter.com) has joined #haskell
2019-01-25 21:15:50	Amras	a monad *has* everything that an applicative has, plus some extra
2019-01-25 21:16:12	<--	um1b0zu (~um1@38.88.168.107) has quit (Ping timeout: 246 seconds)
2019-01-25 21:16:27	hyperisco	if we had a powerful enough language we wouldn't need to stipulate Applicative is a superclass of Monad
2019-01-25 21:16:41	hyperisco	just sayin'
2019-01-25 21:17:18	Amras	hm?
2019-01-25 21:18:01	hyperisco	because that relationship is just a theorem
2019-01-25 21:18:10	-->	korzq (~korzq@2a04:c44:e00:51d7:4d3:58ff:fe00:c9b) has joined #haskell
2019-01-25 21:18:10	<--	korzq (~korzq@2a04:c44:e00:51d7:4d3:58ff:fe00:c9b) has quit (Changing host)
2019-01-25 21:18:10	-->	korzq (~korzq@unaffiliated/korzq) has joined #haskell
2019-01-25 21:19:40	<--	lawlesseel (~lawlessee@gateway/tor-sasl/lawlesseel) has quit (Remote host closed the connection)
2019-01-25 21:20:02	-->	lawlesseel (~lawlessee@gateway/tor-sasl/lawlesseel) has joined #haskell
2019-01-25 21:20:15	-->	fen (518372ac@gateway/web/freenode/ip.81.131.114.172) has joined #haskell
2019-01-25 21:20:26	fen	maybe build cant use the scott encoding
2019-01-25 21:20:56	fen	but maybe its fine because it just folds over it, and never does a tail call
2019-01-25 21:21:03	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 21:21:18	fen	scott is better than church as an encoding apparently because it has constant time get
2019-01-25 21:21:43	<--	son0p (~ff@181.33.159.4) has quit (Ping timeout: 245 seconds)
2019-01-25 21:22:13	fen	but, build does not use this property, and cant use (forall b. a -> Scott a -> b), it has to be (forall b. a -> b -> b), which is Church
2019-01-25 21:23:00	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-25 21:23:06	<--	rcat (~us3r@51.15.69.111) has quit (Quit: leaving)
2019-01-25 21:23:14	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-25 21:23:34	-->	son0p (~ff@181.136.99.9) has joined #haskell
2019-01-25 21:23:51	fen	maybe thats wrong... can build use the scott encoding?
2019-01-25 21:24:26	<--	dbmikus (~dbmikus@172.93.11.58) has quit (Ping timeout: 240 seconds)
2019-01-25 21:24:41	-->	lambdaman (~lambdaman@tst-vpn.calabrio.com) has joined #haskell
2019-01-25 21:25:26	fen	build xs = xs (:) []
2019-01-25 21:25:42	fen	:t (:)
2019-01-25 21:25:43	lambdabot	a -> [a] -> [a]
2019-01-25 21:25:51	fen	so it has to be Church?
2019-01-25 21:25:51	-->	knupfer (~Thunderbi@200116b82cca3100f69634fffef0b45f.dip.versatel-1u1.de) has joined #haskell
2019-01-25 21:26:18	fen	[a] /= Scott a of the middle type of the signature of cons
2019-01-25 21:26:42	-->	alx741 (~alx741@186.178.110.88) has joined #haskell
2019-01-25 21:27:36	fen	seems confusing that Scott encoding is sold as the better encoding, but that the Church encoding seems to work better here
2019-01-25 21:27:49	fen	am i missing something?
2019-01-25 21:28:08	_deepfire	phadej: filed a PR against hackage.head -- I'm trying to get it working with fresh haskell-updates branch (that's got ghcHEAD == ghc-8.8 now)
2019-01-25 21:29:14	<--	alx741 (~alx741@186.178.110.88) has quit (Client Quit)
2019-01-25 21:29:43	<--	lambdaman (~lambdaman@tst-vpn.calabrio.com) has quit (Ping timeout: 272 seconds)
2019-01-25 21:30:12	_deepfire	phadej: (all in context of Nixpkgs, of course..)
2019-01-25 21:30:27	<--	eschnett_ (~eschnett@66.97.27.10) has quit (Quit: eschnett_)
2019-01-25 21:30:49	-->	snowgoggles (~snowgoggl@dhcp-c-b6-d2-83-34-5a.cpe.i-zoom.net) has joined #haskell
2019-01-25 21:31:19	-->	sedeki (~textual@unaffiliated/sedeki) has joined #haskell
2019-01-25 21:31:39	-->	merijn (~merijn@a212-238-239-156.adsl.xs4all.nl) has joined #haskell
2019-01-25 21:32:42	fen	\query lambdabot
2019-01-25 21:32:52	fen	...
2019-01-25 21:33:18	-->	nyc (~nyc@unaffiliated/wli) has joined #haskell
2019-01-25 21:33:18	--	toure is now known as toure|gone
2019-01-25 21:33:24	fen	:t \f s ->let churchUnfold f q c n = go q where go q = maybe n (\(x,q') -> x `c` go q') (f q) in churchUnfold f s (:) [] uncons
2019-01-25 21:33:25	lambdabot	error:
2019-01-25 21:33:26	lambdabot	    • Couldn't match expected type ‘([a0] -> Maybe (a0, [a0])) -> t1’
2019-01-25 21:33:26	lambdabot	                  with actual type ‘[a]’
2019-01-25 21:33:36	sedeki	how can I show the definition of a type class in GHCi?
2019-01-25 21:33:43	sedeki	e.g. Maybe
2019-01-25 21:34:24	fen	:t s ->let churchUnfold f q c n = go q where go q = maybe n (\(x,q') -> x `c` go q') (f q) in churchUnfold uncons s (:) [] 
2019-01-25 21:34:25	lambdabot	error: parse error on input ‘->’
2019-01-25 21:34:28	fen	:t \s ->let churchUnfold f q c n = go q where go q = maybe n (\(x,q') -> x `c` go q') (f q) in churchUnfold uncons s (:) [] 
2019-01-25 21:34:29	lambdabot	[a] -> [a]
2019-01-25 21:34:31	Solonarv	sedeki: Maybe isn't a type class
2019-01-25 21:34:34	fen	sorry...
2019-01-25 21:34:34	sedeki	eh
2019-01-25 21:34:37	sedeki	I mean the instance
2019-01-25 21:35:01	Solonarv	that isn't possible in GHCi
2019-01-25 21:35:14	Solonarv	you can see the instance head, but not the full definition
2019-01-25 21:35:20	sedeki	ok
2019-01-25 21:35:29	geekosaur	you can'y in general, unless you have loaded its source
2019-01-25 21:35:47	<--	merijn (~merijn@a212-238-239-156.adsl.xs4all.nl) has quit (Ping timeout: 240 seconds)
2019-01-25 21:36:34	<--	nfd9001 (~nfd9001@c-73-225-42-170.hsd1.wa.comcast.net) has quit (Ping timeout: 244 seconds)
2019-01-25 21:36:38	-->	_kwstas (~konstanti@ppp079166196200.access.hol.gr) has joined #haskell
2019-01-25 21:39:04	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 250 seconds)
2019-01-25 21:39:31	fen	% churchUnfold f q c n = go q where go q = maybe n (\(x,q') -> x `c` go q') (f q)
2019-01-25 21:39:31	yahb	fen: 
2019-01-25 21:39:42	fen	% :t \s -> build (churchUnfold uncons s)
2019-01-25 21:39:42	yahb	fen: [a] -> [a]
2019-01-25 21:40:04	fen	% :t churchUnfold
2019-01-25 21:40:05	yahb	fen: (t1 -> Maybe (t2, t1)) -> t1 -> (t2 -> t3 -> t3) -> t3 -> t3
2019-01-25 21:40:41	fen	(t2 -> t3 -> t3) -> t3 -> t3 -- thats church encoding, right? is there a way to write this with scott encoding?
2019-01-25 21:40:49	fen	or any reason not to?
2019-01-25 21:41:41	o1lo01ol1o	Is is there a pre-rolled catamorphism package for catamorphisms (and monadic catamorphims) on vanilla lists?
2019-01-25 21:41:44	<--	nyc (~nyc@unaffiliated/wli) has quit (Ping timeout: 244 seconds)
2019-01-25 21:41:51	johnw	recursion-schemes?
2019-01-25 21:42:18	lyxia	base has foldr...
2019-01-25 21:42:23	<--	hyperisco (~hyperisco@d192-186-117-226.home4.cgocable.net) has quit (Ping timeout: 272 seconds)
2019-01-25 21:42:33	johnw	hahaha
2019-01-25 21:42:36	johnw	lyxia==
2019-01-25 21:42:38	johnw	lyxia++
2019-01-25 21:42:58	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-25 21:43:12	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-25 21:43:17	suzu	loll
2019-01-25 21:43:22	fen	:t foldr
2019-01-25 21:43:23	o1lo01ol1o	lol, yeah, but I can't get this scanM-to-any-monoid to work
2019-01-25 21:43:23	lambdabot	Foldable t => (a -> b -> b) -> b -> t a -> b
2019-01-25 21:43:39	johnw	show us what you have so far?
2019-01-25 21:43:55	<--	asjo (~asjo@virgil.koldfront.dk) has quit (Quit: Coyote finally caught me)
2019-01-25 21:43:56	o1lo01ol1o	wait, which might actually just be foldlM for some monoid
2019-01-25 21:44:00	-->	nfd9001 (~nfd9001@c-73-225-42-170.hsd1.wa.comcast.net) has joined #haskell
2019-01-25 21:44:22	johnw	or just...
2019-01-25 21:44:23	johnw	:t foldM
2019-01-25 21:44:24	lambdabot	(Monad m, Foldable t) => (b -> a -> m b) -> b -> t a -> m b
2019-01-25 21:44:32	fen	wait what? thought it was not ok to mix aritys!?
2019-01-25 21:45:06	fen	all the examples treat lists and nats independently 
2019-01-25 21:45:08	<--	sonofentropy (~k@84-10-10-170.static.chello.pl) has quit (Quit: sonofentropy)
2019-01-25 21:45:30	-->	hyperisco (~hyperisco@d192-186-117-226.static.comm.cgocable.net) has joined #haskell
2019-01-25 21:45:38	fen	is that to change with QuantifiedConstraints ?
2019-01-25 21:45:46	-->	asjo (~asjo@virgil.koldfront.dk) has joined #haskell
2019-01-25 21:45:49	<--	machinedgod (~machinedg@207.107.69.53) has quit (Quit: leaving)
2019-01-25 21:45:56	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 240 seconds)
2019-01-25 21:45:59	fen	like, we can have forall a. Monoid (f a) => now
2019-01-25 21:46:12	Solonarv	fen: what are you confused about?
2019-01-25 21:46:26	-->	gxt (~gxt@2a02:908:e851:4020:567:4420:3bb5:65db) has joined #haskell
2019-01-25 21:47:07	fen	well like it would be fine to have Nat = [()] and just use get/set for pred/succ
2019-01-25 21:47:20	fen	but it mixes up the arities 
2019-01-25 21:47:50	<--	twopoint718 (~cjw@fsf/member/twopoint718) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-25 21:47:51	fen	Nat is a Monoid. [()] is also a monoid, because forall a. [a] is a Monoid
2019-01-25 21:47:52	Solonarv	that has been fine since Haskell 98
2019-01-25 21:48:18	fen	couldnt write free Eq instances though
2019-01-25 21:48:21	fen	Free*
2019-01-25 21:48:30	fen	anyway, nvm
2019-01-25 21:48:46	xenon-	anyone else thinks it was a mistake to implemented IsList instance for NonEmpty?
2019-01-25 21:48:57	<--	nfd9001 (~nfd9001@c-73-225-42-170.hsd1.wa.comcast.net) has quit (Ping timeout: 268 seconds)
2019-01-25 21:49:44	fen	but really its because [] is a MonadPluss
2019-01-25 21:49:51	fen	and thats the arity thing again
2019-01-25 21:49:53	<--	fmixing (~fmixing@5.18.98.152) has quit (Remote host closed the connection)
2019-01-25 21:49:54	Solonarv	there are unfortunately a lot of IsList instances like that
2019-01-25 21:50:41	-->	fmixing (~fmixing@5.18.98.152) has joined #haskell
2019-01-25 21:50:46	fen	Solonarv: also confused about Scott encoded build
2019-01-25 21:51:17	pikajude	not really, i like IsList for NonEmpty
2019-01-25 21:51:39	-->	mijicd (~dmijic@p200300E3ABEA2217F2D269EB621700B9.dip0.t-ipconnect.de) has joined #haskell
2019-01-25 21:51:56	xenon-	[] :: NonEmpty Int 
2019-01-25 21:52:21	fen	whats the point in that?
2019-01-25 21:52:26	fen	its wrong
2019-01-25 21:52:45	--	wrengr_away is now known as wrengr
2019-01-25 21:52:47	fen	Free Nonempty should not have empty leaves
2019-01-25 21:52:59	fen	otherwise you would just use Free []
2019-01-25 21:53:07	fen	and have all empty branches and stuff.
2019-01-25 21:53:19	fen	the whole point of nonempty is it strictly should not have empty!
2019-01-25 21:53:29	<--	mijicd (~dmijic@p200300E3ABEA2217F2D269EB621700B9.dip0.t-ipconnect.de) has quit (Remote host closed the connection)
2019-01-25 21:53:32	pikajude	sure
2019-01-25 21:53:41	pikajude	but i'm not likely to type [] :: NonEmpty Int
2019-01-25 21:53:55	pikajude	IsList is generally used for values that are known at compile-time
2019-01-25 21:53:56	fen	:t [] :: NonEmpty Int
2019-01-25 21:53:58	lambdabot	error:
2019-01-25 21:53:58	lambdabot	    • Expected a type, but ‘'NonEmpty Int’ has kind ‘NonEmptyList a0’
2019-01-25 21:53:59	lambdabot	    • In an expression type signature: NonEmpty Int
2019-01-25 21:54:06	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 21:54:38	Solonarv	uhhh... clearly this isn't the right NonEmpty
2019-01-25 21:54:46	pikajude	that looks like the wrong nonempty
2019-01-25 21:55:02	xenon-	fen, that's what I'm saying, OverloadedLists shouldn't work with NonEmpty (unless IsList interfaced can be fixed, so that types like NonEmpty can report compile-time errors)
2019-01-25 21:55:03	<--	fmixing (~fmixing@5.18.98.152) has quit (Ping timeout: 245 seconds)
2019-01-25 21:55:40	Solonarv	% [] :: NonEmpty Int
2019-01-25 21:55:40	yahb	Solonarv: *** Exception: NonEmpty.fromList: empty list
2019-01-25 21:55:58	pikajude	% let x :: NonEmpty Int = undefined
2019-01-25 21:55:58	yahb	pikajude: 
2019-01-25 21:56:01	fen	for list we have ([a] -> Maybe (a,[a])) that is, we cant write ([a] -> (a,Maybe [a])) safely, because there is not alway a value
2019-01-25 21:56:03	pikajude	fair enough yahb
2019-01-25 21:56:08	Solonarv	better support for compile-term errors related to overloaded literals would be nice, yes
2019-01-25 21:56:11	pikajude	is that a parse error?
2019-01-25 21:56:13	fen	for nonempty we have the second type for get
2019-01-25 21:56:26	Solonarv	(yahb is a bot btw)
2019-01-25 21:56:41	pikajude	right
2019-01-25 21:56:45	-->	iLoVue (~DinoJS@41.104.84.203) has joined #haskell
2019-01-25 21:57:07	-->	nyc (~nyc@unaffiliated/wli) has joined #haskell
2019-01-25 21:57:09	fen	interestingly, we can have (f a -> (Maybe a,Maybe f a))
2019-01-25 21:57:14	Solonarv	this problem isn't exclusive to IsList or NonEmpty, though
2019-01-25 21:57:15	-->	pie__ (~pie_@unaffiliated/pie-/x-0787662) has joined #haskell
2019-01-25 21:57:27	<--	pie_ (~pie_@unaffiliated/pie-/x-0787662) has quit (Remote host closed the connection)
2019-01-25 21:57:27	<--	matheus23 (~matheus23@2a02:8071:328f:6c00:daa6:1d22:c9c:fdfe) has quit (Ping timeout: 252 seconds)
2019-01-25 21:57:32	pikajude	yeah, Data.List.NonEmpty also has a fromList function
2019-01-25 21:57:34	Solonarv	it also applies to numeric literals, for example
2019-01-25 21:57:35	fen	which corresponds to skip, something which can have empties all through the container
2019-01-25 21:57:37	pikajude	which suffers the same issue
2019-01-25 21:57:52	Solonarv	oh I mean partial *functions* are one thing
2019-01-25 21:58:17	Solonarv	literals which are a hidden error are a different annoyance
2019-01-25 21:58:26	pikajude	oh
2019-01-25 21:58:44	pikajude	that's true, although supercompilation in ghc is quite a difficult problem afair
2019-01-25 21:58:51	-->	millerti (~millerti@cpe-66-24-91-119.stny.res.rr.com) has joined #haskell
2019-01-25 21:58:57	fen	and the next extension is to (f a -> (Either a j,Maybe f a)), where j is the index correpsonding to various different empty spaces...
2019-01-25 21:59:11	-->	amar_ (~amar@cpc121556-lewi23-2-0-cust1623.2-4.cable.virginm.net) has joined #haskell
2019-01-25 21:59:23	suzu	ｓｕｐｅｒｃｏｍｐｉｌａｔｉｏｎ
2019-01-25 21:59:27	suzu	that sounds so tremendous
2019-01-25 21:59:31	<--	takuan (~takuan@178-116-225-60.access.telenet.be) has quit (Remote host closed the connection)
2019-01-25 21:59:33	pikajude	it's like compilation, but more super-er
2019-01-25 21:59:49	suzu	should i feel guilty when i don't newtype wrap things
2019-01-25 22:00:04	suzu	i've got some Text -> Text -> Text -> Maybe User kinda shenanigans going on
2019-01-25 22:00:25	suzu	i should.. do something about that eventually
2019-01-25 22:00:48	__monty__	suzu: A simple "solution" is type synonyms. Then at least you can signal intent.
2019-01-25 22:01:00	suzu	that doesn't solve very much of anything
2019-01-25 22:01:10	fen	generally we have (Mono r => f a -> (r a,f a))
2019-01-25 22:01:12	-->	nbloomf (~nbloomf@2600:1700:83e0:1f40:6d74:a91e:18fc:6759) has joined #haskell
2019-01-25 22:01:13	suzu	it's all the same to the compiler. doesn't prevent bugs
2019-01-25 22:01:29	suzu	it does let me read my own code and spot the problem faster, i suppose
2019-01-25 22:01:43	<--	oish (~charlie@228.25.169.217.in-addr.arpa) has quit (Ping timeout: 245 seconds)
2019-01-25 22:01:52	Solonarv	supercompilation: main = print (fibonacci (10^21)) takes forever to compile but runs near instantly ;)
2019-01-25 22:02:16	-->	jonatan_ (~nate@h77-53-70-163.cust.a3fiber.se) has joined #haskell
2019-01-25 22:02:22	fen	what about where iterate (+0) 0 completes instantly
2019-01-25 22:02:31	fen	> iterate (+0) 0
2019-01-25 22:02:33	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-25 22:02:33	lambdabot	 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0...
2019-01-25 22:02:34	<--	jonatan_ (~nate@h77-53-70-163.cust.a3fiber.se) has quit (Client Quit)
2019-01-25 22:02:40	__monty__	suzu: Hence words like simple, i.e. it doesn't really change anything and "solution" as in it doesn't actually solve the problem.
2019-01-25 22:02:51	suzu	hehe
2019-01-25 22:02:52	fen	> last $ iterate (+0) 0
2019-01-25 22:02:56	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-25 22:02:58	lambdabot	 mueval-core: Time limit exceeded
2019-01-25 22:03:10	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-25 22:03:14	Solonarv	ah yes, that's an actually useful example ;)
2019-01-25 22:03:23	<--	trcc (~trcc@85.191.91.108) has quit (Remote host closed the connection)
2019-01-25 22:03:48	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 245 seconds)
2019-01-25 22:04:15	Amras	does supercompilation on infinite sequences/loops fail, freeze up, or give up and fall back to non-super?
2019-01-25 22:04:27	fen	> foldMap (repeat mempty) :: Int
2019-01-25 22:04:29	lambdabot	 error:
2019-01-25 22:04:30	lambdabot	     • Couldn't match expected type ‘Int’ with actual type ‘[a1] -> m0’
2019-01-25 22:04:30	lambdabot	     • Probable cause: ‘foldMap’ is applied to too few arguments
2019-01-25 22:04:36	xenon-	> foldMap
2019-01-25 22:04:36	Solonarv	depends on the sequence - consider the collatz conjecture
2019-01-25 22:04:38	lambdabot	 error:
2019-01-25 22:04:38	lambdabot	     • No instance for (Typeable a0)
2019-01-25 22:04:38	lambdabot	         arising from a use of ‘show_M76300600538753274809274’
2019-01-25 22:04:42	xenon-	:t foldMap
2019-01-25 22:04:43	lambdabot	(Monoid m, Foldable t) => (a -> m) -> t a -> m
2019-01-25 22:04:57	fen	> concat (repeat mempty) :: [Int]
2019-01-25 22:05:00	xenon-	> foldMap show [1..5]
2019-01-25 22:05:03	lambdabot	 mueval-core: Time limit exceeded
2019-01-25 22:05:03	lambdabot	 "12345"
2019-01-25 22:05:21	 *	Clint squints.
2019-01-25 22:05:26	-->	doomslayer (6806e3bc@gateway/web/cgi-irc/kiwiirc.com/ip.104.6.227.188) has joined #haskell
2019-01-25 22:06:27	fen	> foldr (.) id (repeat id) 0
2019-01-25 22:06:33	lambdabot	 mueval-core: Time limit exceeded
2019-01-25 22:06:46	<--	doomslayer (6806e3bc@gateway/web/cgi-irc/kiwiirc.com/ip.104.6.227.188) has left #haskell
2019-01-25 22:06:48	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 250 seconds)
2019-01-25 22:07:26	fen	it cant eve do id . id = id
2019-01-25 22:07:39	-->	yuon (~jonathan@host-78-129-49-49.dynamic.voo.be) has joined #haskell
2019-01-25 22:07:41	fen	hardly super
2019-01-25 22:07:51	<--	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has quit (Ping timeout: 256 seconds)
2019-01-25 22:10:07	fen	to be fair, all the most difficult problems are like this. e.g. a sin wave of some frequency has a pretty low complexity representation, but converging quickly on this with a learning algorithm starting from a discrete representation is pretty tough
2019-01-25 22:11:07	fen	you could *tell* it to do a fourier transform, but if it has to learn that...
2019-01-25 22:12:52	<--	yuon (~jonathan@host-78-129-49-49.dynamic.voo.be) has quit (Ping timeout: 250 seconds)
2019-01-25 22:12:55	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-25 22:13:11	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-25 22:13:40	<--	Big_G (~Big_G@50-46-197-243.evrt.wa.frontiernet.net) has quit (Quit: Leaving)
2019-01-25 22:13:56	<--	johnw (~johnw@haskell/developer/johnw) has quit (Ping timeout: 240 seconds)
2019-01-25 22:14:20	<--	_kwstas (~konstanti@ppp079166196200.access.hol.gr) has quit (Quit: _kwstas)
2019-01-25 22:14:21	-->	berndl (~bernd@ip5f5bf384.dynamic.kabel-deutschland.de) has joined #haskell
2019-01-25 22:14:30	-->	johnw (~johnw@haskell/developer/johnw) has joined #haskell
2019-01-25 22:16:44	xenon-	> head $ 1 :| [2,3]
2019-01-25 22:16:46	lambdabot	 error:
2019-01-25 22:16:46	lambdabot	     • Data constructor not in scope: (:|) :: Integer -> [Integer] -> t
2019-01-25 22:16:47	lambdabot	     • Perhaps you meant one of these:
2019-01-25 22:17:51	zachk	> head $ 1 : [2,3] 
2019-01-25 22:17:53	lambdabot	 1
2019-01-25 22:18:10	Solonarv	% head $ 1 :| [2,3]
2019-01-25 22:18:10	yahb	Solonarv: ; <interactive>:92:1: error:; Ambiguous occurrence `head'; It could refer to either `Data.List.NonEmpty.head', imported from `Data.List.NonEmpty'; or `Prelude.head', imported from `Prelude' (and originally defined in `GHC.List')
2019-01-25 22:18:15	-->	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has joined #haskell
2019-01-25 22:18:19	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Quit: rcdilorenzo)
2019-01-25 22:18:36	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 22:18:36	xenon-	% length $ 1 :| [2,3]
2019-01-25 22:18:37	yahb	xenon-: ; <interactive>:93:1: error:; Ambiguous occurrence `length'; It could refer to either `Data.List.NonEmpty.length', imported from `Data.List.NonEmpty'; or `Prelude.length', imported from `Prelude' (and originally defined in `Data.Foldable')
2019-01-25 22:18:47	xenon-	:-O
2019-01-25 22:19:14	Solonarv	grrr
2019-01-25 22:19:31	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 22:19:39	Solonarv	container modules defining monomorphic variants of typeclass operations is a pet peeve of mine
2019-01-25 22:19:56	fen	the problem is, the paper saying the Scott encoding should be used seems to justify that in a way that does not seem relevant to the use case above
2019-01-25 22:20:07	fen	which seems to discourage learning it
2019-01-25 22:20:08	Solonarv	% Data.Foldable.length $ 1 :| [2, 3]
2019-01-25 22:20:08	yahb	Solonarv: 3
2019-01-25 22:20:21	-->	yyy (~yyy@unaffiliated/tinnotl) has joined #haskell
2019-01-25 22:20:35	berndl	How do you guys which modules go under Data and which go under Control?
2019-01-25 22:21:04	berndl	It seems to me that data types go in modules under Data and type classes go in modules under Control.
2019-01-25 22:21:05	fen	but to be sure this was correct, that it is not the correct thing to use, and so not to bother learning it, you would have to learn about it well enough to trust that 
2019-01-25 22:21:20	xenon-	Foldable is typeclass
2019-01-25 22:21:39	Solonarv	berndl: the distinction is pretty arbitrary tbh
2019-01-25 22:21:49	berndl	Solonarv: oh no...
2019-01-25 22:22:51	<--	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has quit (Client Quit)
2019-01-25 22:22:59	fen	it would be nice to have design choices that are well justified, but if that means learning everything that is not the correct thing to use, it could take too long!
2019-01-25 22:23:07	-->	rcdilorenzo (~rcdiloren@cpe-76-182-19-180.nc.res.rr.com) has joined #haskell
2019-01-25 22:23:29	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-25 22:23:57	geekosaur	it's Haskell; we often encode control as data, so it's a fairly meaningless distinction
2019-01-25 22:24:03	fen	normally when there are options, an abstraction is available, so is there something that captures both these types of encoding? or is that not sane...
2019-01-25 22:24:39	geekosaur	(consider that laziness lets you write as a function what normally would have to be a language construct)
2019-01-25 22:26:24	fen	its a nice class Mono r => Get_r r f where get_r :: f a -> (r a,f a) 
2019-01-25 22:26:34	fen	but then this Mono encoding is troublesome 
2019-01-25 22:26:44	fen	r a = (i,a) works
2019-01-25 22:26:56	Solonarv	@quote simple.linked.lists
2019-01-25 22:26:56	lambdabot	Solonarv says: simple linked lists are not a particularly great *data* structure, but in combination with laziness they make a pretty good *control* structure
2019-01-25 22:27:13	fen	then you get class Get_i i f where get_r :: f a -> ((i,a),f a)
2019-01-25 22:27:14	-->	kadoban (~mud@unaffiliated/kadoban) has joined #haskell
2019-01-25 22:27:40	fen	but then there is this problem with the `i' that it is costly to convert to and from
2019-01-25 22:27:43	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 244 seconds)
2019-01-25 22:27:51	geekosaur	yep. also we have Control.Monad which seems hard to argue as "control" until you consider that the free monad encodes them as data
2019-01-25 22:29:01	fen	whereas if Mono r => r a = f a = (a,forall b. f b), then the container serving instead of `i' can be folded over with zero cost because of fusion
2019-01-25 22:29:25	berndl	I'm looking at the purescript prelude and they have Control.Monad and Data.Functor, which makes no sense to me.
2019-01-25 22:30:06	geekosaur	so do we
2019-01-25 22:30:18	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 244 seconds)
2019-01-25 22:30:20	fen	eg if there is a Skip container like [1,_,_,_,2_,_ ... ] then get_r should return ((1,3),[2,_, ...])
2019-01-25 22:30:21	geekosaur	and no, it doesn't make any sense, that's kinda the point. but we inherited much of this
2019-01-25 22:30:23	<--	kritzefitz (~kritzefit@dslb-084-063-088-165.084.063.pools.vodafone-ip.de) has quit (Read error: Connection reset by peer)
2019-01-25 22:30:44	fen	but growing that 3 from dismantling the skip is slower than leaving a segment of the Skip
2019-01-25 22:30:46	geekosaur	the realization that it doesn't really make sense in a Haskell-related context came later
2019-01-25 22:31:38	fen	like; [1,_,_,_,2_,_ ... ] -> ((1,[undefined,_,_,_]),[2,_, ...])
2019-01-25 22:32:27	<--	xenon- (~bc815ee6@h27.47.138.40.static.ip.windstream.net) has quit (Quit: CGI:IRC (Ping timeout))
2019-01-25 22:33:01	fen	like how Int === [()] it might not seem faster to do :() than +1, but when fusion is used, and the list already exists...
2019-01-25 22:33:27	-->	yaroot (~yaroot@softbank126103172251.bbtec.net) has joined #haskell
2019-01-25 22:33:59	fen	so then anything the `i' of get_i might be used for, such as for set_i, this now can fold over the container, instead of wrangling with Int
2019-01-25 22:34:25	<--	son0p (~ff@181.136.99.9) has quit (Quit: Lost terminal)
2019-01-25 22:35:08	fen	here the containers are strait lines, without right angles, but when shaped containers are used, its like forall a. f a === [j]
2019-01-25 22:35:39	fen	where the `j' are the extra information the shape gives to the values during a fold
2019-01-25 22:35:50	fen	so then there is the option of using a Church encoding of this fold
2019-01-25 22:36:07	 *	hackage aeson-gadt-th 0.1.2.0 - Derivation of Aeson instances for GADTs  https://hackage.haskell.org/package/aeson-gadt-th-0.1.2.0 (abrar)
2019-01-25 22:36:12	fen	and that gives the fusion savings
2019-01-25 22:38:09	-->	sQVe (~sQVe@unaffiliated/sqve) has joined #haskell
2019-01-25 22:38:22	fen	basically its a default get_i instance where i = (j -> b -> b) -> b -> b
2019-01-25 22:38:47	fen	and the "substructure" or "shape" index j appears
2019-01-25 22:39:14	berndl	The Idris prelude is a lot saner.
2019-01-25 22:40:03	<--	doyougnu (doyougnu@128-193-154-26.ptpg.oregonstate.edu) has quit (Ping timeout: 245 seconds)
2019-01-25 22:40:07	 *	hackage constraints-extras 0.2.3.1 - Utility package for constraints  https://hackage.haskell.org/package/constraints-extras-0.2.3.1 (abrar)
2019-01-25 22:40:20	fen	`i' is like, how many skips after the head value until the next value, so when get is called, and the head value is retrived along with the reconstruction index, this could be an Int, but its faster if its a church encoded folding over substructure indexes
2019-01-25 22:40:52	fen	so instead of Int, we have the faster version (() -> b -> b) -> b -> b
2019-01-25 22:41:04	fen	(funky looking Int!)
2019-01-25 22:41:13	<--	Jesin (~Jesin@pool-72-83-62-150.washdc.fios.verizon.net) has quit (Quit: Leaving)
2019-01-25 22:41:35	fen	for things that would loop incamenting a carry Int like a C++ for loop
2019-01-25 22:42:08	-->	crobbins (~crobbins@2601:2c7:780:416e:9897:58b6:281:f622) has joined #haskell
2019-01-25 22:42:36	fen	if haskell has zero cost loop indexing ++ thats got to be a pretty powerful feature
2019-01-25 22:42:52	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-25 22:43:07	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-25 22:43:14	<--	travv0 (uid293381@gateway/web/irccloud.com/x-ndkmjnzvphnfvxfx) has left #haskell
2019-01-25 22:43:20	-->	xenon- (~bc815ee6@h27.47.138.40.static.ip.windstream.net) has joined #haskell
2019-01-25 22:43:27	<--	snowgoggles (~snowgoggl@dhcp-c-b6-d2-83-34-5a.cpe.i-zoom.net) has quit (Ping timeout: 240 seconds)
2019-01-25 22:43:30	fen	(when the index being incremented is for a container traversal)
2019-01-25 22:43:53	fen	normally this is hidden in like map
2019-01-25 22:43:55	fen	right?
2019-01-25 22:44:03	fen	the recursive call...
2019-01-25 22:44:33	fen	but by implementing using traverse we can increment a carried thing 
2019-01-25 22:44:37	fen	:t mapAccumR
2019-01-25 22:44:38	lambdabot	Traversable t => (a -> b -> (a, c)) -> a -> t b -> (a, t c)
2019-01-25 22:44:42	xenon-	what is the point of () in (() -> b -> b) -> b -> b?
2019-01-25 22:44:56	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 22:44:56	fen	its the "shape" of the linear container
2019-01-25 22:45:18	fen	like there is no extra "shape" information from traversing a list
2019-01-25 22:45:26	fen	we just get another () at each place
2019-01-25 22:45:39	fen	which you cons onto the carried [()]
2019-01-25 22:45:42	fen	which is the Int
2019-01-25 22:46:10	fen	but by using the Church encoding, these shape args are made available to a folding function
2019-01-25 22:46:36	fen	which for Lists, and the incramented int, is just providing () to the folding function... 
2019-01-25 22:46:59	<--	cantstanya (~chatting@gateway/tor-sasl/cantstanya) has quit (Remote host closed the connection)
2019-01-25 22:47:09	fen	might not seem so useful, but it could be doing a const (+1) :: () -> Int -> Int just to prove its equivalence
2019-01-25 22:47:18	-->	darjeeling_ (~darjeelin@205.175.106.167) has joined #haskell
2019-01-25 22:47:18	-->	notzmv (~zmv@unaffiliated/zmv) has joined #haskell
2019-01-25 22:47:22	comstar	mapAccumR is foldlr & fmap right
2019-01-25 22:47:48	xenon-	:t mapAccumR
2019-01-25 22:47:50	fen	it accumulates a carried argument
2019-01-25 22:47:50	lambdabot	Traversable t => (a -> b -> (a, c)) -> a -> t b -> (a, t c)
2019-01-25 22:48:08	comstar	:t fmap
2019-01-25 22:48:09	lambdabot	Functor f => (a -> b) -> f a -> f b
2019-01-25 22:48:19	comstar	:t foldr
2019-01-25 22:48:20	lambdabot	Foldable t => (a -> b -> b) -> b -> t a -> b
2019-01-25 22:48:40	comstar	:t *>
2019-01-25 22:48:42	lambdabot	error: parse error on input ‘*>’
2019-01-25 22:48:47	comstar	oh right
2019-01-25 22:49:07	xenon-	> mapAccumR (\acc x -> (acc+x, "w00t")) 0 [1..10]
2019-01-25 22:49:09	lambdabot	 (55,["w00t","w00t","w00t","w00t","w00t","w00t","w00t","w00t","w00t","w00t"])
2019-01-25 22:49:13	<--	amar_ (~amar@cpc121556-lewi23-2-0-cust1623.2-4.cable.virginm.net) has quit (Ping timeout: 245 seconds)
2019-01-25 22:49:16	-->	cantstanya (~chatting@gateway/tor-sasl/cantstanya) has joined #haskell
2019-01-25 22:49:46	xenon-	I don't see where fmap comes into play
2019-01-25 22:49:48	fen	ok heres a good example, the j can be used to give j -> f a -> f a
2019-01-25 22:50:14	fen	then, a carried f a can be given the shape directions allowing it to be navigated to the next position
2019-01-25 22:50:24	fen	that way comonad results
2019-01-25 22:50:39	fen	by replacing the value with this navigated (Pointer) container
2019-01-25 22:50:47	-->	sonofentropy (~k@84-10-10-170.static.chello.pl) has joined #haskell
2019-01-25 22:50:55	xenon-	> foldl (\x (a, b) -> (a+x, "w00t":b)) (0, []) [1..10]
2019-01-25 22:50:56	fen	and further, this Pointer style navigation is implicit in all the normal recursions
2019-01-25 22:50:56	lambdabot	 error:
2019-01-25 22:50:57	lambdabot	     • Occurs check: cannot construct the infinite type:
2019-01-25 22:50:57	lambdabot	         a ~ (a, [[Char]])
2019-01-25 22:51:01	Solonarv	comstar: it's 'traverse' specialized to the State monad
2019-01-25 22:51:09	xenon-	> foldl (\(a, b) x -> (a+x, "w00t":b)) (0, []) [1..10]
2019-01-25 22:51:11	lambdabot	 (55,["w00t","w00t","w00t","w00t","w00t","w00t","w00t","w00t","w00t","w00t"])
2019-01-25 22:51:48	fen	to see an example of that phenomena, consider the implementation of insert
2019-01-25 22:51:57	fen	using fold
2019-01-25 22:52:05	fen	or direct recursion
2019-01-25 22:52:05	<--	berndl (~bernd@ip5f5bf384.dynamic.kabel-deutschland.de) has quit (Quit: WeeChat 1.4)
2019-01-25 22:52:51	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-25 22:52:53	fen	if you use a zipper (a linear pointer) then you just navigate the zipper to the insert position and attach the thing you want to insert to the head of the tail at that postion
2019-01-25 22:53:06	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-25 22:53:19	fen	so then it can be seen how a pointer was implicitly at the heart of the recursive implementation
2019-01-25 22:54:21	fen	so that, just having normal cons or ++, coresponding insert things are available for the linear containers such as list, because there is a pointer over them
2019-01-25 22:54:47	fen	and the extra argument to insert, over (:) for example, corresponds to the navigational argument to the pointer
2019-01-25 22:55:03	fen	you move the zipper forwards n times before consing onto the tail
2019-01-25 22:55:07	xenon-	mapAccumR and foldMap are cool functions that I have never used before. any other folding function I should learn?
2019-01-25 22:55:13	<--	smitop (uid328768@gateway/web/irccloud.com/x-untkmdueudbhpumu) has quit (Quit: Connection closed for inactivity)
2019-01-25 22:55:20	<--	acarrico (~acarrico@dhcp-68-142-35-239.greenmountainaccess.net) has quit (Ping timeout: 250 seconds)
2019-01-25 22:55:41	fen	and this has a version for "shaped" containers such as Nd cartesian grids etc
2019-01-25 22:55:50	<--	ystael (~ystael@50-199-243-61-static.hfc.comcastbusiness.net) has quit (Ping timeout: 272 seconds)
2019-01-25 22:56:11	comstar	xenon-: "The mapAccumR function behaves like a combination of fmap and foldr; it applies a function to each element of a structure, passing an accumulating parameter from right to left, and returning a final value of this accumulator together with the new structure."
2019-01-25 22:56:18	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 245 seconds)
2019-01-25 22:56:38	fen	the theorem with this Church representation of the overall navigational index is that its a church encoded list of the next neighbouring navigational index
2019-01-25 22:56:43	-->	eschnett_ (~eschnett@ktnron0916w-grc-04-67-71-80-150.dsl.bell.ca) has joined #haskell
2019-01-25 22:56:44	comstar	it's like fmap for binary operations instead of unary
2019-01-25 22:56:50	fen	hence i in terms of j
2019-01-25 22:56:52	-->	oisdk (~textual@2001:bb6:331c:dc58:8580:9785:629b:343e) has joined #haskell
2019-01-25 22:56:55	comstar	w/ a fold
2019-01-25 22:57:00	<--	nopoliti1 (~zul@46.39.255.115) has quit (Quit: WeeChat 2.2)
2019-01-25 22:57:19	-->	Welkin (~Welkin@047-227-169-219.res.spectrum.com) has joined #haskell
2019-01-25 22:58:10	fen	i = [j] because there is a hamiltonian path for traversable containers. so there is a simple list like sequence of local navigations
2019-01-25 22:58:28	<--	nbloomf (~nbloomf@2600:1700:83e0:1f40:6d74:a91e:18fc:6759) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-25 22:58:29	comstar	Solonarv: thank you, btw
2019-01-25 22:58:58	-->	begriffs (~begriffs@unaffiliated/begriffs) has joined #haskell
2019-01-25 22:59:24	begriffs	Is the Haskell 2010 Language Report available in printed form?
2019-01-25 22:59:44	fen	thats why you have a carried Int over normal recursive things, because its [()] because there is just a () to get navigate a linear zipper, but this extends to Pointers of more complex "shaped" containers, where the local navigations forming an overall navigation are i = [j] for j/=()
2019-01-25 23:00:29	fen	this can be used then for branching recursion, and even cycles
2019-01-25 23:00:35	MarcelineVQ	fen: who are you talking to?
2019-01-25 23:00:50	fen	just finished. big project, great result
2019-01-25 23:00:57	fen	you?
2019-01-25 23:01:00	MarcelineVQ	you
2019-01-25 23:01:16	-->	Jesin (~Jesin@pool-72-83-62-150.washdc.fios.verizon.net) has joined #haskell
2019-01-25 23:01:25	fen	i know who your talking to! 
2019-01-25 23:01:30	comstar	yeah I was kind-of wondering that too lol
2019-01-25 23:01:40	comstar	I thought I just missed part of the conversation
2019-01-25 23:01:48	__monty__	Fen's the train of thought/life-blogging type.
2019-01-25 23:01:55	comstar	ah
2019-01-25 23:01:59	fen	what?
2019-01-25 23:02:06	fen	i need you guys help!
2019-01-25 23:02:16	<--	michaelsdunn1 (~michaelsd@unaffiliated/michaelsdunn1) has quit (Remote host closed the connection)
2019-01-25 23:02:51	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-25 23:02:52	-->	iqubic (~user@2601:602:8a02:7e0a:b51e:e57:75ba:193a) has joined #haskell
2019-01-25 23:03:02	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-25 23:03:28	__monty__	Questions might be a better way to get that than an essay though. I, like most I'd wager, gave up trying to keep up.
2019-01-25 23:03:46	fen	yeah cos it got real
2019-01-25 23:04:15	-->	abhixec (~abhixec@c-24-130-65-112.hsd1.ca.comcast.net) has joined #haskell
2019-01-25 23:04:27	<--	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has quit (Remote host closed the connection)
2019-01-25 23:05:12	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-25 23:05:26	fen	its ok to read twice what took more than a few attempts to derive
2019-01-25 23:05:31	Solonarv	fen's the "pipe stream of consciousness into IRC" type ;)
2019-01-25 23:05:33	<--	danvet (~Daniel@2a02:168:569e:0:3106:d637:d723:e855) has quit (Ping timeout: 252 seconds)
2019-01-25 23:05:45	fen	no seriously though
2019-01-25 23:06:11	<--	jbayardo (~jbayardo@2601:602:9802:93d6:e429:3c0c:a60b:9d15) has quit (Quit: Bye!)
2019-01-25 23:07:00	xenon-	comstar, I guess they mean that fst is result of fold, and snd of fmap
2019-01-25 23:07:17	iqubic	So I finally managed to learn about EBNF and left recursion and how to factor out said left recursion.
2019-01-25 23:07:27	__monty__	fen: Once not one, not two, but three people say the same thing you have to consider whether there's something to their claims : >
2019-01-25 23:07:30	-->	jbayardo (~jbayardo@2601:602:9802:93d6:e429:3c0c:a60b:9d15) has joined #haskell
2019-01-25 23:07:37	comstar	you could really do well for yourself blogging about it since it'd give you stuff to put on a résumé
2019-01-25 23:07:43	comstar	fen: ^
2019-01-25 23:07:47	fen	yeah i should write a book pay me!
2019-01-25 23:08:08	<--	fen (518372ac@gateway/web/freenode/ip.81.131.114.172) has quit (Quit: Page closed)
2019-01-25 23:08:14	comstar	... LOL
2019-01-25 23:08:19	iqubic	And I managed to get a parser that parses left associative binary operators with precedendce.
2019-01-25 23:08:40	xenon-	any other useful folding functions I may be missing, besides foldr/l  foldMap and mapAccumR
2019-01-25 23:08:55	-->	urodna (~urodna@unaffiliated/urodna) has joined #haskell
2019-01-25 23:09:16	MarcelineVQ	xenon-: most everything in the Foldable class is useful
2019-01-25 23:09:39	comstar	https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-List.html xenon- 
2019-01-25 23:10:14	comstar	I know you weren't really asking for a link to the manual, I'm not trying to be snarky about that
2019-01-25 23:10:21	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 268 seconds)
2019-01-25 23:10:22	xenon-	I think I know everything there besides mapAccum*
2019-01-25 23:10:25	<--	begriffs (~begriffs@unaffiliated/begriffs) has quit (Quit: Leaving...)
2019-01-25 23:10:28	xenon-	no, that's fine
2019-01-25 23:10:47	MarcelineVQ	unfoldr is pretty neat if you've not seen
2019-01-25 23:11:06	xenon-	seen it :)
2019-01-25 23:11:16	comstar	I like that foldable requires foldMap
2019-01-25 23:11:28	xenon-	foldr is enough
2019-01-25 23:11:30	MarcelineVQ	sounds like you're good to start using these things :>
2019-01-25 23:11:34	xenon-	to implement Foldable
2019-01-25 23:11:45	-->	patrl (~patrl@unaffiliated/patrl) has joined #haskell
2019-01-25 23:11:54	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-25 23:11:54	comstar	yeah it's one or the other
2019-01-25 23:12:01	Solonarv	(or both)
2019-01-25 23:12:05	comstar	or both!
2019-01-25 23:12:14	xenon-	asum, for_, traverse. these are new
2019-01-25 23:12:40	xenon-	foldlM
2019-01-25 23:12:50	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-25 23:13:00	<--	natrys (~natrys@116.206.252.68) has quit (Quit: natrys)
2019-01-25 23:13:02	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-25 23:13:20	MarcelineVQ	asum is, iirc, foldr <|> empty so if you want to know more about it you need to look at instances of Alternative which provides <|> and empty
2019-01-25 23:14:08	comstar	can ghc thread pure functions yet (just wondering)
2019-01-25 23:14:15	<--	sQVe (~sQVe@unaffiliated/sqve) has quit (Quit: Bye!)
2019-01-25 23:14:19	comstar	last time I did it I had to do some library stuff
2019-01-25 23:14:44	comstar	diving into https://wiki.haskell.org/Concurrency now
2019-01-25 23:15:23	Solonarv	it doesn't happen automatically, but you can cause pure computation to happen in parallel
2019-01-25 23:15:27	Solonarv	@hackage parallel
2019-01-25 23:15:27	lambdabot	http://hackage.haskell.org/package/parallel
2019-01-25 23:15:29	MarcelineVQ	you can get parallel operations without IO if that's what you mean but concurrency is a tougher nut to crack
2019-01-25 23:16:04	MarcelineVQ	condy: https://www.oreilly.com/library/view/parallel-and-concurrent/9781449335939/ is the de facto source to learn these things, it's free on that page just gotta scroll down
2019-01-25 23:16:12	MarcelineVQ	*comstar
2019-01-25 23:16:22	<--	chaosmasttter (~chaosmast@p2E50E0EF.dip0.t-ipconnect.de) has quit (Quit: WeeChat 2.2)
2019-01-25 23:16:31	comstar	thanks!
2019-01-25 23:16:48	<--	raichoo (~raichoo@213.240.178.58) has quit (Ping timeout: 244 seconds)
2019-01-25 23:17:00	iqubic	creating a parser for a left recursive grammar was a very interesting and eye opening task.
2019-01-25 23:17:13	MarcelineVQ	iqubic: very cool
2019-01-25 23:17:20	<--	shuh (~shuh@2604:2000:e14b:8000:2431:cba3:2a80:3e91) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-25 23:17:26	<--	darjeeling_ (~darjeelin@205.175.106.167) has quit (Ping timeout: 250 seconds)
2019-01-25 23:17:43	-->	siiky (~siiky@2001:8a0:ff55:bb00:d095:4bff:7685:9f08) has joined #haskell
2019-01-25 23:18:01	<--	Sheilong (uid293653@gateway/web/irccloud.com/x-assycxrbdfpuwdhe) has quit (Quit: Connection closed for inactivity)
2019-01-25 23:18:19	iqubic	Yeah. Ski helped me with that last night.
2019-01-25 23:18:58	iqubic	I managed to make a parser that can parse things like: "1 + 2 * 3 - 4 / 5" properly.
2019-01-25 23:19:13	-->	yyy- (~yyy@unaffiliated/tinnotl) has joined #haskell
2019-01-25 23:20:07	 *	hackage haskdogs 0.6.0 - Generate tags file for Haskell project and its nearest deps  https://hackage.haskell.org/package/haskdogs-0.6.0 (SergeyMironov)
2019-01-25 23:20:09	iqubic	As in, it has the correct assiativity and precedence.
2019-01-25 23:20:24	MarcelineVQ	What do you want to do next now that you can do this?
2019-01-25 23:20:36	<--	davr0s (~textual@host109-155-92-146.range109-155.btcentralplus.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2019-01-25 23:20:38	<--	simukis (~simukis_@78-63-88-48.static.zebra.lt) has quit (Quit: simukis)
2019-01-25 23:20:57	iqubic	I'm going to make a program that can find derivatives.
2019-01-25 23:21:11	-->	davr0s (~textual@host109-155-92-146.range109-155.btcentralplus.com) has joined #haskell
2019-01-25 23:22:49	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-25 23:23:03	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-25 23:23:05	<--	__monty__ (~toonn@unaffiliated/toonn) has quit (Quit: leaving)
2019-01-25 23:23:07	<--	sedeki (~textual@unaffiliated/sedeki) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-01-25 23:23:27	-->	um1b0zu (~um1@38.88.168.107) has joined #haskell
2019-01-25 23:23:32	<--	gehmehgeh (~ircuser1@gateway/tor-sasl/gehmehgeh) has quit (Quit: Leaving)
2019-01-25 23:24:18	<--	niklasl (~niklasl@c83-253-14-109.bredband.comhem.se) has quit (Ping timeout: 246 seconds)
2019-01-25 23:25:33	-->	niklasl (~niklasl@c83-253-14-109.bredband.comhem.se) has joined #haskell
2019-01-25 23:26:10	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-25 23:27:39	<--	p0lyph3m (~p0lyph3m@2a02:810d:640:776c:76d7:55f6:f85b:c889) has quit (Read error: Connection reset by peer)
2019-01-25 23:28:48	-->	gehmehgeh (~ircuser1@gateway/tor-sasl/gehmehgeh) has joined #haskell
2019-01-25 23:28:55	<--	Deide (~Deide@90.240.92.199) has quit (Quit: Seeee yaaaa)
2019-01-25 23:29:03	-->	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has joined #haskell
2019-01-25 23:29:55	<--	hyperisco (~hyperisco@d192-186-117-226.static.comm.cgocable.net) has quit (Quit: Curry, you fools!)
2019-01-25 23:30:00	<--	rblaze (~Adium@2620:10d:c091:200::7:a642) has quit (Ping timeout: 268 seconds)
2019-01-25 23:30:27	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 240 seconds)
2019-01-25 23:31:19	<--	deviantfero (~deviantfe@ip168-243-230-189.intercom.com.sv) has quit (Ping timeout: 268 seconds)
2019-01-25 23:31:55	<--	madnight (~madnight@static.59.103.201.195.clients.your-server.de) has quit (Quit: ZNC 1.7.1 - https://znc.in)
2019-01-25 23:31:56	<--	knupfer (~Thunderbi@200116b82cca3100f69634fffef0b45f.dip.versatel-1u1.de) has quit (Ping timeout: 240 seconds)
2019-01-25 23:32:48	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-25 23:33:04	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-25 23:33:07	-->	deviantfero (~deviantfe@ip168-243-230-189.intercom.com.sv) has joined #haskell
2019-01-25 23:33:50	<--	samurdha (~samurdha@dyn-209-2-221-45.dyn.columbia.edu) has quit (Ping timeout: 272 seconds)
2019-01-25 23:34:02	-->	madnight (~madnight@static.59.103.201.195.clients.your-server.de) has joined #haskell
2019-01-25 23:34:56	<--	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has quit (Ping timeout: 240 seconds)
2019-01-25 23:35:37	-->	Lord_of_Life (~Lord@unaffiliated/lord-of-life/x-0885362) has joined #haskell
2019-01-25 23:37:38	-->	matheus23 (~matheus23@2a02:8071:328f:6c00:3e39:2ffa:74:9dff) has joined #haskell
2019-01-25 23:38:23	<--	yyy- (~yyy@unaffiliated/tinnotl) has quit (Ping timeout: 245 seconds)
2019-01-25 23:39:03	-->	darjeeling_ (~darjeelin@205.175.106.167) has joined #haskell
2019-01-25 23:39:09	-->	Wuzzy (~Wuzzy@p5B0DF32B.dip0.t-ipconnect.de) has joined #haskell
2019-01-25 23:40:37	<--	kingofmemes (~kingofmem@2601:480:4103:a3e0:200b:97f3:2e17:71f3) has quit (Quit: Textual IRC Client: www.textualapp.com)
2019-01-25 23:41:01	-->	kingofmemes (~kingofmem@2601:480:4103:a3e0:c89d:56d:d1b9:be1a) has joined #haskell
2019-01-25 23:41:02	--	wrengr is now known as wrengr_away
2019-01-25 23:41:54	suzu	is there an idiom for string interp in hs
2019-01-25 23:42:13	<--	davr0s (~textual@host109-155-92-146.range109-155.btcentralplus.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2019-01-25 23:42:32	<--	BartAdv (uid90451@gateway/web/irccloud.com/x-bizyrpljmlqmuzov) has quit (Quit: Connection closed for inactivity)
2019-01-25 23:42:47	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-25 23:43:02	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-25 23:43:25	-->	jdevlieghere48 (~jdevliegh@68.183.174.129) has joined #haskell
2019-01-25 23:43:33	MarcelineVQ	I'm a little dumb so it might just be me but that question seems like it's missing words/letters, are you looking for multi-line string literals?
2019-01-25 23:44:03	koz_	MarcelineVQ: I think suzu refers to string interpolation, a la Perl.
2019-01-25 23:44:16	suzu	yeah
2019-01-25 23:44:18	koz_	So you can write something like "I am a ${adjective} ${food}".
2019-01-25 23:44:23	suzu	but with type safety
2019-01-25 23:44:31	koz_	And if adjective = idiot and food = sandwich, it would produce... yeah.
2019-01-25 23:44:41	<--	jdevlieghere48 (~jdevliegh@68.183.174.129) has quit (Client Quit)
2019-01-25 23:44:49	koz_	suzu: Is something printf-like sufficient for your purposes?
2019-01-25 23:44:51	suzu	so i normally do some nonsense like "(" <> toS . show (thing) <> "), " <> toS . show (another thing) <> ..
2019-01-25 23:45:02	-->	jdevlieghere48 (~jdevliegh@68.183.174.129) has joined #haskell
2019-01-25 23:45:39	suzu	i'd like to avoid a unchecked printf and just know how to do what i'm currently doing but cleaner
2019-01-25 23:46:07	suzu	i suppose i could concatMap toS over a list
2019-01-25 23:46:10	koz_	suzu: Who said anything about unchecked?
2019-01-25 23:46:11	-->	snowgoggles (~snowgoggl@dhcp-c-b6-d2-83-34-5a.cpe.i-zoom.net) has joined #haskell
2019-01-25 23:46:15	suzu	:o
2019-01-25 23:46:23	koz_	http://hackage.haskell.org/package/base-4.12.0.0/docs/Text-Printf.html
2019-01-25 23:46:50	suzu	Mismatch between the argument types and the format string will cause an exception to be thrown at runtime. 
2019-01-25 23:47:06	suzu	i'd like a compile-time guarantee
2019-01-25 23:47:10	MarcelineVQ	There's likely a type-safe printf by now, https://hackage.haskell.org/packages/search?terms=printf
2019-01-25 23:47:25	koz_	suzu: Have you seen the one implemented in Thinking with Types?
2019-01-25 23:47:37	-->	jchia_ (~jchia@45.32.62.73) has joined #haskell
2019-01-25 23:47:38	koz_	I think even the preview copy has that chapter.
2019-01-25 23:47:44	suzu	no, haven't seen it
2019-01-25 23:47:45	<--	acidjnk (~acid@i577BCA9D.versanet.de) has quit (Ping timeout: 246 seconds)
2019-01-25 23:47:48	koz_	suzu: One sec then.
2019-01-25 23:47:51	MarcelineVQ	https://hackage.haskell.org/package/formatting-6.3.7/docs/Formatting.html being the most recent
2019-01-25 23:48:11	MarcelineVQ	though at a glance not quite as clean
2019-01-25 23:48:36	koz_	http://reasonablypolymorphic.com/blog/book-of-types/
2019-01-25 23:48:38	Welkin	> toJSON True
2019-01-25 23:48:39	koz_	suzu: ^
2019-01-25 23:48:40	MarcelineVQ	https://hackage.haskell.org/package/th-printf-0.6.0/docs/Language-Haskell-Printf.html is closer
2019-01-25 23:48:40	lambdabot	 error:
2019-01-25 23:48:41	lambdabot	     Variable not in scope: toJSON :: Bool -> t
2019-01-25 23:48:53	Welkin	> Data.Aeson.toJSON True
2019-01-25 23:48:55	lambdabot	 error:
2019-01-25 23:48:55	lambdabot	     Not in scope: ‘Data.Aeson.toJSON’
2019-01-25 23:48:55	lambdabot	     No module named ‘Data.Aeson’ is imported.
2019-01-25 23:48:56	koz_	It's in that PDF, but I forget which exact chapter.
2019-01-25 23:48:58	suzu	koz_: i own a copy, lol
2019-01-25 23:49:05	koz_	suzu: Oh, even better!
2019-01-25 23:49:10	suzu	i just haven't read it
2019-01-25 23:49:11	suzu	<_<
2019-01-25 23:49:11	koz_	(me too)
2019-01-25 23:49:13	koz_	(and I have)
2019-01-25 23:49:18	koz_	Let me get you a chapter reference then.
2019-01-25 23:50:03	<--	darjeeling_ (~darjeelin@205.175.106.167) has quit (Ping timeout: 245 seconds)
2019-01-25 23:50:18	<--	um1b0zu (~um1@38.88.168.107) has quit (Ping timeout: 272 seconds)
2019-01-25 23:50:58	<--	saml (~saml@unaffiliated/saml) has quit (Remote host closed the connection)
2019-01-25 23:50:59	-->	darjeeling_ (~darjeelin@205.175.106.167) has joined #haskell
2019-01-25 23:51:43	<--	slomo (~slomo@unaffiliated/slomo) has quit (Ping timeout: 245 seconds)
2019-01-25 23:51:55	koz_	suzu: Chapter 9.
2019-01-25 23:52:06	koz_	Sorry that took a while - it's not indicated in the contents.
2019-01-25 23:52:09	suzu	kk
2019-01-25 23:52:18	<--	deviantfero (~deviantfe@ip168-243-230-189.intercom.com.sv) has quit (Ping timeout: 268 seconds)
2019-01-25 23:52:19	MarcelineVQ	help
2019-01-25 23:52:25	MarcelineVQ	I accidently ended up in spj's papers list again and I don't know how to get out
2019-01-25 23:52:47	koala_man	hahalol
2019-01-25 23:52:55	suzu	whats the most recent edition koala_man ?
2019-01-25 23:52:58	suzu	err koz_ *
2019-01-25 23:54:15	<--	jchia_ (~jchia@45.32.62.73) has quit (Remote host closed the connection)
2019-01-25 23:54:18	koz_	suzu: No clue. I bought on release day.
2019-01-25 23:54:21	koz_	So going by that copy.
2019-01-25 23:54:58	-->	jchia_ (~jchia@58.32.32.5) has joined #haskell
2019-01-25 23:56:09	suzu	hmm
2019-01-25 23:56:14	suzu	will leanpub let me dl the latest ver
2019-01-25 23:57:00	<--	Synthetica (uid199651@gateway/web/irccloud.com/x-hiucjxggnalzoypx) has quit (Quit: Connection closed for inactivity)
2019-01-25 23:57:13	koz_	Wait, there's a more recent one?
2019-01-25 23:57:27	suzu	there must be
2019-01-25 23:57:34	suzu	i know the author and i think he published some updates
2019-01-25 23:57:36	suzu	lol
2019-01-25 23:58:14	koz_	suzu: Hopefully some of my feedback got incorporated.
2019-01-25 23:58:42	-->	cwil (~chris@203-214-126-65.dyn.iinet.net.au) has joined #haskell
2019-01-25 23:58:59	<--	dpyro (~dpyro@66-169-160-49.dhcp.ftwo.tx.charter.com) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-25 23:59:31	<--	darithorn (~darithorn@75.174.234.76) has quit (Quit: Leaving)
2019-01-26 00:00:44	<--	codesoup (~codesoup@174.119.180.211) has quit (Remote host closed the connection)
2019-01-26 00:02:14	-->	pfurla (~pfurla@2804:18:5025:c177:b4b1:f076:5211:b351) has joined #haskell
2019-01-26 00:02:45	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-26 00:02:51	suzu	ah yeah this is the latest edition
2019-01-26 00:02:53	suzu	ok
2019-01-26 00:02:58	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-26 00:03:56	<--	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has quit (Ping timeout: 240 seconds)
2019-01-26 00:05:08	<--	jdevlieghere (~jdevliegh@188.166.15.139) has quit (Remote host closed the connection)
2019-01-26 00:05:34	-->	jdevlieghere (~jdevliegh@188.166.15.139) has joined #haskell
2019-01-26 00:05:54	<--	jdevlieghere (~jdevliegh@188.166.15.139) has quit (Remote host closed the connection)
2019-01-26 00:06:29	-->	nullremains (~nullremai@49.229.68.29) has joined #haskell
2019-01-26 00:06:49	-->	Ulbrec (62a9a360@gateway/web/freenode/ip.98.169.163.96) has joined #haskell
2019-01-26 00:07:07	<--	Welkin (~Welkin@047-227-169-219.res.spectrum.com) has quit (Quit: leaving)
2019-01-26 00:07:08	-->	dpyro (~dpyro@66-169-160-49.dhcp.ftwo.tx.charter.com) has joined #haskell
2019-01-26 00:07:55	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-26 00:11:01	-->	codesoup (~codesoup@174.119.180.211) has joined #haskell
2019-01-26 00:12:15	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 246 seconds)
2019-01-26 00:12:54	<--	sonofentropy (~k@84-10-10-170.static.chello.pl) has quit (Quit: sonofentropy)
2019-01-26 00:13:27	<--	hvr (~hvr@haskell/developer/hvr) has quit (Ping timeout: 240 seconds)
2019-01-26 00:14:17	<--	xenon- (~bc815ee6@h27.47.138.40.static.ip.windstream.net) has quit (Quit: CGI:IRC (Ping timeout))
2019-01-26 00:15:22	-->	UpstreamSalmon (uid12077@gateway/web/irccloud.com/x-yhoseleaxrlqbmhj) has joined #haskell
2019-01-26 00:15:57	-->	fmixing (~fmixing@5.18.98.152) has joined #haskell
2019-01-26 00:15:59	<--	ph88 (~ph88@a79-169-57-95.cpe.netcabo.pt) has quit (Read error: Connection reset by peer)
2019-01-26 00:18:33	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 246 seconds)
2019-01-26 00:19:03	<--	zachk (~zachk@unaffiliated/zachk) has quit (Quit: Leaving)
2019-01-26 00:19:20	-->	andyhuzhill (~andyhuzhi@14.23.45.178) has joined #haskell
2019-01-26 00:19:25	suzu	formatting seems to be the best for my use
2019-01-26 00:20:21	<--	fmixing (~fmixing@5.18.98.152) has quit (Ping timeout: 244 seconds)
2019-01-26 00:22:20	koz_	suzu: Yeah, it is very good.
2019-01-26 00:22:24	 *	koz_ reminds himself to use it.
2019-01-26 00:22:30	-->	AdelaComedora (~ircap@3.236.158.146.dynamic.jazztel.es) has joined #haskell
2019-01-26 00:22:43	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-26 00:22:55	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-26 00:24:07	<--	AdelaComedora (~ircap@3.236.158.146.dynamic.jazztel.es) has quit (Client Quit)
2019-01-26 00:24:52	-->	nfd9001 (~nfd9001@c-73-225-42-170.hsd1.wa.comcast.net) has joined #haskell
2019-01-26 00:25:41	-->	revprez_anzio (~revprez_a@static-173-76-190-156.bstnma.ftas.verizon.net) has joined #haskell
2019-01-26 00:26:18	<--	darjeeling_ (~darjeelin@205.175.106.167) has quit (Ping timeout: 245 seconds)
2019-01-26 00:26:34	<--	jb55 (~jb55@S010660e327dca171.vc.shawcable.net) has quit (Quit: WeeChat 2.3)
2019-01-26 00:27:08	-->	jb55 (~jb55@S010660e327dca171.vc.shawcable.net) has joined #haskell
2019-01-26 00:29:54	-->	Azel (~Thunderbi@ppp-115-87-121-29.revip4.asianet.co.th) has joined #haskell
2019-01-26 00:30:03	Solonarv	@hackage neat-interpolation - suzu
2019-01-26 00:30:03	lambdabot	http://hackage.haskell.org/package/neat-interpolation - suzu
2019-01-26 00:32:42	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-26 00:32:55	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-26 00:34:12	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-26 00:34:52	<--	patrl (~patrl@unaffiliated/patrl) has quit (Quit: WeeChat 2.3)
2019-01-26 00:36:09	-->	machinedgod (~machinedg@198-48-220-190.cpe.pppoe.ca) has joined #haskell
2019-01-26 00:38:29	<--	dpyro (~dpyro@66-169-160-49.dhcp.ftwo.tx.charter.com) has quit (Read error: Connection reset by peer)
2019-01-26 00:39:02	-->	dpyro (~dpyro@66-169-160-49.dhcp.ftwo.tx.charter.com) has joined #haskell
2019-01-26 00:40:59	<--	machinedgod (~machinedg@198-48-220-190.cpe.pppoe.ca) has quit (Ping timeout: 246 seconds)
2019-01-26 00:41:27	<--	chessai (~quassel@12.150.97.130) has quit (Ping timeout: 240 seconds)
2019-01-26 00:47:15	--	irc: disconnected from server
2019-01-26 00:47:36	-->	gwosix (~gwosix@122.52.193.185) has joined #haskell
2019-01-26 00:47:36	--	Topic for #haskell is "https://www.haskell.org | https://wiki.haskell.org/IRC_channel | Paste code/errors: https://gist.github.com/ | Logs: http://tunes.org/~nef/logs/haskell/?C=M;O=D | https://www.reddit.com/r/haskell | Admin: #haskell-ops | Offtopic: #haskell-offtopic | https://downloads.haskell.org"
2019-01-26 00:47:36	--	Topic set by glguy on Sat, 05 Jan 2019 15:21:52
2019-01-26 00:47:36	--	Channel #haskell: 1350 nicks (2 ops, 0 voices, 1348 normals)
2019-01-26 00:47:36	--	URL for #haskell: http://www.haskell.org/
2019-01-26 00:47:40	--	Channel created on Sun, 26 Nov 2006 06:42:48
2019-01-26 00:47:52	<--	notzmv (~zmv@unaffiliated/zmv) has quit (Ping timeout: 252 seconds)
2019-01-26 00:48:57	<--	jluttine (~jluttine@109.204.147.177) has quit (Ping timeout: 268 seconds)
2019-01-26 00:48:57	<--	Amras (~Amras@unaffiliated/amras0000) has quit (Remote host closed the connection)
2019-01-26 00:48:57	<--	nfd9001 (~nfd9001@c-73-225-42-170.hsd1.wa.comcast.net) has quit (Ping timeout: 240 seconds)
2019-01-26 00:49:42	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-26 00:49:46	<--	o1lo01ol1o (~o1lo01ol1@207.251.80.226) has quit (Remote host closed the connection)
2019-01-26 00:49:55	<--	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has quit (Ping timeout: 256 seconds)
2019-01-26 00:50:58	-->	nfd9001 (~nfd9001@c-73-225-42-170.hsd1.wa.comcast.net) has joined #haskell
2019-01-26 00:52:25	-->	esp32_prog (~esp32_pro@178.18.54.206) has joined #haskell
2019-01-26 00:52:40	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-26 00:52:52	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-26 00:53:59	-->	jluttine (~jluttine@109.204.147.177) has joined #haskell
2019-01-26 00:54:34	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 268 seconds)
2019-01-26 00:55:11	<--	pera (~pera@unaffiliated/pera) has quit (Ping timeout: 268 seconds)
2019-01-26 00:56:33	<--	crobbins (~crobbins@2601:2c7:780:416e:9897:58b6:281:f622) has quit (Remote host closed the connection)
2019-01-26 00:56:56	<--	esp32_prog (~esp32_pro@178.18.54.206) has quit (Ping timeout: 240 seconds)
2019-01-26 00:59:20	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-26 01:04:04	-->	esp32_prog (~esp32_pro@178.18.54.206) has joined #haskell
2019-01-26 01:04:26	<--	nfd9001 (~nfd9001@c-73-225-42-170.hsd1.wa.comcast.net) has quit (Ping timeout: 240 seconds)
2019-01-26 01:05:16	-->	pera (~pera@unaffiliated/pera) has joined #haskell
2019-01-26 01:05:40	-->	pfurla__ (~pfurla@177.142.249.164) has joined #haskell
2019-01-26 01:06:25	-->	xrexeon (~xrexeon@41.237.99.188) has joined #haskell
2019-01-26 01:06:46	<--	xrexeon (~xrexeon@41.237.99.188) has quit (Max SendQ exceeded)
2019-01-26 01:07:13	-->	xrexeon (~xrexeon@41.237.99.188) has joined #haskell
2019-01-26 01:08:08	-->	lambdaman (~lambdaman@72.21.225.66) has joined #haskell
2019-01-26 01:08:12	<--	pfurla (~pfurla@2804:18:5025:c177:b4b1:f076:5211:b351) has quit (Ping timeout: 252 seconds)
2019-01-26 01:08:57	<--	esp32_prog (~esp32_pro@178.18.54.206) has quit (Ping timeout: 246 seconds)
2019-01-26 01:09:51	<--	xrexeon (~xrexeon@41.237.99.188) has quit (Max SendQ exceeded)
2019-01-26 01:10:00	<--	pera (~pera@unaffiliated/pera) has quit (Ping timeout: 246 seconds)
2019-01-26 01:10:20	-->	xrexeon (~xrexeon@41.237.99.188) has joined #haskell
2019-01-26 01:11:43	-->	tomboy64 (~tomboy64@gateway/tor-sasl/tomboy64) has joined #haskell
2019-01-26 01:12:16	<--	jluttine (~jluttine@109.204.147.177) has quit (Ping timeout: 250 seconds)
2019-01-26 01:12:38	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-26 01:12:53	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-26 01:13:03	-->	thunderrd (~thunderrd@159.192.198.202) has joined #haskell
2019-01-26 01:13:56	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 240 seconds)
2019-01-26 01:14:39	-->	acarrico (~acarrico@dhcp-68-142-35-239.greenmountainaccess.net) has joined #haskell
2019-01-26 01:14:51	<--	lnostdal (~lnostdal@77.70.119.51) has quit (Read error: Connection reset by peer)
2019-01-26 01:16:18	-->	pfurla (~pfurla@2804:14d:5c54:992f:e8b1:ea3e:520c:f6b5) has joined #haskell
2019-01-26 01:16:20	<--	ym555 (~ym@156.199.213.34) has quit (Quit: WeeChat 2.3)
2019-01-26 01:17:02	-->	lnostdal (~lnostdal@77.70.119.51) has joined #haskell
2019-01-26 01:17:08	<--	thunderrd (~thunderrd@159.192.198.202) has quit (Remote host closed the connection)
2019-01-26 01:17:51	-->	notzmv (~zmv@unaffiliated/zmv) has joined #haskell
2019-01-26 01:18:10	-->	Sheilong (uid293653@gateway/web/irccloud.com/x-bpjnmjrvapzcexfs) has joined #haskell
2019-01-26 01:18:54	-->	alx741 (~alx741@186.178.110.88) has joined #haskell
2019-01-26 01:19:26	<--	pfurla__ (~pfurla@177.142.249.164) has quit (Ping timeout: 240 seconds)
2019-01-26 01:20:49	<--	raingloom (~raingloom@catv-178-48-182-38.catv.broadband.hu) has quit (Quit: WeeChat 2.3)
2019-01-26 01:20:59	<--	ltchen (~ltchen@host-92-30-204-54.as13285.net) has quit
2019-01-26 01:21:15	-->	esp32_prog (~esp32_pro@178.18.54.206) has joined #haskell
2019-01-26 01:22:40	-->	ym555 (~ym@156.199.213.34) has joined #haskell
2019-01-26 01:25:56	<--	esp32_prog (~esp32_pro@178.18.54.206) has quit (Ping timeout: 240 seconds)
2019-01-26 01:27:06	-->	aabac (~aabac@199.241.147.35) has joined #haskell
2019-01-26 01:27:21	<--	aabac (~aabac@199.241.147.35) has quit (Changing host)
2019-01-26 01:27:21	-->	aabac (~aabac@unaffiliated/aabac) has joined #haskell
2019-01-26 01:27:32	-->	sonofentropy (~k@84-10-10-170.static.chello.pl) has joined #haskell
2019-01-26 01:27:37	 *	hackage num-non-negative 0.1 - Non-negative numbers  https://hackage.haskell.org/package/num-non-negative-0.1 (int_index)
2019-01-26 01:28:04	-->	darjeeling_ (~darjeelin@205.175.106.167) has joined #haskell
2019-01-26 01:28:20	<--	jdevlieghere48 (~jdevliegh@68.183.174.129) has quit (Remote host closed the connection)
2019-01-26 01:29:28	-->	nfd9001 (~nfd9001@c-73-225-42-170.hsd1.wa.comcast.net) has joined #haskell
2019-01-26 01:30:06	-->	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has joined #haskell
2019-01-26 01:31:33	-->	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has joined #haskell
2019-01-26 01:32:11	-->	merijn (~merijn@a212-238-239-156.adsl.xs4all.nl) has joined #haskell
2019-01-26 01:32:45	-->	forest_kid (43a8cedb@gateway/web/freenode/ip.67.168.206.219) has joined #haskell
2019-01-26 01:34:22	<--	nfd9001 (~nfd9001@c-73-225-42-170.hsd1.wa.comcast.net) has quit (Ping timeout: 250 seconds)
2019-01-26 01:34:25	<--	forest_kid (43a8cedb@gateway/web/freenode/ip.67.168.206.219) has quit (Client Quit)
2019-01-26 01:35:54	<--	wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) has quit (Ping timeout: 246 seconds)
2019-01-26 01:36:36	<--	merijn (~merijn@a212-238-239-156.adsl.xs4all.nl) has quit (Ping timeout: 246 seconds)
2019-01-26 01:38:01	-->	Jaume (~textual@93.115.194.86) has joined #haskell
2019-01-26 01:38:10	-->	Wuzzy2 (~Wuzzy@p549C9C7F.dip0.t-ipconnect.de) has joined #haskell
2019-01-26 01:38:22	<--	Wuzzy (~Wuzzy@p5B0DF32B.dip0.t-ipconnect.de) has quit (Ping timeout: 244 seconds)
2019-01-26 01:38:50	-->	esp32_prog (~esp32_pro@178.18.54.206) has joined #haskell
2019-01-26 01:39:14	--	Jaume is now known as Tello
2019-01-26 01:40:01	-->	pagnol (~me@p54BE8845.dip0.t-ipconnect.de) has joined #haskell
2019-01-26 01:40:02	-->	jluttine (~jluttine@109.204.147.177) has joined #haskell
2019-01-26 01:40:17	<--	nbloomf (~nbloomf@2600:1700:83e0:1f40:6d74:a91e:18fc:6759) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-26 01:42:36	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-26 01:42:41	<--	thc202 (~thc202@unaffiliated/thc202) has quit (Quit: thc202)
2019-01-26 01:42:45	-->	jmcarthur (~jmcarthur@2601:86:100:1620::1) has joined #haskell
2019-01-26 01:42:51	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-26 01:42:57	<--	TipsyMe (~TipsyMe@50-50-239-253.waus.wi.frontiernet.net) has quit (Quit: TipsyMe)
2019-01-26 01:43:01	<--	carif (~mcarifio@cpe-67-246-228-200.rochester.res.rr.com) has quit (Ping timeout: 244 seconds)
2019-01-26 01:43:28	<--	esp32_prog (~esp32_pro@178.18.54.206) has quit (Ping timeout: 250 seconds)
2019-01-26 01:44:20	<--	jao (~jao@pdpc/supporter/professional/jao) has quit (Ping timeout: 250 seconds)
2019-01-26 01:45:03	<--	bbrodriguez (~Bender_Be@200.57.253.173) has quit (Ping timeout: 245 seconds)
2019-01-26 01:45:36	<--	siiky (~siiky@2001:8a0:ff55:bb00:d095:4bff:7685:9f08) has quit (Quit: leaving)
2019-01-26 01:46:43	<--	oisdk (~textual@2001:bb6:331c:dc58:8580:9785:629b:343e) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2019-01-26 01:47:09	<--	xrexeon (~xrexeon@41.237.99.188) has quit (Read error: Connection reset by peer)
2019-01-26 01:49:01	<--	Essadon (~Essadon@81-225-32-185-no249.tbcn.telia.com) has quit (Quit: Qutting)
2019-01-26 01:52:34	<--	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has quit (Remote host closed the connection)
2019-01-26 01:52:49	-->	rcshm (~rcshm@cpe-108-185-167-7.socal.res.rr.com) has joined #haskell
2019-01-26 01:52:51	<--	LKoen (~LKoen@2a01cb0407597a0009d775ce6db7ab39.ipv6.abo.wanadoo.fr) has quit (Quit: “It’s only logical. First you learn to talk, then you learn to think. Too bad it’s not the other way round.”)
